/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : usb_descriptor.h
**     Project   : ProcessorExpert
**     Processor : MK53N512LQ100
**     Component : USB_DEVICE_STACK
**     Version   : Driver 01.00, CPU db: 3.00.000
**     Compiler  : CodeWarrior ARM C Compiler
**     Date/Time : 2013-01-20, 16:53, # CodeGen: 1
**     Abstract  :
**     Settings  :
**     (c) Copyright <company/user-name>, 2011
**     http      : www.<company>.com
**     mail      : info@<company>.com
** ###################################################################*/
/* Begin of code block <0>  auto generated code, DO NOT MODIFY LINES BELOW */
#ifndef _USB_DESCRIPTOR_H
#define _USB_DESCRIPTOR_H
#include "usb_class.h"
#include "usb_framework.h"
/* End code block <0>  auto generated code, DO NOT MODIFY LINES ABOVE */

/* Write your own includes here ... */

/* Begin of code block <1>  auto generated code, DO NOT MODIFY LINES BELOW */
/******************************************************************************
 * Macro's
 *****************************************************************************/
#define BCD_USB_VERSION                     (0x0200)
/* Various descriptor sizes */
#define DEVICE_DESCRIPTOR_SIZE              (18)
#define DEVICE_QUALIFIER_DESCRIPTOR_SIZE    (10)
#define CONFIG_ONLY_DESC_SIZE               (9)
#define IFACE_ONLY_DESC_SIZE                (9)
#define ENDP_ONLY_DESC_SIZE                 (7)
#define DESC_ENDPOINT_COUNT                 (1)
#define DESC_INTERFACE_COUNT                (3)
#define USER_DESC_SIZE                      (0)
#define CONFIG_DESC_SIZE                    ((CONFIG_ONLY_DESC_SIZE) + \
                                            (IFACE_ONLY_DESC_SIZE * DESC_INTERFACE_COUNT) + \
                                            (ENDP_ONLY_DESC_SIZE * DESC_ENDPOINT_COUNT) + \
                                            (USER_DESC_SIZE))
/* Max descriptors provided by the Application */
#define USB_MAX_STD_DESCRIPTORS             (8)
#define USB_MAX_CLASS_SPECIFIC_DESCRIPTORS  (2)

/* Max configuration supported by the Application */
#define USB_MAX_CONFIG_SUPPORTED            (1)

/* Max string descriptors supported by the Application */
#define USB_MAX_STRING_DESCRIPTORS          (4)

/* Max language codes supported by the USB */
#define USB_MAX_LANGUAGES_SUPPORTED         (1)

/* string descriptors sizes */
#define USB_STR_DESC_SIZE                   (2)
#define USB_STR_0_SIZE                      (2)
#define USB_STR_1_SIZE                      (56)
#define USB_STR_2_SIZE                      (50)
#define USB_STR_n_SIZE                      (32)

/* descriptors codes */
#define USB_DEVICE_DESCRIPTOR               (1)
#define USB_CONFIG_DESCRIPTOR               (2)
#define USB_STRING_DESCRIPTOR               (3)
#define USB_IFACE_DESCRIPTOR                (4)
#define USB_ENDPOINT_DESCRIPTOR             (5)
#define USB_DEVQUAL_DESCRIPTOR              (6)
#define USB_MAX_SUPPORTED_INTERFACES        (3)
/* End code block <1>  auto generated code, DO NOT MODIFY LINES ABOVE */

/* Write code here ... */

/* redefine the USER_DESC_SIZE parameter here
 * example
 * #undef USER_DESC_SIZE
 * #define USER_DESC_SIZE                   (10)
 */
 
 #undef USER_DESC_SIZE
 #define USER_DESC_SIZE                   (0x41)
 
/* Add your custom macro here*/
#define REMOTE_WAKEUP_SHIFT                 (5)
#define REMOTE_WAKEUP_SUPPORT               (TRUE)

#define AUDIO_ONLY_DESC_SIZE                (0x09)
#define USB_AUDIO_DESCRIPTOR                (0x25)
#define USB_REPORT_DESCRIPTOR               (0x22)

#define AUDIO_CONTROL_INPUT_TERMINAL        (0x02)
#define AUDIO_CONTROL_OUTPUT_TERMINAL       (0x03)
#define AUDIO_CONTROL_FEATURE_UNIT          (0x06)

/* Audio controls at Feature Unit descriptor level */
#define AUDIO_MUTE_CONTROL                  (0x01)
#define AUDIO_VOLUME_CONTROL                (0x02)
#define AUDIO_BASS_CONTROL                  (0x04)
#define AUDIO_MID_CONTROL                   (0x08)
#define AUDIO_TREBLE_CONTROL                (0x10)
#define AUDIO_GRAPHIC_EQ_CONTROL            (0x20)
#define AUDIO_AUTOMATIC_GAIN_CONTROL        (0x40)
#define AUDIO_DELAY_CONTROL                 (0x80)
#define AUDIO_BASS_BOOST_CONTROL            (0x100)
#define AUDIO_LOUDNESS_CONTROL              (0x200)

#define AUDIO_UNIT_COUNT                    (0x03)
#define AUDIO_DESC_ENDPOINT_COUNT           (0x01)
/* Begin of code block <2>  auto generated code, DO NOT MODIFY LINES BELOW */
/******************************************************************************
 * Types
 *****************************************************************************/
typedef const struct _USB_LANGUAGE
{
    uint_16 const language_id;      /* Language ID */
    uint_8 const ** lang_desc;      /* Language Descriptor String */
    uint_8 const * lang_desc_size;  /* Language Descriptor Size */
} USB_LANGUAGE;

typedef const struct _USB_ALL_LANGUAGES
{
    /* Pointer to Supported Language String */
    uint_8 const *languages_supported_string;
    /* Size of Supported Language String */
    uint_8 const languages_supported_size;
    /* Array of Supported Languages */
    USB_LANGUAGE usb_language[USB_MAX_SUPPORTED_INTERFACES];
}USB_ALL_LANGUAGES;

typedef const struct _USB_ENDPOINTS
{
    /* Number of non control Endpoints */
    uint_8 count;
    /* Array of Endpoints Structures */
    USB_EP_STRUCT ep[DESC_ENDPOINT_COUNT];
}USB_ENDPOINTS;
/* End code block <2>  auto generated code, DO NOT MODIFY LINES ABOVE */

/* Write code here ... */

typedef struct _USB_AUDIO_UT_STRUCT
{
    uint_8          unit_id;      /* endpoint number         */
    uint_8          type;        /* type of endpoint        */
}USB_UT_STRUCT, *USB_UT_STRUCT_PTR;

typedef const struct _USB_AUDIO_UNITS
{
    /* Number of entities of this application */
    uint_8         count;
    /* Array of entities of this application */
    USB_UT_STRUCT  et[AUDIO_UNIT_COUNT];
}USB_AUDIO_UNITS;


/* Begin of code block <3>  auto generated code, DO NOT MODIFY LINES BELOW */
/******************************************************************************
* Global Functions
*****************************************************************************/
uint_8 USB_Desc_Get_Descriptor(
uint_8 controller_ID,
uint_8 type,
uint_8 str_num,
uint_16 index,
uint_8_ptr *descriptor,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Get_Descriptor (component USB_DEVICE_STACK)
**
**     Description :
**         The function returns the correponding descriptor
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**         type            - [IN]  Type of descriptor requested
**         str_num         - [IN]  String index for string
**                           descriptor
**         index           - [IN]  String descriptor language Id
**       * descriptor      - [OUT] Output descriptor
**                           pointer
**       * size            - [OUT] Size of descriptor returned
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Interface(uint_8 controller_ID, uint_8 interface, uint_8_ptr alt_interface);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Get_Interface (component USB_DEVICE_STACK)
**
**     Description :
**         The function returns the alternate interface
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**         interface       - [IN] Interface number
**         alt_interface   - [OUT] Output alternate
**                           interface
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

boolean USB_Desc_Valid_Configation(uint_8 controller_ID, uint_16 config_val);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Valid_Configation (component USB_DEVICE_STACK)
**
**     Description :
**         This function checks whether the configuration is valid or
**         not
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**         config_val      - [IN] Configuration value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

boolean USB_Desc_Valid_Interface(uint_8 controller_ID, uint_8 interface);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Valid_Interface (component USB_DEVICE_STACK)
**
**     Description :
**         This function checks whether the interface is valid or not
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**         interface       - [IN] Target interface
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

boolean USB_Desc_Remote_Wakeup(uint_8 controller_ID);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Remote_Wakeup (component USB_DEVICE_STACK)
**
**     Description :
**         This function returns remote wakeup is supported or not
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void* USB_Desc_Get_Endpoints(uint_8 controller_ID);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Get_Endpoints (component USB_DEVICE_STACK)
**
**     Description :
**         This function returns the information about all the non
**         control endpoints implemented
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Interface(uint_8 controller_ID, uint_8 interface, uint_8 alt_interface);
/*
** ===================================================================
**     Method      :  usb_device_USB_Desc_Set_Interface (component USB_DEVICE_STACK)
**
**     Description :
**         The function sets the alternate interface
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - [IN]  Controller ID
**         interface       - [IN] Interface number
**         alt_interface   - [IN] Input alternate
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* End code block <3>  auto generated code, DO NOT MODIFY LINES ABOVE */

/* Write code here ... */
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function returns with the list of all non control
**         endpoints used
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void* USB_Desc_Get_Entities(
uint_8 controller_ID
);

/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function returns with the list of all Input Terminal,
**         Output Terminal and Feature Unit
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Copy_Protect(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function is called in response to Set Terminal Control
**         Request
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Copy_Protect(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function is called in response to Get Terminal Control
**         Request
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Mute(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Mute state
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Mute(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the current Mute state
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Minimum Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Maximum Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Resolution Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Current Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Minimum Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Maximum Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Volume(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Resolution Volume value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Minimum Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Maximum Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Resolution Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Current Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Minimum Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Maximum Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Bass(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Maximum Bass value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         This function is called to Set Minimum Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         This function is called to Set Maximum Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         This function is called to Set Maximum Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Current Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Minimum Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Maximum Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Mid(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets the Resolution Mid value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function set Current Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function set Current Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function set Current Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function set Resolution Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function get Current Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function get Minimum Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function get Maximum Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Treble(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Resolution Treble value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Minimum Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Maximum Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Resolution Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Minimum Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Maximum Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Graphic_Equalizer(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Resolution Graphic Equalizer values
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Automatic_Gain(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Automatic Gain value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Automatic_Gain(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Automatic Gain value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Minimum Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Maximum Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Resolution Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Minimum Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Maximum Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Delay(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Resolution Delay value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Bass_Boost(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Bass Boost value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Bass_Boost(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Bass Boost value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Loudness(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Loudness value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Loudness(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Loudness value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Min_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Current Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Max_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Maximum Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Res_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function sets Resolution Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Min_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Minimum Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Max_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Minimum Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Res_Sampling_Frequency(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Resolution Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Cur_Pitch(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Resolution Sampling Frequency value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Cur_Pitch(
uint_8 controller_ID,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets Current Pitch value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Set_Mem_Endpoint(
uint_8 controller_ID,
uint_16 offset,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets endpoint memory value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         offset          - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint_8 USB_Desc_Get_Mem_Endpoint(
uint_8 controller_ID,
uint_16 offset,
uint_8 interface,
uint_8_ptr *data,
USB_PACKET_SIZE *size
);
/*
** ===================================================================
**     Method      :  usb_audio_ (component USB_AUDIO_CLASS)
**
**     Description :
**         The function gets endpoint memory value
**     Parameters  :
**         NAME            - DESCRIPTION
**         controller_ID   - 
**         offset          - 
**         interface       - 
**       * data            - Pointer to Data
**       * size            - Pointer to size of data
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* Begin of code block <4>  auto generated code, DO NOT MODIFY LINES BELOW */
#endif
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
/* End code block <4>  auto generated code, DO NOT MODIFY LINES ABOVE */
