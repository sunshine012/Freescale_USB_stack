
{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\USB_DEVICE_STACKAbstract.Inc
CONFIG_ONLY_DESC_SIZE=09
DEVICE_DESCRIPTOR_SIZE=12
Description_USB_Control_Service=This function handles the data sent or received on the control endpoint
Description_USB_Control_Service_Handler=This function sends a response to the data received on the control endpoint. The request is decoded in the control service
Description_USB_DCI_CallBack=This function is callback function of endpoints
Description_USB_DCI_Get_BDT_Index=This function returns BDT Index from Endpoint number, direction, odd/even buffer
Description_USB_DCI_SetAddressCallback=This function is callback function of set address request
Description_USB_DCI_Validate_Param=This function validates endpoint parameters and returns bdt index
Description_USB_Device_Init_Params=The funtion initializes the Device Layer Structures
Description_USB_LDD_OnDevice1msTimer=Called each 1 ms, On1msTimer() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceError=Called after the Error is detected, OnError() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceReset=Called after the reset signal is detected on the USB bus, OnDeviceReset() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. All pending transfers are cancelled and all EPs are disabled before this event is called.  Device address is set to "0".  The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceResume=Called after the resume signaling is done, OnDeviceResume() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSetupPacket=Called after the setup packet is received into the internal buffer, OnSetupPacket() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. Use the method GetSetupPacket() to copy setup packet to the user buffer. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSof=Called after the Sof is received, OnSof() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSpeedDetect=Called after the device detects bus speed, OnBusSpedDetect() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. EP 0 should be enabled and configured after the USB speed is known. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSuspend=Called after the suspend condition is met, OnDeviceSuspend() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_Strd_Req_Feature=This function is called in response to Clear or Set Feature request. This is a ch9 request, used to set/clear a feature on the device (device_remote_wakeup and test_mode) or on the endpoint(ep halt)
Description_USB_Strd_Req_Get_Config=This function is called in response to Get Config request. This is a ch9 request and is used to know the currently used configuration
Description_USB_Strd_Req_Get_Descriptor=This function is called in response to Get Descriptor request. This is a ch9 request and is used to send the descriptor requested by the host
Description_USB_Strd_Req_Get_Interface=This function is called in response to Get Interface request. This is a ch9 request and is used to know the current interface
Description_USB_Strd_Req_Get_Status=This function is called in response to Get Status request. This is a request and is called by the host to know the status of the device, the interface and the endpoint
Description_USB_Strd_Req_Set_Address=This is a ch9 request, saves the new address in a global variable. This address is assigned to the device after this transaction completes
Description_USB_Strd_Req_Set_Config=This function is called in response to Set Config request. This is a ch9 request and is used by the host to set the new configuration
Description_USB_Strd_Req_Set_Interface=This function is called in response to Set Interface request. This is a ch9 request and is used by the  host to set the interface
Description_USB_Strd_Req_Sync_Frame=This function is called in response to Sync Frame request. This req is used to set and then report an ep's synchronization frame
DriverAuthor=Author
DriverDate=09.04.2012
DriverVersion=01.00
EndOfInterface=
Endpoint_suffix=2_0
Interface_suffix=2
KINETIS=
ParCurrentSpeed=
ParEpNum=
ParErrorCode=
ParErrorSource=
ParTDevDataPtr=
ParUSBDevDataPtr=
ParUserDataPtr=
Paraddress=
Paralt_interface=
Parbuff_ptr=
Parbuffer_ptr=
Parclass_callback=
Parcomponent=
Parconfig_val=
Parcontroller_ID=
Parcount=
Pardata=
Pardescriptor=
Pardevice_number=
Pardirection=
Parendpoint_number=
Parendpoint_type=
Parep_num=
Parep_ptr=
Parevent=
Parevent_endpoint=
Parflag=
Parhandle=
Parindex=
Parinterface=
Parmax_packet_size=
Parnumber_of_endpoints=
Parodd=
Parother_req_callback=
ParpTD=
Parservice=
Parsetting=
Parsetup_packet=
Parsize=
Parstart_addr=
Parstatus=
Parstr_num=
Partype=
Parval=
Product_ID_high=2
Product_ID_low=5
Release_num_high=0
Release_num_low=2
RetVal=
Settings=Common\USB_DEVICE_STACKSettings.Inc
String_cur_index=2
USB_CONFIG_DESCRIPTOR=02
USB_DESC_CONST=
USB_DEVICE_DESCRIPTOR=01
Vendor_ID_high=37
Vendor_ID_low=4
_AlternateSetting=1
_Attributes=1
_Configuration_Index=0
_Configuration_Value=1
_DESC_ENDPOINT_COUNT=1
_EndpointAddress=129
_EndpointDirection=1
_EndpointMaxPacketSize=16
_EndpointMaxPacketSize_high=0
_EndpointMaxPacketSize_low=16
_EndpointNumber=1
_Gen_desc_en=0
_InterfaceClass=1
_InterfaceNumber=1
_InterfaceProtocol=0
_InterfaceSubClass=2
_Interface_des_index=0
_Interval=1
_NumConfigurations=1
_NumEndpoints=1
_NumInterfaces=2
_OTG_en=1
_Synchronisation_Type=0
_Transfer_Type=1
_Usage_Type=0
_index_gen=4
_max_str_des=5
str_des_cur_index=2
str_des_size_temp=18
wTotalLength=12

 LOCAL SYMBOLS (alphabet order)
-------------------------------
AlternateSetting0=0
AlternateSetting1=0
AlternateSetting2=1
Attributes=Self Powered
BeanVersion=01.027
CHG_BeanIsEnabled=yes
Clear_Mem=Clear_Mem
Clear_Mem_Hint=void usb_device_Clear_Mem(uint_8_ptr start_addr, uint_32 count, uint_8 val);
Clear_Mem_HintHint=This function clears memory starting from start_addr till count bytes
Clear_Mem_HintHintLong=This function clears memory starting from start_addr till count bytes
Configuration_Index=0
Configuration_Value=1
DeviceName=usb_device
DeviceType=USB_DEVICE_STACK
Device_Class=0
Device_Protocol=0
Device_SubClass=0
EndpointDirection2_0=IN
EndpointMaxPacketSize2_0=32
EndpointMaxPacketSize_int_iso2_0=16
EndpointNumber2_0=1
Endpoints_List0MaxItem=-1
Endpoints_List0NumItems=0
Endpoints_List1MaxItem=-1
Endpoints_List1NumItems=0
Endpoints_List2MaxItem=0
Endpoints_List2NumItems=1
Gen_desc_en=yes
InterfaceClass0=1
InterfaceClass1=1
InterfaceClass2=1
InterfaceNumber0=0
InterfaceNumber1=1
InterfaceNumber2=1
InterfaceProtocol0=0
InterfaceProtocol1=0
InterfaceProtocol2=0
InterfaceSubClass0=1
InterfaceSubClass1=2
InterfaceSubClass2=2
Interface_des_index0=0
Interface_des_index1=0
Interface_des_index2=0
Interfaces_ListMaxItem=2
Interfaces_ListNumItems=3
Interval2_0=1
LANGID=2308
LDD_Component=USB_LDD
Manufacturer=1
MaxPacketSize=32
MaxPower=50
ModuleName=usb_device
NumConfigurations=1
NumEndpoints0=0
NumEndpoints1=0
NumEndpoints2=1
NumInterfaces=2
OS=MQX_Lite
OTG_en=no
Product=2
ProductID=517
SerialNumber=3
String0=FREESCALE SEMICONDUCTOR INC
String1=USB AUDIO DEVICE PEx DEMO
String2=123456789
String_desc_listMaxItem=2
String_desc_listNumItems=3
Synchronisation_Type2_0=No Synchonisation
Transfer_Type2_0=ISOCHRONOUS
USB_Class_DeInit=USB_Class_DeInit
USB_Class_DeInit_Hint=uint_8 usb_device_USB_Class_DeInit(uint_8 controller_ID);
USB_Class_DeInit_HintHint=This function De-initializes the Class Module
USB_Class_DeInit_HintHintLong=This function De-initializes the Class Module
USB_Class_Init=USB_Class_Init
USB_Class_Init_Hint=uint_8 usb_device_USB_Class_Init(uint_8 controller_ID, USB_CLASS_CALLBACK...
USB_Class_Init_HintHint=The function initializes the Class Module
USB_Class_Init_HintHintLong=The function initializes the Class Module
USB_Class_Periodic_Task=USB_Class_Periodic_Task
USB_Class_Periodic_Task_Hint=void usb_device_USB_Class_Periodic_Task(void);
USB_Class_Periodic_Task_HintHint=This funtion calls for periodic tasks
USB_Class_Periodic_Task_HintHintLong=This funtion calls for periodic tasks
USB_Class_Send_Data=USB_Class_Send_Data
USB_Class_Send_Data_Hint=uint_8 usb_device_USB_Class_Send_Data(uint_8 controller_ID, uint_8 ep_num,...
USB_Class_Send_Data_HintHint=This function calls the device to send data upon receiving an IN token
USB_Class_Send_Data_HintHintLong=This function calls the device to send data upon receiving an IN token
USB_DCI_Assert_Resume=USB_DCI_Assert_Resume
USB_DCI_Assert_Resume_Hint=void usb_device_USB_DCI_Assert_Resume(_usb_device_handle handle);
USB_DCI_Assert_Resume_HintHint=This function starts RESUME signalling and then stops it after some delay. In...
USB_DCI_Assert_Resume_HintHintLong=This function starts RESUME signalling and then stops it after some delay. In this delay make sure that COP is reset.
USB_DCI_Bus_Reset_Handler=USB_DCI_Bus_Reset_Handler
USB_DCI_Bus_Reset_Handler_Hint=void usb_device_USB_DCI_Bus_Reset_Handler(void);
USB_DCI_Bus_Reset_Handler_HintHint=This functions is called when USB Bus Reset event is received on USB Bus.This...
USB_DCI_Bus_Reset_Handler_HintHintLong=This functions is called when USB Bus Reset event is received on USB Bus.This function clears all the errors conditions and reinit Global data structures. Also resets USB device controller.
USB_DCI_Cancel_Transfer=USB_DCI_Cancel_Transfer
USB_DCI_Cancel_Transfer_Hint=uint_8 usb_device_USB_DCI_Cancel_Transfer(_usb_device_handle handle, uint_8...
USB_DCI_Cancel_Transfer_HintHint=This function cancels any pending Transfers which ahve not been sent
USB_DCI_Cancel_Transfer_HintHintLong=This function cancels any pending Transfers which ahve not been sent
USB_DCI_DeInit=USB_DCI_DeInit
USB_DCI_DeInit_Hint=void usb_device_USB_DCI_DeInit(void);
USB_DCI_DeInit_HintHint=This function de-initializes the Controller layer
USB_DCI_DeInit_HintHintLong=This function de-initializes the Controller layer
USB_DCI_Deinit_EndPoint=USB_DCI_Deinit_EndPoint
USB_DCI_Deinit_EndPoint_Hint=uint_8 usb_device_USB_DCI_Deinit_EndPoint(uint_8 controller_ID, uint_8...
USB_DCI_Deinit_EndPoint_HintHint=This function un-intializes the endpoint by clearing the corresponding...
USB_DCI_Deinit_EndPoint_HintHintLong=This function un-intializes the endpoint by clearing the corresponding endpoint control register and then clearing the bdt elem.
USB_DCI_Get_Setup_Data=USB_DCI_Get_Setup_Data
USB_DCI_Get_Setup_Data_Hint=void usb_device_USB_DCI_Get_Setup_Data(_usb_device_handle handle, uint_8...
USB_DCI_Get_Setup_Data_HintHint=This function copies Setup Packet from USB RAM to application buffer
USB_DCI_Get_Setup_Data_HintHintLong=This function copies Setup Packet from USB RAM to application buffer
USB_DCI_Get_Transfer_Status=USB_DCI_Get_Transfer_Status
USB_DCI_Get_Transfer_Status_Hint=uint_8 usb_device_USB_DCI_Get_Transfer_Status(_usb_device_handle handle,...
USB_DCI_Get_Transfer_Status_HintHint=This function retrieves the transfer status of the endpoint by checking the...
USB_DCI_Get_Transfer_Status_HintHintLong=This function retrieves the transfer status of the endpoint by checking the BDT as well as the endpoint control register
USB_DCI_Init=USB_DCI_Init
USB_DCI_Init_EndPoint=USB_DCI_Init_EndPoint
USB_DCI_Init_EndPoint_Hint=uint_8 usb_device_USB_DCI_Init_EndPoint(uint_8 controller_ID,...
USB_DCI_Init_EndPoint_HintHint=This function initializes an endpoint and the Bufffer Descriptor Table entry...
USB_DCI_Init_EndPoint_HintHintLong=This function initializes an endpoint and the Bufffer Descriptor Table entry associated with it. Incase the input parameters are invalid it will return USBERR_EP_INIT_FAILED error.
USB_DCI_Init_Hint=uint_8 usb_device_USB_DCI_Init(uint_8 controller_ID);
USB_DCI_Init_HintHint=This function initializes the Controller layer
USB_DCI_Init_HintHintLong=This function initializes the Controller layer
USB_DCI_OnDeviceError=USB_DCI_OnDeviceError
USB_DCI_OnDeviceError_Hint=void usb_device_USB_DCI_OnDeviceError(LDD_TUserData *UserDataPtr, uint8_t...
USB_DCI_OnDeviceError_HintHint=This function is called after the Error is detected
USB_DCI_OnDeviceError_HintHintLong=This function is called after the Error is detected
USB_DCI_OnDeviceResume=USB_DCI_OnDeviceResume
USB_DCI_OnDeviceResume_Hint=void usb_device_USB_DCI_OnDeviceResume(LDD_TUserData *UserDataPtr);
USB_DCI_OnDeviceResume_HintHint=This function is called after the resume signaling is done
USB_DCI_OnDeviceResume_HintHintLong=This function is called after the resume signaling is done
USB_DCI_OnDeviceSetupPacket=USB_DCI_OnDeviceSetupPacket
USB_DCI_OnDeviceSetupPacket_Hint=void usb_device_USB_DCI_OnDeviceSetupPacket(LDD_TUserData *UserDataPtr,...
USB_DCI_OnDeviceSetupPacket_HintHint=This function called after the setup packet is received into the internal buffer
USB_DCI_OnDeviceSetupPacket_HintHintLong=This function called after the setup packet is received into the internal buffer
USB_DCI_OnDeviceSpeedDetect=USB_DCI_OnDeviceSpeedDetect
USB_DCI_OnDeviceSpeedDetect_Hint=void usb_device_USB_DCI_OnDeviceSpeedDetect(LDD_TUserData *UserDataPtr,...
USB_DCI_OnDeviceSpeedDetect_HintHint=This function is called after the device detects bus speed
USB_DCI_OnDeviceSpeedDetect_HintHintLong=This function is called after the device detects bus speed
USB_DCI_OnDeviceSuspend=USB_DCI_OnDeviceSuspend
USB_DCI_OnDeviceSuspend_Hint=void usb_device_USB_DCI_OnDeviceSuspend(LDD_TUserData *UserDataPtr);
USB_DCI_OnDeviceSuspend_HintHint=This function is called after the suspend condition is met
USB_DCI_OnDeviceSuspend_HintHintLong=This function is called after the suspend condition is met
USB_DCI_Recv_Data=USB_DCI_Recv_Data
USB_DCI_Recv_Data_Hint=uint_8 usb_device_USB_DCI_Recv_Data(_usb_device_handle handle, uint_8...
USB_DCI_Recv_Data_HintHint=This function retrieves data received data on a RECV endpoint by copying it...
USB_DCI_Recv_Data_HintHintLong=This function retrieves data received data on a RECV endpoint by copying it from USB RAM to application buffer
USB_DCI_Send_Data=USB_DCI_Send_Data
USB_DCI_Send_Data_Hint=uint_8 usb_device_USB_DCI_Send_Data(_usb_device_handle handle, uint_8...
USB_DCI_Send_Data_HintHint=This function configures Controller to send data on an SEND endpoint by...
USB_DCI_Send_Data_HintHintLong=This function configures Controller to send data on an SEND endpoint by setting the BDT to send data.
USB_DCI_Set_Address=USB_DCI_Set_Address
USB_DCI_Set_Address_Hint=void usb_device_USB_DCI_Set_Address(_usb_device_handle handle, uint_8 address);
USB_DCI_Set_Address_HintHint=This function configures Controller to send data on an SEND endpoint
USB_DCI_Set_Address_HintHintLong=This function configures Controller to send data on an SEND endpoint
USB_DCI_Stall_EndPoint=USB_DCI_Stall_EndPoint
USB_DCI_Stall_EndPoint_Hint=void usb_device_USB_DCI_Stall_EndPoint(_usb_device_handle handle, uint_8...
USB_DCI_Stall_EndPoint_HintHint=This function stalls the endpoint by setting Endpoint BDT
USB_DCI_Stall_EndPoint_HintHintLong=This function stalls the endpoint by setting Endpoint BDT
USB_DCI_Unstall_EndPoint=USB_DCI_Unstall_EndPoint
USB_DCI_Unstall_EndPoint_Hint=void usb_device_USB_DCI_Unstall_EndPoint(_usb_device_handle handle, uint_8...
USB_DCI_Unstall_EndPoint_HintHint=This function unstalls the endpoint by clearing Endpoint Control Register and...
USB_DCI_Unstall_EndPoint_HintHintLong=This function unstalls the endpoint by clearing Endpoint Control Register and BDT
USB_Desc_Get_Descriptor=USB_Desc_Get_Descriptor
USB_Desc_Get_Descriptor_Hint=uint_8 usb_device_USB_Desc_Get_Descriptor(uint_8 controller_ID, uint_8 type,...
USB_Desc_Get_Descriptor_HintHint=The function returns the correponding descriptor
USB_Desc_Get_Descriptor_HintHintLong=The function returns the correponding descriptor
USB_Desc_Get_Endpoints=USB_Desc_Get_Endpoints
USB_Desc_Get_Endpoints_Hint=void* usb_device_USB_Desc_Get_Endpoints(uint_8 controller_ID);
USB_Desc_Get_Endpoints_HintHint=This function returns the information about all the non control endpoints...
USB_Desc_Get_Endpoints_HintHintLong=This function returns the information about all the non control endpoints implemented
USB_Desc_Get_Interface=USB_Desc_Get_Interface
USB_Desc_Get_Interface_Hint=uint_8 usb_device_USB_Desc_Get_Interface(uint_8 controller_ID, uint_8...
USB_Desc_Get_Interface_HintHint=The function returns the alternate interface
USB_Desc_Get_Interface_HintHintLong=The function returns the alternate interface
USB_Desc_Remote_Wakeup=USB_Desc_Remote_Wakeup
USB_Desc_Remote_Wakeup_Hint=bool usb_device_USB_Desc_Remote_Wakeup(uint_8 controller_ID);
USB_Desc_Remote_Wakeup_HintHint=This function returns remote wakeup is supported or not
USB_Desc_Remote_Wakeup_HintHintLong=This function returns remote wakeup is supported or not
USB_Desc_Set_Interface=USB_Desc_Set_Interface
USB_Desc_Set_Interface_Hint=uint_8 usb_device_USB_Desc_Set_Interface(uint_8 controller_ID, uint_8...
USB_Desc_Set_Interface_HintHint=The function sets the alternate interface
USB_Desc_Set_Interface_HintHintLong=The function sets the alternate interface
USB_Desc_Valid_Configation=USB_Desc_Valid_Configation
USB_Desc_Valid_Configation_Hint=bool usb_device_USB_Desc_Valid_Configation(uint_8 controller_ID, uint_16...
USB_Desc_Valid_Configation_HintHint=This function checks whether the configuration is valid or not
USB_Desc_Valid_Configation_HintHintLong=This function checks whether the configuration is valid or not
USB_Desc_Valid_Interface=USB_Desc_Valid_Interface
USB_Desc_Valid_Interface_Hint=bool usb_device_USB_Desc_Valid_Interface(uint_8 controller_ID, uint_8...
USB_Desc_Valid_Interface_HintHint=This function checks whether the interface is valid or not
USB_Desc_Valid_Interface_HintHintLong=This function checks whether the interface is valid or not
USB_Device_Call_Service=USB_Device_Call_Service
USB_Device_Call_Service_Hint=uint_8 usb_device_USB_Device_Call_Service(uint_8 type,...
USB_Device_Call_Service_HintHint=This function calls the registered service callback function of the...
USB_Device_Call_Service_HintHintLong=This function calls the registered service callback function of the application layer based on the type of event received. This function is called from the DCI layer.
USB_Framework_DeInit=USB_Framework_DeInit
USB_Framework_DeInit_Hint=uint_8 usb_device_USB_Framework_DeInit(uint_8 controller_ID);
USB_Framework_DeInit_HintHint=The funtion De-initializes the Class Module
USB_Framework_DeInit_HintHintLong=The funtion De-initializes the Class Module
USB_Framework_Init=USB_Framework_Init
USB_Framework_Init_Hint=uint_8 usb_device_USB_Framework_Init(uint_8 controller_ID, USB_CLASS_CALLBACK...
USB_Framework_Init_HintHint=This fuction registers the service on the control endpoint
USB_Framework_Init_HintHintLong=This fuction registers the service on the control endpoint
USB_Framework_Reset=USB_Framework_Reset
USB_Framework_Reset_Hint=uint_8 usb_device_USB_Framework_Reset(uint_8 controller_ID);
USB_Framework_Reset_HintHint=This function is used to reset the framework module
USB_Framework_Reset_HintHintLong=This function is used to reset the framework module
Usage_Type2_0=Data Endpoint
VendorID=9476
_usb_device_deinit=_usb_device_deinit
_usb_device_deinit_Hint=uint_8 usb_device__usb_device_deinit(void);
_usb_device_deinit_HintHint=This function de-initializes the Device layer and the Controller layer
_usb_device_deinit_HintHintLong=This function de-initializes the Device layer and the Controller layer
_usb_device_deinit_endpoint=_usb_device_deinit_endpoint
_usb_device_deinit_endpoint_Hint=uint_8 usb_device__usb_device_deinit_endpoint(_usb_device_handle handle,...
_usb_device_deinit_endpoint_HintHint=This function deinitializes an endpoint the Device layer and the Controller...
_usb_device_deinit_endpoint_HintHintLong=This function deinitializes an endpoint the Device layer and the Controller layer in the S08 USB stack. It validate whether all endpoints have already been deinitialized or not and then calls the controller layer endpoint deinitialize function
_usb_device_get_status=_usb_device_get_status
_usb_device_get_status_Hint=uint_8 usb_device__usb_device_get_status(_usb_device_handle handle, uint_8...
_usb_device_get_status_HintHint=This function retrieves the endpoint as well USB component status which is...
_usb_device_get_status_HintHintLong=This function retrieves the endpoint as well USB component status which is stored by calling USB_Device_Set_Status. This function can be called by Application as well as the DCI layer.
_usb_device_init=_usb_device_init
_usb_device_init_Hint=uint_8 usb_device__usb_device_init(uint_8 device_number, _usb_device_handle...
_usb_device_init_HintHint=This function initializes the Device layer and the Controller layer of the...
_usb_device_init_HintHintLong=This function initializes the Device layer and the Controller layer of the S08 USB stack. It initialised the variables used for this layer and then calls the controller layer initialize function
_usb_device_init_endpoint=_usb_device_init_endpoint
_usb_device_init_endpoint_Hint=uint_8 usb_device__usb_device_init_endpoint(_usb_device_handle handle, uint_8...
_usb_device_init_endpoint_HintHint=This function initializes an endpoint the Device layer and the Controller...
_usb_device_init_endpoint_HintHintLong=This function initializes an endpoint the Device layer and the Controller layer in the S08 USB stack. It validate whether all endpoints have already been initialized or not and then calls the controller layer endpoint initialize function
_usb_device_register_service=_usb_device_register_service
_usb_device_register_service_Hint=uint_8 usb_device__usb_device_register_service(uint_8 controller_ID, uint_8...
_usb_device_register_service_HintHint=This function registers a callback function from the application if it is...
_usb_device_register_service_HintHintLong=This function registers a callback function from the application if it is called not already registered so that the regitered callback function can be if the event of that type occurs
_usb_device_set_status=_usb_device_set_status
_usb_device_set_status_Hint=uint_8 usb_device__usb_device_set_status(_usb_device_handle handle, uint_8...
_usb_device_set_status_HintHint=This function sets the endpoint as well USB component status which can be...
_usb_device_set_status_HintHintLong=This function sets the endpoint as well USB component status which can be retrieved by calling _usb_device_get_status. This function can be called by Application as well as the DCI layer.
_usb_device_unregister_service=_usb_device_unregister_service
_usb_device_unregister_service_Hint=uint_8 usb_device__usb_device_unregister_service(_usb_device_handle handle,...
_usb_device_unregister_service_HintHint=This function un registers a callback function which has been previously...
_usb_device_unregister_service_HintHintLong=This function un registers a callback function which has been previously registered by the application layer
bcdDevice=2
bcdUSB=512
runSpeedModeNum=1
BeanUserCopyright=[(c) Copyright <company/user-name>, 2011|http      : www.<company>.com|mail      : info@<company>.com]
InhrSymbolList=[LDD_Component]
MethodHintList=[uint_8 usb_device_USB_Class_Init(uint_8 controller_ID, USB_CLASS_CALLBACK class_callback, USB_REQ_FUNC other_req_callback);|uint_8 usb_device_USB_Class_DeInit(uint_8 controller_ID);|uint_8 usb_device_USB_Class_Send_Data(uint_8 controller_ID, uint_8 ep_num, uint_8_ptr buff_ptr, USB_PACKET_SIZE size);|void usb_device_USB_Class_Periodic_Task(void);|uint_8 usb_device__usb_device_init(uint_8 device_number, _usb_device_handle *handle, uint_8 number_of_endpoints);|uint_8 usb_device__usb_device_deinit(void);|uint_8 usb_device__usb_device_init_endpoint(_usb_device_handle handle, uint_8 endpoint_number, uint_16 max_packet_size, uint_8 direction, uint_8 endpoint_type, uint_8 flag);|uint_8 usb_device__usb_device_deinit_endpoint(_usb_device_handle handle, uint_8 endpoint_number, uint_8 direction);|uint_8 usb_device__usb_device_get_status(_usb_device_handle handle, uint_8 component, uint_16_ptr status);|uint_8 usb_device__usb_device_set_status(_usb_device_handle handle, uint_8 component, uint_16 setting);|uint_8 usb_device__usb_device_register_service(uint_8 controller_ID, uint_8 type, USB_SERVICE_CALLBACK service);|uint_8 usb_device__usb_device_unregister_service(_usb_device_handle handle, uint_8 event_endpoint);|uint_8 usb_device_USB_Device_Call_Service(uint_8 type, PTR_USB_DEV_EVENT_STRUCT event);|uint_8 usb_device_USB_Framework_Init(uint_8 controller_ID, USB_CLASS_CALLBACK class_callback, USB_REQ_FUNC other_req_callback);|uint_8 usb_device_USB_Framework_DeInit(uint_8 controller_ID);|uint_8 usb_device_USB_Framework_Reset(uint_8 controller_ID);|void usb_device_USB_DCI_Bus_Reset_Handler(void);|uint_8 usb_device_USB_DCI_Init(uint_8 controller_ID);|void usb_device_USB_DCI_DeInit(void);|uint_8 usb_device_USB_DCI_Init_EndPoint(uint_8 controller_ID, USB_EP_STRUCT_PTR ep_ptr, bool flag);|uint_8 usb_device_USB_DCI_Deinit_EndPoint(uint_8 controller_ID, uint_8 ep_num, uint_8 direction);|uint_8 usb_device_USB_DCI_Cancel_Transfer(_usb_device_handle handle, uint_8 endpoint_number, uint_8 direction);|void usb_device_USB_DCI_Stall_EndPoint(_usb_device_handle handle, uint_8 endpoint_number, uint_8 direction);|void usb_device_USB_DCI_Unstall_EndPoint(_usb_device_handle handle, uint_8 endpoint_number, uint_8 direction);|void usb_device_USB_DCI_Get_Setup_Data(_usb_device_handle handle, uint_8 endpoint_number, uint_8_ptr buffer_ptr);|uint_8 usb_device_USB_DCI_Get_Transfer_Status(_usb_device_handle handle, uint_8 endpoint_number, uint_8_ptr buffer_ptr);|uint_8 usb_device_USB_DCI_Recv_Data(_usb_device_handle handle, uint_8 endpoint_number, uchar_ptr buffer_ptr, uint_32 size);|uint_8 usb_device_USB_DCI_Send_Data(_usb_device_handle handle, uint_8 endpoint_number, uchar_ptr buffer_ptr, uint_32 size);|void usb_device_USB_DCI_Assert_Resume(_usb_device_handle handle);|void usb_device_USB_DCI_Set_Address(_usb_device_handle handle, uint_8 address);|void usb_device_USB_DCI_OnDeviceSpeedDetect(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed);|void usb_device_USB_DCI_OnDeviceSuspend(LDD_TUserData *UserDataPtr);|void usb_device_USB_DCI_OnDeviceResume(LDD_TUserData *UserDataPtr);|void usb_device_USB_DCI_OnDeviceSetupPacket(LDD_TUserData *UserDataPtr, uint8_t EpNum);|void usb_device_USB_DCI_OnDeviceError(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode);|void usb_device_Clear_Mem(uint_8_ptr start_addr, uint_32 count, uint_8 val);|uint_8 usb_device_USB_Desc_Get_Descriptor(uint_8 controller_ID, uint_8 type, uint_8 str_num, uint_16 index, uint_8_ptr *descriptor, USB_PACKET_SIZE *size);|uint_8 usb_device_USB_Desc_Get_Interface(uint_8 controller_ID, uint_8 interface, uint_8_ptr alt_interface);|uint_8 usb_device_USB_Desc_Set_Interface(uint_8 controller_ID, uint_8 interface, uint_8 alt_interface);|bool usb_device_USB_Desc_Valid_Configation(uint_8 controller_ID, uint_16 config_val);|bool usb_device_USB_Desc_Valid_Interface(uint_8 controller_ID, uint_8 interface);|bool usb_device_USB_Desc_Remote_Wakeup(uint_8 controller_ID);|void* usb_device_USB_Desc_Get_Endpoints(uint_8 controller_ID);]
MethodList=[USB_Class_Init|USB_Class_DeInit|USB_Class_Send_Data|USB_Class_Periodic_Task|_usb_device_init|_usb_device_deinit|_usb_device_init_endpoint|_usb_device_deinit_endpoint|_usb_device_get_status|_usb_device_set_status|_usb_device_register_service|_usb_device_unregister_service|USB_Device_Call_Service|USB_Framework_Init|USB_Framework_DeInit|USB_Framework_Reset|USB_DCI_Bus_Reset_Handler|USB_DCI_Init|USB_DCI_DeInit|USB_DCI_Init_EndPoint|USB_DCI_Deinit_EndPoint|USB_DCI_Cancel_Transfer|USB_DCI_Stall_EndPoint|USB_DCI_Unstall_EndPoint|USB_DCI_Get_Setup_Data|USB_DCI_Get_Transfer_Status|USB_DCI_Recv_Data|USB_DCI_Send_Data|USB_DCI_Assert_Resume|USB_DCI_Set_Address|USB_DCI_OnDeviceSpeedDetect|USB_DCI_OnDeviceSuspend|USB_DCI_OnDeviceResume|USB_DCI_OnDeviceSetupPacket|USB_DCI_OnDeviceError|Clear_Mem|USB_Desc_Get_Descriptor|USB_Desc_Get_Interface|USB_Desc_Set_Interface|USB_Desc_Valid_Configation|USB_Desc_Valid_Interface|USB_Desc_Remote_Wakeup|USB_Desc_Get_Endpoints]
String0List=[F|R|E|E|S|C|A|L|E| |S|E|M|I|C|O|N|D|U|C|T|O|R| |I|N|C]
String1List=[U|S|B| |A|U|D|I|O| |D|E|V|I|C|E| |P|E|x| |D|E|M|O]
String2List=[1|2|3|4|5|6|7|8|9]
runSpeedMode=[Yes]

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_BUS_FREQ_HZ_MAX=24000000
CPUDB_CPU_MASTER=MKL25Z4
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MKL25Z128xxx4
CPUDB_LQFP80=-1
CPUDB_MKL25Z128xxx4=-1
CPUDB_MKL25Z4=-1
CPUDB_PACKAGE=LQFP80
CPUDB_PLL_INPUT_FREQ_HZ_MAX=4000000
CPUDB_PLL_INPUT_FREQ_HZ_MIN=2000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=100000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=48000000
CPUDB_ProgramFlashBlockCount=1
CPUDB_ProgramFlashEraseUnitSize=1024
CPUDB_ProgramFlashSize=131072
CPUDB_ProgramFlashWriteUnitSize=4
CPUDB_SYSTEM_FREQ_HZ_MAX=48000000
CPU_DB_version=3.00.000
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MKL25
CPUtype=MKL25Z128LK4
CPUvariant=MKL25Z128VLK4
ClientDir_Binary=E:\USB_proccessor_expert_update\Test\20121119_Processor_expert\MKL25Z128\USB_AUDIO_DEVICE_MQX_Lite_MKL25Z128_PEx\Sources\
ClientDir_Code=E:\USB_proccessor_expert_update\Test\20121119_Processor_expert\MKL25Z128\USB_AUDIO_DEVICE_MQX_Lite_MKL25Z128_PEx\Generated_Code\
ClientDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
ClientDir_Project=E:\USB_proccessor_expert_update\Test\20121119_Processor_expert\MKL25Z128\USB_AUDIO_DEVICE_MQX_Lite_MKL25Z128_PEx\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
EclipseProjectName=USB_AUDIO_DEVICE_MQX_Lite_MKL25Z128_PEx
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
OnChipEEPROM=0
OnChipFLASH=131072
OnChipRAM=16384
OperatingSystemId=MQXLite
PE_DEBUG=
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_4PEx_ToolChain_Linker_EntryPoint=__boot
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void __attribute__ ((constructor))
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_GenBitMask=
PE_G_InternalMethodDescriptionNotFound=
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=_int_disable
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=_int_enable
PE_G_RTOSAdap_regCompIndex=1
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventEnabled_OnCounterRestart=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel0=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel1=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel2=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel3=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel4=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel5=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel6=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel7=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnCounterRestart=(void (*)(LDD_TUserData *UserDataPtr))&SystemTimer1_SystemTimer1_OnCounterRestart
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetCounterValue=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetInputFrequency=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetPeriodTicks=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_ResetCounter=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_SetPeriodTicks=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_Deinit
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_Enable
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCaptureValue=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType *ValuePtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCounterValue=(SystemTimer1_TValueType (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_GetCounterValue
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequency=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_GetInputFrequency
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequencyReal=(LDD_TimerUnit_Tfloat (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr))&SystemTimer1_GetPeriodTicks
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&SystemTimer1_Init
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ResetCounter=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_ResetCounter
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectCaptureEdge=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TEdge Edge))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectInputFrequency=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TClockList InputFrequency))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectOutputAction=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TOutAction CompareAction, LDD_TimerUnit_TOutAction CounterAction))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType Ticks))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType Ticks))&SystemTimer1_SetPeriodTicks
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDevice1msTimer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceError=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceReset=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceResume=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSetupPacket=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSof=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSpeedDetect=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSuspend=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDevice1msTimer
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))&USB_LDD_USB_LDD_OnDeviceError
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceReset
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceResume
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=(void (*)(LDD_TUserData *UserDataPtr, uint8_t EpNum))&USB_LDD_USB_LDD_OnDeviceSetupPacket
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=(void (*)(LDD_TUserData *UserDataPtr, uint16_t FrameNumber))&USB_LDD_USB_LDD_OnDeviceSof
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))&USB_LDD_USB_LDD_OnDeviceSpeedDetect
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceSuspend
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_Otg_TState NewState))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceAssertResume=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceCancelTransfer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceDeinitEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetTransferStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetUsbStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceInitEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceReadSetupData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceRecvData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSendData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetAddress=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetUsbStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceStallEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceUnstallEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceDataPtr *DeviceData, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Deinit
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_DeviceAssertResume
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceCancelTransfer
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceDeinitEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceGetTransferStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr))&USB_LDD_DeviceGetUsbStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags))&USB_LDD_DeviceInitEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr))&USB_LDD_DeviceReadSetupData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))&USB_LDD_DeviceRecvData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))&USB_LDD_DeviceSendData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Address))&USB_LDD_DeviceSetAddress
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd))&USB_LDD_DeviceSetUsbStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceStallEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceUnstallEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Disable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Enable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=(uint8_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=(LDD_USB_Host_TState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=(LDD_USB_TTransferState (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TTransferHandle *TransferHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeInitParamsPtr, LDD_USB_Host_TPipeHandle **PipeHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPortControlCmd Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=(LDD_TDeviceData * (*)(LDD_TUserData *UserDataPtr))&USB_LDD_Init
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))&USB_LDD_SetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_USE_UINTXX_T=
PE_ProductVersion=10.0
PEversion=05.03
PEversionDecimal=1283
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectModule=ProcessorExpert
ProjectName=ProcessorExpert
ServerDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2012-11-19, 17:37, # CodeGen: 11
Xtal_kHz=4000
Xtal_kHz_real=4000
ivINT_ADC0=_int_kernel_isr
ivINT_CMP0=_int_kernel_isr
ivINT_DAC0=_int_kernel_isr
ivINT_DMA0=_int_kernel_isr
ivINT_DMA1=_int_kernel_isr
ivINT_DMA2=_int_kernel_isr
ivINT_DMA3=_int_kernel_isr
ivINT_FTFA=_int_kernel_isr
ivINT_I2C0=_int_kernel_isr
ivINT_I2C1=_int_kernel_isr
ivINT_Initial_Program_Counter=__boot
ivINT_LLW=_int_kernel_isr
ivINT_LPTimer=_int_kernel_isr
ivINT_LVD_LVW=_int_kernel_isr
ivINT_MCG=_int_kernel_isr
ivINT_PIT=_int_kernel_isr
ivINT_PORTA=_int_kernel_isr
ivINT_PORTD=_int_kernel_isr
ivINT_RTC=_int_kernel_isr
ivINT_RTC_Seconds=_int_kernel_isr
ivINT_Reserved20=_int_kernel_isr
ivINT_Reserved39=_int_kernel_isr
ivINT_Reserved45=_int_kernel_isr
ivINT_SPI0=_int_kernel_isr
ivINT_SPI1=_int_kernel_isr
ivINT_SysTick=_int_kernel_isr
ivINT_TPM0=_int_kernel_isr
ivINT_TPM1=_int_kernel_isr
ivINT_TPM2=_int_kernel_isr
ivINT_TSI0=_int_kernel_isr
ivINT_UART0=_int_kernel_isr
ivINT_UART1=_int_kernel_isr
ivINT_UART2=_int_kernel_isr
ivINT_USB0=_int_kernel_isr
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
ADC0AsynchroClockAddr=null
ADC0AsynchroClockReg=null
ADC0BusClockAddr=null
ADC0BusClockReg=null
ADC0ClkSelAddr=null
ADC0ClkSelReg=null
ActiveConfigIdentifier=null
ActiveConfiguration=null
CPUDB_BUS_FREQ_HZ_MAX=null
CPUDB_CPU_MASTER=null
CPUDB_CW_MCU_ID=null
CPUDB_CW_MCU_NAME=null
CPUDB_LQFP80=null
CPUDB_MKL25Z128xxx4=null
CPUDB_MKL25Z4=null
CPUDB_PACKAGE=null
CPUDB_PLL_INPUT_FREQ_HZ_MAX=null
CPUDB_PLL_INPUT_FREQ_HZ_MIN=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=null
CPUDB_ProgramFlashBlockCount=null
CPUDB_ProgramFlashEraseUnitSize=null
CPUDB_ProgramFlashSize=null
CPUDB_ProgramFlashWriteUnitSize=null
CPUDB_SYSTEM_FREQ_HZ_MAX=null
CPU_DB_version=null
CPUendian=null
CPUfamily=null
CPUproducer=null
CPUrunSpeedModeNum=null
CPUsubFamily=null
CPUtype=null
CPUvariant=null
ClientDir_Binary=null
ClientDir_Code=null
ClientDir_PE=null
ClientDir_Project=null
CommentBrackets=null
Compiler=null
CompilerID=null
DirRel_Binary=null
DirRel_BinaryToEvents=null
DirRel_Code=null
DirRel_Docs=null
DirRel_EventToBinary=null
DirRel_Events=null
DirRel_ProjectSettings=null
EclipseProjectName=null
InterruptTableType=null
Language=null
Not_for_MPC512x=null
OnChipEEPROM=null
OnChipFLASH=null
OnChipRAM=null
OperatingSystemId=null
PE_DEBUG=null
PE_DEVELOPMENT=null
PE_ECLIPSE=null
PE_GENERATING=null
PE_G_4PEx_ToolChain_Linker_EntryPoint=null
PE_G_CPUCFG_AutoIncludeIO_Map=null
PE_G_CPUCFG_EntryPointFunctionName=null
PE_G_CPUCFG_EntryPointFunctionReturn=null
PE_G_CPUCFG_EntryPointFunctionReturnType=null
PE_G_CPUCFG_GenerateLinkerFile=null
PE_G_CPUCFG_GenerateMainModule=null
PE_G_CPUCFG_InitIntVectorTableSym=null
PE_G_CPUCFG_ManageInterruptVectorTable=null
PE_G_GenBitMask=null
PE_G_InternalMethodDescriptionNotFound=null
PE_G_MisraCnfBackParams_0=null
PE_G_MisraCnfParams_0=null
PE_G_MisraRuleList_0=null
PE_G_MisraStackIdx=null
PE_G_NO_SETREGMACROS=null
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=null
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=null
PE_G_RTOSAdap_regCompIndex=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventEnabled_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel0=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel1=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel2=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel3=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel4=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel5=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel6=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel7=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_SetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCaptureValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequencyReal=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectCaptureEdge=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectOutputAction=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDevice1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSof=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=null
PE_G_USE_UINTXX_T=null
PE_ProductVersion=null
PEversion=null
PEversionDecimal=null
ProcessorModule=null
ProcessorName=null
ProjectModule=null
ProjectName=null
ServerDir_PE=null
SetHighSpeedMode=null
SupportedCPUfamily=null
TimeStamp=null
Xtal_kHz=null
Xtal_kHz_real=null
ivINT_ADC0=null
ivINT_CMP0=null
ivINT_DAC0=null
ivINT_DMA0=null
ivINT_DMA1=null
ivINT_DMA2=null
ivINT_DMA3=null
ivINT_FTFA=null
ivINT_I2C0=null
ivINT_I2C1=null
ivINT_Initial_Program_Counter=null
ivINT_LLW=null
ivINT_LPTimer=null
ivINT_LVD_LVW=null
ivINT_MCG=null
ivINT_PIT=null
ivINT_PORTA=null
ivINT_PORTD=null
ivINT_RTC=null
ivINT_RTC_Seconds=null
ivINT_Reserved20=null
ivINT_Reserved39=null
ivINT_Reserved45=null
ivINT_SPI0=null
ivINT_SPI1=null
ivINT_SysTick=null
ivINT_TPM0=null
ivINT_TPM1=null
ivINT_TPM2=null
ivINT_TSI0=null
ivINT_UART0=null
ivINT_UART1=null
ivINT_UART2=null
ivINT_USB0=null
virtual_ADC0_TotalConversionPrescalerAddr=null
virtual_ADC0_TotalConversionPrescalerReg=null

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
COPClkSelect=[1]
COPClkSelect_Setting=[COPBusClock]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[SYSTEM_OSC]
EventModuleList=[Events|mqx_tasks]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[ERCLK]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[256]
MCG_FRDIV_Setting=[256]
MCG_PRDIV=[2]
MCG_PRDIV_Setting=[2]
MCG_VDIV=[24]
MCG_VDIV_Setting=[24]
ModuleList=[MQX1|SystemTimer1|usb_device|USB_LDD]
OUTDIV1Presc=[2]
OUTDIV1Presc_Setting=[2]
OUTDIV4Presc=[2]
OUTDIV4Presc_Setting=[2]
PE_G_4PEx_ToolChain_Asm_SearchUserPaths=["${ProjDirPath}/MQXLITE/include"|"${ProjDirPath}/MQXLITE/kernel"|"${ProjDirPath}/MQXLITE/psp/cortex_m"|"${ProjDirPath}/MQXLITE/psp/cortex_m/core/M0"|"${ProjDirPath}/MQXLITE/psp/cortex_m/compiler/gccarm"]
PE_G_4PEx_ToolChain_Compiler_SearchUserPaths=["${ProjDirPath}/MQXLITE/include"|"${ProjDirPath}/MQXLITE/kernel"|"${ProjDirPath}/MQXLITE/psp/cortex_m"|"${ProjDirPath}/MQXLITE/psp/cortex_m/core/M0"|"${ProjDirPath}/MQXLITE/psp/cortex_m/compiler/gccarm"]
PE_G_LCF_ADDITIONAL_CODE_SECTION_CONTENT=[/* MQX Lite component BEGIN */|* (KERNEL)|__VECTOR_TABLE_START = __vector_table;|. = ALIGN(0x4);|*(.rdata)|. = ALIGN(0x4);|*(.exception)|. = ALIGN(0x4);|__exception_table_start__ = .;|/* EXCEPTION */|__exception_table_end__ = .;|__sinit__ = .;|/* STATICINIT */|/* MQX Lite component END */]
PE_G_RTOSAdap_regCompInstanceAllocatedDevices=[SysTick|USB0]
PE_G_RTOSAdap_regCompInstanceDeviceBaseAddrs=[3758153744|1074208768]
PE_G_RTOSAdap_regCompInstanceIds=[0|1]
PE_G_RTOSAdap_regCompInstanceNames=[SystemTimer1|USB_LDD]
PE_G_RTOSAdap_regCompInstanceSharedComponentName=[SystemTimer1|USB_LDD]
PE_G_RTOSAdap_regCompInstanceTypes=[TimerUnit_LDD|USB_LDD]
PE_G_RTOSAdap_regCompInstance_SystemTimer1_events=[OnCounterRestart|OnChannel0|OnChannel1|OnChannel2|OnChannel3|OnChannel4|OnChannel5|OnChannel6|OnChannel7]
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectInputFrequency|GetInputFrequencyReal|GetInputFrequency|SetPeriodTicks|GetPeriodTicks|ResetCounter|GetCounterValue|SetOffsetTicks|GetOffsetTicks|GetCaptureValue|SelectOutputAction|SelectCaptureEdge|ConnectPin|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_USB_LDD_events=[OnDeviceReset|OnDeviceSpeedDetect|OnDeviceSuspend|OnDeviceResume|OnDeviceSetupPacket|OnDeviceSof|OnDeviceError|OnDevice1msTimer|OnHostDeviceDeattach|OnHostResetRecovery|OnHostResumeRecovery|OnHostError|OnHost1msTimer|OnOtgDevice|OnOtgHost|OnOtgStateChange|OnSignalChange]
PE_G_RTOSAdap_regCompInstance_USB_LDD_methods=[Init|Deinit|SetEventMask|GetEventMask|Enable|Disable|DeviceGetUsbStatus|DeviceSetUsbStatus|DeviceSetAddress|DeviceAssertResume|DeviceInitEndpoint|DeviceDeinitEndpoint|DeviceStallEndpoint|DeviceUnstallEndpoint|DeviceReadSetupData|DeviceSendData|DeviceRecvData|DeviceGetTransferStatus|DeviceCancelTransfer|HostGetPortState|HostSetPortState|HostGetFrameNumber|HostGetMicroFrameNumber|HostOpenPipe|HostClosePipe|HostSendSetup|HostSendData|HostRecvData|HostGetTransferStatus|HostCancelTransfer|OtgRegisterDevice|OtgRegisterHost|OtgCmd|SetSignal|ConnectPin|Main|SetOperationMode|GetDriverState]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLKDIV2]
SPI0_BaudRatePrescDiv=[1]
SPI0_BaudRatePrescDiv_Setting=[1]
SPI1_BaudRatePrescDiv=[1]
SPI1_BaudRatePrescDiv_Setting=[1]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
TPMClk=[1]
TPMClk_Setting=[PLLFLLSelDistr]
UART0_ClkSel=[1]
UART0_ClkSel_Setting=[PLLFLLSelDistr]
UART0_Divider=[4]
UART0_Divider_Setting=[4]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 

