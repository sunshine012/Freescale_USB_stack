=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "usb_msc"   (component USB_MSD_CLASS)
   - usb_msc_USB_Service_Bulk_In -The funtion is callback function of DIC Bulk In Endpoint
   - usb_msc_USB_Service_Bulk_Out -The function is callback function of DIC Bulk Out Endpoint
   - usb_msc_USB_Class_MSC_Event -The funtion initializes MSC endpoints
   - usb_msc_USB_BYTE_SWAP4 -SWAP four consecutive bytes to correct the endianness of data received
   - usb_msc_USB_memzero -To clear the buffer
   - usb_msc_USB_memcopy -To copy data from one memory location to another
   - usb_msc_USB_Class_MSC_Init -This function initializes the MSC Class layer and layers it is dependednt on
   - usb_msc_USB_Class_MSC_DeInit -The funtion de-initializes the Device and Controller layer
   - usb_msc_USB_MSC_LBA_Transfer -This fucntion is used to send data in Local Block Address format
   - usb_msc_USB_Class_MSC_Send_Data -This fucntion is used by Application to send data through MSC class
   - usb_msc_USB_MSC_SCSI_Init -The funtion initializes the SCSI parameters and callbacks
   - usb_msc_msc_request_sense_command -command instructs the Device to transfer sense data to host computer
   - usb_msc_msc_inquiry_command -It requests that information regarding parameters of the Device be sent to the Host Computer
   - usb_msc_msc_read_command -command requests that device transfer data to the host computer
   - usb_msc_msc_write_command -command requests that the Device write the data transferred by the Host Computer to the medium.
   - usb_msc_msc_test_unit_ready_command -It provides a means to check if the device is ready
   - usb_msc_msc_verify_command -command requests that device verifies the data on medium
   - usb_msc_msc_mode_sense_command -command provides a means for a Device to report parameters to Host Computer.It is a 
                complementary command to the MODE SELECT command.
   - usb_msc_msc_mode_select_command -command provides a means for a Device to report parameters to Host Computer.It is a 
                complementary command to the MODE SENSE command.
   - usb_msc_msc_read_capacity_command -command provides a means for the host computer to request informationc regarding the 
                capacity of the installed medium of the device.
   - usb_msc_msc_read_format_capacity_command -command allows the host to request a list of the possible capacities that can be 
                formatted on the currently installed medium
   - usb_msc_msc_format_unit_command -host sends the FORMAT UNIT command to physically format a floppy disk according to 
                selected options
   - usb_msc_msc_prevent_allow_medium_removal -command tells the UFI device to enable or disable the removal of the medium in 
                the logical unit.
   - usb_msc_msc_start_stop_unit_command -command instructs device to enable or disable media access operations
   - usb_msc_msc_send_diagnostic_command -requests the device to perform self test
   - usb_msc_msc_unsupported_command -Responds appropriately to unsupported commands

Module "usb_device" (component Usb_Device)
   - usb_device_USB_Class_Init -The function initializes the Class Module
   - usb_device_USB_Class_DeInit -This function De-initializes the Class Module
   - usb_device_USB_Class_Send_Data -This function calls the device to send data upon receiving an IN token
   - usb_device_USB_Class_Periodic_Task -This funtion calls for periodic tasks
   - usb_device__usb_device_init -This function initializes the Device layer and the Controller layer of the S08 USB stack. It 
                initialised the variables used for this layer and then calls the controller layer initialize function
   - usb_device__usb_device_deinit -This function de-initializes the Device layer and the Controller layer
   - usb_device__usb_device_init_endpoint -This function initializes an endpoint the Device layer and the Controller layer in 
                the S08 USB stack. It validate whether all endpoints have already been initialized or not and then calls the 
                controller layer endpoint initialize function
   - usb_device__usb_device_deinit_endpoint -This function deinitializes an endpoint the Device layer and the Controller layer 
                in the S08 USB stack. It validate whether all endpoints have already been deinitialized or not and then calls 
                the controller layer endpoint deinitialize function
   - usb_device__usb_device_get_status -This function retrieves the endpoint as well USB component status which is stored by 
                calling USB_Device_Set_Status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_set_status -This function sets the endpoint as well USB component status which can be retrieved by 
                calling _usb_device_get_status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_register_service -This function registers a callback function from the application if it is called 
                not already registered so that the regitered callback function can be if the event of that type occurs
   - usb_device__usb_device_unregister_service -This function un registers a callback function which has been previously 
                registered by the application layer
   - usb_device_USB_Device_Call_Service -This function calls the registered service callback function of the application layer 
                based on the type of event received. This function is called from the DCI layer.
   - usb_device_USB_Framework_Init -This fuction registers the service on the control endpoint
   - usb_device_USB_Framework_DeInit -The funtion De-initializes the Class Module
   - usb_device_USB_Framework_Reset -This function is used to reset the framework module
   - usb_device_USB_DCI_Bus_Reset_Handler -This functions is called when USB Bus Reset event is received on USB Bus.This 
                function clears all the errors conditions and reinit Global data structures. Also resets USB device controller.
   - usb_device_USB_DCI_Init -This function initializes the Controller layer
   - usb_device_USB_DCI_DeInit -This function de-initializes the Controller layer
   - usb_device_USB_DCI_Init_EndPoint -This function initializes an endpoint and the Bufffer Descriptor Table entry associated 
                with it. Incase the input parameters are invalid it will return USBERR_EP_INIT_FAILED error.
   - usb_device_USB_DCI_Deinit_EndPoint -This function un-intializes the endpoint by clearing the corresponding endpoint 
                control register and then clearing the bdt elem.
   - usb_device_USB_DCI_Cancel_Transfer -This function cancels any pending Transfers which ahve not been sent
   - usb_device_USB_DCI_Stall_EndPoint -This function stalls the endpoint by setting Endpoint BDT
   - usb_device_USB_DCI_Unstall_EndPoint -This function unstalls the endpoint by clearing Endpoint Control Register and BDT
   - usb_device_USB_DCI_Get_Setup_Data -This function copies Setup Packet from USB RAM to application buffer
   - usb_device_USB_DCI_Get_Transfer_Status -This function retrieves the transfer status of the endpoint by checking the BDT as 
                well as the endpoint control register
   - usb_device_USB_DCI_Recv_Data -This function retrieves data received data on a RECV endpoint by copying it from USB RAM to 
                application buffer
   - usb_device_USB_DCI_Send_Data -This function configures Controller to send data on an SEND endpoint by setting the BDT to 
                send data.
   - usb_device_USB_DCI_Assert_Resume -This function starts RESUME signalling and then stops it after some delay. In this delay 
                make sure that COP is reset.
   - usb_device_USB_DCI_Set_Address -This function configures Controller to send data on an SEND endpoint
   - usb_device_USB_DCI_OnDeviceSpeedDetect -This function is called after the device detects bus speed
   - usb_device_USB_DCI_OnDeviceSuspend -This function is called after the suspend condition is met
   - usb_device_USB_DCI_OnDeviceResume -This function is called after the resume signaling is done
   - usb_device_USB_DCI_OnDeviceSetupPacket -This function called after the setup packet is received into the internal buffer
   - usb_device_USB_DCI_OnDeviceError -This function is called after the Error is detected
   - usb_device_Clear_Mem -This function clears memory starting from start_addr till count bytes
   - usb_device_USB_Desc_Get_Descriptor -The function returns the correponding descriptor
   - usb_device_USB_Desc_Get_Interface -The function returns the alternate interface
   - usb_device_USB_Desc_Set_Interface -The function sets the alternate interface
   - usb_device_USB_Desc_Valid_Configation -This function checks whether the configuration is valid or not
   - usb_device_USB_Desc_Valid_Interface -This function checks whether the interface is valid or not
   - usb_device_USB_Desc_Remote_Wakeup -This function returns remote wakeup is supported or not
   - usb_device_USB_Desc_Get_Endpoints -This function returns the information about all the non control endpoints implemented

Module "Cpu"       (component MCF51JF128_64)

===================================================================================
