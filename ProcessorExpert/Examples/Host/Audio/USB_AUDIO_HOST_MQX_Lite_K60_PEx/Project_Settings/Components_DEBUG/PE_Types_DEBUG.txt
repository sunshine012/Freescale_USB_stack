Debug info from  (Device - PE_Types)  (Module - PE_Types)


{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\PE_TypesAbstract.inc
Doc_Misra_Rule_1=1.1
Doc_Misra_Rule_10=8.10
Doc_Misra_Rule_10_Description=All declarations and definitions of objects or function at file scope shall have internal linkage unless external linkage is required.
Doc_Misra_Rule_10_Lint=Info 765: external 'function' could be made static [MISRA 2004 Rule 8.10]
Doc_Misra_Rule_10_Reason=Device Initialization - ISR declaration is subject of various modifications by the user and may or may not be copied to another module - static is not used.
Doc_Misra_Rule_10_Type=Required
Doc_Misra_Rule_11=10.1
Doc_Misra_Rule_11_Description=The value of an expression of integer type shall not be implicitly converted to a different underlying type.
Doc_Misra_Rule_11_Lint=Note 960: Violates MISRA 2004 Required Rule 10.1, Implicit conversion of integer to smaller type
Doc_Misra_Rule_11_Reason=
Doc_Misra_Rule_11_Type=Required
Doc_Misra_Rule_12=11.3
Doc_Misra_Rule_12_Description=A cast should not be performed between a pointer type and an integral type.
Doc_Misra_Rule_12_Lint=Note 923: cast from 'integer type' to pointer [Encompasses MISRA 2004 Rules 11.1 and 11.3], [MISRA 2004 Rule 11.3]
Doc_Misra_Rule_12_Reason=IO map is based on structures and typecasting from a peripheral base address (integer constant) to a pointer type is used to get a pointer to the given peripheral structure used to access a peripheral registers.
Doc_Misra_Rule_12_Type=Advisory
Doc_Misra_Rule_13=11.4
Doc_Misra_Rule_13_Description=A cast should be not be performed between a pointer to object type and different pointer to object type
Doc_Misra_Rule_13_Lint=Note 929: cast from pointer to pointer [MISRA 2004 Rule 11.4]
Doc_Misra_Rule_13_Reason=See detailed description for particular component
Doc_Misra_Rule_13_Type=Advisory
Doc_Misra_Rule_14=12.1
Doc_Misra_Rule_14_Description=Limited dependence should be placed on C's operator precedence rules in expressions.
Doc_Misra_Rule_14_Lint=Note 961: Violates MISRA 2004 Advisory Rule 12.1, dependence placed on C's operator precedence; operators: ',' and ','
Doc_Misra_Rule_14_Reason=
Doc_Misra_Rule_14_Type=Advisory
Doc_Misra_Rule_15=12.8
Doc_Misra_Rule_15_Description=The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand.
Doc_Misra_Rule_15_Lint=Warning 572: Excessive shift value (precision 2 shifted right by 8) [MISRA 2004 Rule 12.8]
Doc_Misra_Rule_15_Reason=
Doc_Misra_Rule_15_Type=Required
Doc_Misra_Rule_16=12.10
Doc_Misra_Rule_16_Description=The comma operator shall not be used.
Doc_Misra_Rule_16_Lint=Note 960: Violates MISRA 2004 Required Rule 12.10, comma operator used
Doc_Misra_Rule_16_Reason=Comma operator is used in PDD macros.
Doc_Misra_Rule_16_Type=Required
Doc_Misra_Rule_17=12.11
Doc_Misra_Rule_17_Description=Evaluation of constant unsigned integer expressions should not lead to wrap-around.
Doc_Misra_Rule_17_Lint=Warning 648: Overflow in computing constant for operation: 'unsigned shift left' [MISRA 2004 Rule 12.11]
Doc_Misra_Rule_17_Reason=
Doc_Misra_Rule_17_Type=Advisory
Doc_Misra_Rule_18=13.7
Doc_Misra_Rule_18_Description=Boolean operations whose results are invariant shall not be permitted.
Doc_Misra_Rule_18_Lint=Warning 506: Constant value Boolean [MISRA 2004 Rules 13.7 and 14.1]
Doc_Misra_Rule_18_Reason=PDD macros define constants that can be passed as parameters to these macros.
Doc_Misra_Rule_18_Type=Required
Doc_Misra_Rule_19=14.2
Doc_Misra_Rule_19_Description=All non-null statements shall either: <br/>a) have at least one side effect however executed, <br/>or b) cause control flow to change.
Doc_Misra_Rule_19_Lint=Warning 522: Highest operation, operator ',', lacks side-effects
Doc_Misra_Rule_19_Reason=Some PDD macros have two commas in the macro implementation.
Doc_Misra_Rule_19_Type=Required
Doc_Misra_Rule_1_Description=All code shall conform to ISO 9899-1990 (C-code guideline)
Doc_Misra_Rule_1_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_1_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_1_Type=Required
Doc_Misra_Rule_2=1.4
Doc_Misra_Rule_20=14.7
Doc_Misra_Rule_20_Description=A function shall have a single point of exit at the end of the function.
Doc_Misra_Rule_20_Lint=Note 904: Return statement before end of function [MISRA 2004 Rule 14.7]
Doc_Misra_Rule_20_Reason=Use of multiple return statements simplifies the code logic.
Doc_Misra_Rule_20_Type=Required
Doc_Misra_Rule_21=18.4
Doc_Misra_Rule_21_Description=Unions shall not be used.
Doc_Misra_Rule_21_Lint=Note 960: Violates MISRA 2004 Required Rule 18.4, unions shall not be used
Doc_Misra_Rule_21_Reason=Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.
Doc_Misra_Rule_21_Type=Required
Doc_Misra_Rule_22=19.13
Doc_Misra_Rule_22_Description=The # and ## preprocessor operators should not be used.
Doc_Misra_Rule_22_Lint=Note 961: Violates MISRA 2004 Advisory Rule 19.13, '#/##' operator used
Doc_Misra_Rule_22_Reason=Preprocessor operators are used to convert bit name to bit mask in macros for accessing peripheral registers.
Doc_Misra_Rule_22_Type=Advisory
Doc_Misra_Rule_2_Description=The compiler/linker shall be checked to ensure that 31 character significance and case sensitivity are supported for external identifiers.
Doc_Misra_Rule_2_Lint=Note Warning 621: Identifier clash [MISRA 2004 Rules 1.2, 1.4 and 5.1]
Doc_Misra_Rule_2_Reason=IO map defines register access constants. The constants' names contain peripheral name, register name, bit name and suffix _MASK/_SHIFT.
Doc_Misra_Rule_2_Type=Required
Doc_Misra_Rule_3=2.1
Doc_Misra_Rule_3_Description=Assembly language shall be encapsulated and isolated.
Doc_Misra_Rule_3_Lint=Note 950: Non-ANSI reserved word or construct [MISRA 2004 Rules 1.1 and 2.2]
Doc_Misra_Rule_3_Reason=Non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt, CONVERT_TO_PAGED (RS08 only).
Doc_Misra_Rule_3_Type=Required
Doc_Misra_Rule_4=3.1
Doc_Misra_Rule_4_Description=All usage of implementation-defined behavior shall be documented.
Doc_Misra_Rule_4_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_4_Reason=Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:
Doc_Misra_Rule_4_Type=Required
Doc_Misra_Rule_5=3.2
Doc_Misra_Rule_5_Description=The character set and the corresponding encoding shall be documented.
Doc_Misra_Rule_5_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_5_Reason=Basic character set (see ISO 9899) is used in execution character set. Execution character set uses ASCII encoding (possible codes 0-255). Exception to basic character set: Term component uses NULL(0x00), CR (0x0D), LF(0x0A).
Doc_Misra_Rule_5_Type=Required
Doc_Misra_Rule_6=3.3
Doc_Misra_Rule_6_Description=The implementation of integer division in the chosen compiler should be determined, documented and taken into account.
Doc_Misra_Rule_6_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_6_Reason=The way a Compiler implements division and modulo for negative operands is determined by the hardware implementation of the target's division instructions. See documentation of CodeWarrior S12(X) Build tools for more information.
Doc_Misra_Rule_6_Type=Advisory
Doc_Misra_Rule_7=3.4
Doc_Misra_Rule_7_Description=All uses of the #pragma directives shall be documented and explained.
Doc_Misra_Rule_7_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_7_Reason=Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.
Doc_Misra_Rule_7_Type=Required
Doc_Misra_Rule_8=3.6
Doc_Misra_Rule_8_Description=All libraries used in production code shall be written to comply with the provision of this document and shall have been subject to appropriate validation.
Doc_Misra_Rule_8_Lint=MISRA Compliancy Review (part of formal technical review)
Doc_Misra_Rule_8_Reason=Only libraries included in CodeWarrior development studio are used in the generated source code.
Doc_Misra_Rule_8_Type=Required
Doc_Misra_Rule_9=6.3
Doc_Misra_Rule_9_Description=Typedef that indicates size and signedness should be used in place of basic types.
Doc_Misra_Rule_9_Lint=Info 970: Use of modifier or type 'int' outside of a typedef [MISRA Rule 6.3]
Doc_Misra_Rule_9_Reason=The type of the function is defined by tool set. ProcessorExpert definition must comply..
Doc_Misra_Rule_9_Type=Advisory
DriverAuthor=Marek Vinkler
DriverDate=29.08.2006
DriverVersion=01.01
EndOfInterface=
Location_x=PE_Types.h
Settings=Common\PE_TypesSettings.inc
Doc_Misra_Rule_10_Location=[Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c|Cpu|Vectors.c]
Doc_Misra_Rule_11_Location=[PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD|PE_Types.h|SDHC_LDD]
Doc_Misra_Rule_11_Location_Reason=[Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.|Call of the library function __set_FAULTMASK(). The code violates this rule for IAR compiler only.|Cannot shift by a value resulting from a complex expression.]
Doc_Misra_Rule_12_Location=[IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h]
Doc_Misra_Rule_13_Location=[Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD|Vectors.c|Serial_LDD|SPIMaster_LDD|SPISlave_LDD|SSI_LDD|USB_LDD]
Doc_Misra_Rule_13_Location_Reason=[Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.|Need to explicitly cast pointers to the general ISR for Interrupt vector table|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointer to void type and pointer to uint8_t/uint16_t type is used in ISR (transmitting/receiving characters).|Conversion between pointers is used in StartTransaction, HostQueueTransfer and Init methods.]
Doc_Misra_Rule_14_Location=[SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD|SDHC_LDD|Ethernet_LDD]
Doc_Misra_Rule_14_Location_Reason=[Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.|Comma operator separates expressions in PDD macros.]
Doc_Misra_Rule_15_Location=[Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD|Ethernet_LDD|TimerUnit_LDD|Serial_LDD]
Doc_Misra_Rule_15_Location_Reason=[Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.|Macro for endianness conversion cannot be used on constants.|One of predefined constants for macro LPTMR_PDD_SetDivider has value 1.|PDD macros use shift operations that can cause MISRA violations when a constant with value less than 256 is passed as an argument.]
Doc_Misra_Rule_16_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_17_Location=[Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD|Ethernet_LDD]
Doc_Misra_Rule_17_Location_Reason=[Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.|Macro for endianness conversion cannot be used on constants.]
Doc_Misra_Rule_18_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_19_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_1_Location=[PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD|PE_Types.h|Cpu|Vectors.c|FLASH_LDD]
Doc_Misra_Rule_1_Location_Reason=[The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_20_Location=[Global|Global|Global|Global|Global|Global|Global]
Doc_Misra_Rule_21_Location=[Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h|Global|IO_Map.h]
Doc_Misra_Rule_21_Location_Reason=[Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to efficiently swap bytes in a 16-bit word or 32-bit long word, to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.|Unions are used to allow access to single memory location using multiple register names, or to allow simultaneous 32-bit, 16-bit or 8-bit access to single memory location.]
Doc_Misra_Rule_22_Location=[PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h|PE_Types.h]
Doc_Misra_Rule_22_Location_Reason=[Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.|Used to convert bit name to bit mask in macros accessing registers.]
Doc_Misra_Rule_2_Location=[IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h|IO_Map.h]
Doc_Misra_Rule_3_Location=[PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c|PE_Types.h|Cpu|Vectors.c]
Doc_Misra_Rule_3_Location_Reason=[The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.|The file contains ASM language, but it is isolated in C macros.|The file contains ASM language, but it is isolated in C macros.|The component contains one of non-ANSI C reserved word or construct used as specific language extensions: @, asm, __asm, near, __near, far, interrupt, __interrupt.]
Doc_Misra_Rule_4_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_4_Location_Reason=[Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.|Follows the list of implementation dependent behavior used in Processor Expert. See documentation of CodeWarrior MCU Build tools for more information on topics not specified below:|Program overloads void __init_hardware(void) function from the standard startup to provide initialization of clocks and external bus early after reset, see <a href="ResetScenario.html">Reset Scenario</a>.|Program is finished at the end of main function in the infinite loop.|Execution character set and corresponding values are documented in rule 3.2 in this table.|Volatile declarations are used to access peripheral registers (memory mapped).|Pragma directives are used and commented in the source code. See also documented rule 3.4 in this table.]
Doc_Misra_Rule_5_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_6_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_7_Location=[PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info|PE_Info]
Doc_Misra_Rule_7_Location_Reason=[Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.|Some components use pragma directive to determine the memory segment, where code and/or data will be used (see below). All other uses of #pragma directives are commented in the generated source code.]
Doc_Misra_Rule_8_Location=[CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD|CAU_LDD]
Doc_Misra_Rule_8_Location_Reason=[CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.|CAU component uses an external CAU library that is not MISRA compliant. CAU component's code itself is MISRA compliant.]
Doc_Misra_Rule_9_Location=[CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c|CPU|Main.c]
PE_MisraErrorCodes=[950]
revAuth=[LH|]
revCmnt_0=[Type char_t definition added.|Support of C++.]
revDate=[17.09.2012|14.01.2009]
revLvl=[3|0]
revVer=[01.01|01.00]
revVrf=[PE|]

 LOCAL SYMBOLS (alphabet order)
-------------------------------
DeviceModule=PE_Types
DeviceName=PE_Types
DeviceType=PE_Types
EventModules=[mqx_tasks|Events]
ModuleName=PE_Types

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ADC1AsynchroClockAddr=1074507784
ADC1AsynchroClockReg=ADC1_CFG1
ADC1BusClockAddr=1074507784
ADC1BusClockReg=ADC1_CFG1
ADC1ClkSelAddr=1074507784
ADC1ClkSelReg=ADC1_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_CPU_MASTER=MK60DZ10
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MK60DN512Zxxx10
CPUDB_DataFlashBlockCount=0
CPUDB_DataFlashEraseUnitSize=2048
CPUDB_DataFlashSize=0
CPUDB_DataFlashStartAddress=268435456
CPUDB_DataFlashWriteUnitSize=4
CPUDB_FlexRamSize=0
CPUDB_FlexRamStartAddress=335544320
CPUDB_LQFP144=-1
CPUDB_MK60DN512Zxxx10=-1
CPUDB_MK60DZ10=-1
CPUDB_PACKAGE=LQFP144
CPUDB_ProgramFlashBlockCount=2
CPUDB_ProgramFlashEraseUnitSize=2048
CPUDB_ProgramFlashSize=524288
CPUDB_ProgramFlashWriteUnitSize=4
CPU_DB_version=3.00.001
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MK60
CPUtype=MK60N512LQ100
CPUvariant=MK60DN512ZVLQ10
ClientDir_Binary=E:\L2K_PEx_MQX_Lite\Test\2012_12_26_package\Examples\K60\MQX_Lite\USB_AUDIO_HOST_MQX_Lite_K60_PEx\Sources\
ClientDir_Code=E:\L2K_PEx_MQX_Lite\Test\2012_12_26_package\Examples\K60\MQX_Lite\USB_AUDIO_HOST_MQX_Lite_K60_PEx\Generated_Code\
ClientDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
ClientDir_Project=E:\L2K_PEx_MQX_Lite\Test\2012_12_26_package\Examples\K60\MQX_Lite\USB_AUDIO_HOST_MQX_Lite_K60_PEx\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
EclipseProjectName=USB_AUDIO_HOST_MQX_Lite_K60_PEx
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
OnChipEEPROM=0
OnChipFLASH=524288
OnChipRAM=131072
OperatingSystemId=MQXLite
PE_DEBUG=
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_4PEx_ToolChain_Linker_EntryPoint=__boot
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void __attribute__ ((constructor))
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_CRI_CPUINIT_set0_NVICIP62=255
PE_G_CRI_CPUINIT_set0_PORTC_PCR1=16777984
PE_G_CRI_CPUINIT_set1_NVICIP62=0
PE_G_CRI_CPUINIT_set1_PORTC_PCR1=1024
PE_G_CRI_GPIO_LDD_INIT_GPIO1_set0_PORTA_PCR19=16811520
PE_G_CRI_GPIO_LDD_INIT_GPIO1_set1_PORTA_PCR19=256
PE_G_CRI_GPIO_LDD_INIT_GPIO2_set0_PORTE_PCR26=16811520
PE_G_CRI_GPIO_LDD_INIT_GPIO2_set1_PORTE_PCR26=256
PE_G_EBGN_FTM0BeanName=PWM
PE_G_GenBitMask=
PE_G_InternalMethodDescriptionNotFound=
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=_int_disable
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=_int_enable
PE_G_RTOSAdap_regCompIndex=6
PE_G_RTOSAdap_regCompInstance_GPIO1_eventEnabled_OnPortEvent=
PE_G_RTOSAdap_regCompInstance_GPIO1_eventPtr_OnFieldEvent=(void (*)(LDD_TUserData *UserDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_GPIO1_eventPtr_OnPortEvent=(void (*)(LDD_TUserData *UserDataPtr))&GPIO1_GPIO1_OnPortEvent
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ClearFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ConnectPin=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_GetFieldValue=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldInputDirection=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldOutputDirection=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldValue=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ToggleFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ClearFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask))&GPIO1_ClearFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ClearPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))&GPIO1_ConnectPin
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&GPIO1_Deinit
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldEventStatus=(GPIO1_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldOutputValue=(GPIO1_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldValue=(GPIO1_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&GPIO1_GetFieldValue
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortEventStatus=(GPIO1_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortOutputValue=(GPIO1_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortValue=(GPIO1_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&GPIO1_Init
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask))&GPIO1_SetFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name, GPIO1_TFieldValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&GPIO1_SetFieldInputDirection
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Value))&GPIO1_SetFieldOutputDirection
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Value))&GPIO1_SetFieldValue
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask, GPIO1_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ToggleFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask))&GPIO1_ToggleFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_TogglePortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO2_eventEnabled_OnPortEvent=
PE_G_RTOSAdap_regCompInstance_GPIO2_eventPtr_OnFieldEvent=(void (*)(LDD_TUserData *UserDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_GPIO2_eventPtr_OnPortEvent=(void (*)(LDD_TUserData *UserDataPtr))&GPIO2_GPIO2_OnPortEvent
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ClearFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ConnectPin=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_GetFieldValue=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldInputDirection=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldOutputDirection=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldValue=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ToggleFieldBits=
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ClearFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO2_TFieldValue Mask))&GPIO2_ClearFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ClearPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))&GPIO2_ConnectPin
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&GPIO2_Deinit
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldEventStatus=(GPIO2_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldOutputValue=(GPIO2_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldValue=(GPIO2_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&GPIO2_GetFieldValue
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortEventStatus=(GPIO2_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortOutputValue=(GPIO2_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortValue=(GPIO2_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&GPIO2_Init
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO2_TFieldValue Mask))&GPIO2_SetFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name, GPIO2_TFieldValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&GPIO2_SetFieldInputDirection
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO2_TFieldValue Value))&GPIO2_SetFieldOutputDirection
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO2_TFieldValue Value))&GPIO2_SetFieldValue
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask, GPIO2_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ToggleFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO2_TFieldValue Mask))&GPIO2_ToggleFieldBits
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_TogglePortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, GPIO2_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBlockReceived=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBlockSent=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBreak=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnError=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnIdle=(void (*)(LDD_TUserData RTOSDeviceData))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnRxActiveEdge=(void (*)(LDD_TUserData RTOSDeviceData))0
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnTxComplete=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_IO1_methodEnabled_Main=
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_CancelBlockReception=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_CancelBlockTransmission=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ClearRTS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ClearStats=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetBreak=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetCTS=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetDataWidth=(LDD_SERIAL_TDataWidth (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetError=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TError *ErrorPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetLoopMode=(LDD_SERIAL_TLoopMode (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetParity=(LDD_SERIAL_TParity (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetReceivedDataNum=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetSelectedBaudRate=(LDD_SERIAL_TBaudMode (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetSentDataNum=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetStats=(LDD_SERIAL_TStats (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetStopBitLength=(LDD_SERIAL_TStopBitLen (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetTxCompleteStatus=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&IO1_Init
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))&IO1_Main
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ReceiveBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SelectBaudRate=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TBaudMode Mode))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SendBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SendBreak=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetDataWidth=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TDataWidth DataWidth))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetLoopMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TLoopMode LoopMode))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetParity=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TParity Parity))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetRTS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetStopBitLength=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TStopBitLen StopBitLen))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnRxOff=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnRxOn=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnTxOff=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnTxOn=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventEnabled_OnCounterRestart=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel0=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel1=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel2=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel3=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel4=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel5=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel6=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel7=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnCounterRestart=(void (*)(LDD_TUserData *UserDataPtr))&SystemTimer1_SystemTimer1_OnCounterRestart
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetCounterValue=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetInputFrequency=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetPeriodTicks=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_ResetCounter=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_SetPeriodTicks=
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_Deinit
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_Enable
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCaptureValue=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType *ValuePtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCounterValue=(SystemTimer1_TValueType (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_GetCounterValue
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequency=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_GetInputFrequency
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequencyReal=(LDD_TimerUnit_Tfloat (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr))&SystemTimer1_GetPeriodTicks
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&SystemTimer1_Init
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ResetCounter=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&SystemTimer1_ResetCounter
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectCaptureEdge=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TEdge Edge))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectInputFrequency=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TClockList InputFrequency))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectOutputAction=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TOutAction CompareAction, LDD_TimerUnit_TOutAction CounterAction))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, SystemTimer1_TValueType Ticks))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType Ticks))&SystemTimer1_SetPeriodTicks
PE_G_RTOSAdap_regCompInstance_TU1_eventEnabled_OnCounterRestart=
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel0=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel1=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel2=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel3=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel4=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel5=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel6=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel7=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnCounterRestart=(void (*)(LDD_TUserData *UserDataPtr))&TU1_TU1_OnCounterRestart
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&TU1_Deinit
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TU1_Disable
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TU1_Enable
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCaptureValue=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *ValuePtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCounterValue=(TU1_TValueType (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequency=(uint32_t (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequencyReal=(LDD_TimerUnit_Tfloat (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TValueType *TicksPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&TU1_Init
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ResetCounter=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectCaptureEdge=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TEdge Edge))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectInputFrequency=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TClockList InputFrequency))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectOutputAction=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TOutAction CompareAction, LDD_TimerUnit_TOutAction CounterAction))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOffsetTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType Ticks))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetPeriodTicks=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TValueType Ticks))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_eventEnabled_OnInterrupt=
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_eventPtr_OnInterrupt=(void (*)(LDD_TUserData *UserDataPtr))&TimerIntLdd1_TimerIntLdd1_OnInterrupt
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&TimerIntLdd1_Deinit
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TimerIntLdd1_Disable
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&TimerIntLdd1_Enable
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetEventStatus=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&TimerIntLdd1_Init
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SelectPeriod=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, TU1_TClockList Period))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencyHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencyMHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencykHz=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Frequency))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodMS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodReal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TimerUnit_Tfloat Time))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodSec=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodUS=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Time))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=(void (*)(LDD_TUserData *UserDataPtr, uint8_t EpNum))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=(void (*)(LDD_TUserData *UserDataPtr, uint16_t FrameNumber))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostDeviceDeattach
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))&USB_LDD_USB_LDD_OnHostError
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))&USB_LDD_USB_LDD_OnHostResetRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostResumeRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_Otg_TState NewState))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetDriverState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetOperationMode=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceDataPtr *DeviceData, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Deinit
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Address))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Disable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Enable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetDriverState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeHandlePtr))&USB_LDD_HostCancelTransfer
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr))&USB_LDD_HostClosePipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=(uint8_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetMicroFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=(LDD_USB_Host_TState (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=(LDD_USB_TTransferState (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TTransferHandle *TransferHandlePtr))&USB_LDD_HostGetTransferStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeInitParamsPtr, LDD_USB_Host_TPipeHandle **PipeHandlePtr))&USB_LDD_HostOpenPipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostRecvData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendSetup
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPortControlCmd Cmd))&USB_LDD_HostSetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=(LDD_TDeviceData * (*)(LDD_TUserData *UserDataPtr))&USB_LDD_Init
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))&USB_LDD_SetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))&USB_LDD_SetOperationMode
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_USE_UINTXX_T=
PE_ProductVersion=10.0
PEversion=05.03
PEversionDecimal=1283
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectModule=ProcessorExpert
ProjectName=ProcessorExpert
ServerDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2012-12-26, 17:15, # CodeGen: 43
Xtal_kHz=4000
Xtal_kHz_real=4000
ivINT_ADC0=_int_kernel_isr
ivINT_ADC1=_int_kernel_isr
ivINT_CAN0_Bus_Off=_int_kernel_isr
ivINT_CAN0_Error=_int_kernel_isr
ivINT_CAN0_ORed_Message_buffer=_int_kernel_isr
ivINT_CAN0_Rx_Warning=_int_kernel_isr
ivINT_CAN0_Tx_Warning=_int_kernel_isr
ivINT_CAN0_Wake_Up=_int_kernel_isr
ivINT_CAN1_Bus_Off=_int_kernel_isr
ivINT_CAN1_Error=_int_kernel_isr
ivINT_CAN1_ORed_Message_buffer=_int_kernel_isr
ivINT_CAN1_Rx_Warning=_int_kernel_isr
ivINT_CAN1_Tx_Warning=_int_kernel_isr
ivINT_CAN1_Wake_Up=_int_kernel_isr
ivINT_CMP0=_int_kernel_isr
ivINT_CMP1=_int_kernel_isr
ivINT_CMP2=_int_kernel_isr
ivINT_CMT=_int_kernel_isr
ivINT_DAC0=_int_kernel_isr
ivINT_DAC1=_int_kernel_isr
ivINT_DMA0=_int_kernel_isr
ivINT_DMA1=_int_kernel_isr
ivINT_DMA10=_int_kernel_isr
ivINT_DMA11=_int_kernel_isr
ivINT_DMA12=_int_kernel_isr
ivINT_DMA13=_int_kernel_isr
ivINT_DMA14=_int_kernel_isr
ivINT_DMA15=_int_kernel_isr
ivINT_DMA2=_int_kernel_isr
ivINT_DMA3=_int_kernel_isr
ivINT_DMA4=_int_kernel_isr
ivINT_DMA5=_int_kernel_isr
ivINT_DMA6=_int_kernel_isr
ivINT_DMA7=_int_kernel_isr
ivINT_DMA8=_int_kernel_isr
ivINT_DMA9=_int_kernel_isr
ivINT_DMA_Error=_int_kernel_isr
ivINT_ENET_1588_Timer=_int_kernel_isr
ivINT_ENET_Error=_int_kernel_isr
ivINT_ENET_Receive=_int_kernel_isr
ivINT_ENET_Transmit=_int_kernel_isr
ivINT_FTFL=_int_kernel_isr
ivINT_FTM0=_int_kernel_isr
ivINT_FTM1=_int_kernel_isr
ivINT_FTM2=_int_kernel_isr
ivINT_I2C0=_int_kernel_isr
ivINT_I2C1=_int_kernel_isr
ivINT_I2S0=_int_kernel_isr
ivINT_Initial_Program_Counter=__boot
ivINT_LLW=_int_kernel_isr
ivINT_LPTimer=_int_kernel_isr
ivINT_LVD_LVW=_int_kernel_isr
ivINT_MCG=_int_kernel_isr
ivINT_MCM=_int_kernel_isr
ivINT_PDB0=_int_kernel_isr
ivINT_PIT0=_int_kernel_isr
ivINT_PIT1=_int_kernel_isr
ivINT_PIT2=_int_kernel_isr
ivINT_PIT3=_int_kernel_isr
ivINT_PORTA=_int_kernel_isr
ivINT_PORTB=_int_kernel_isr
ivINT_PORTC=_int_kernel_isr
ivINT_PORTD=_int_kernel_isr
ivINT_PORTE=_int_kernel_isr
ivINT_PendableSrvReq=_pend_svc
ivINT_RNG=_int_kernel_isr
ivINT_RTC=_int_kernel_isr
ivINT_Read_Collision=_int_kernel_isr
ivINT_Reserved102=_int_kernel_isr
ivINT_Reserved108=_int_kernel_isr
ivINT_Reserved109=_int_kernel_isr
ivINT_Reserved110=_int_kernel_isr
ivINT_Reserved111=_int_kernel_isr
ivINT_Reserved112=_int_kernel_isr
ivINT_Reserved113=_int_kernel_isr
ivINT_Reserved114=_int_kernel_isr
ivINT_Reserved115=_int_kernel_isr
ivINT_Reserved116=_int_kernel_isr
ivINT_Reserved117=_int_kernel_isr
ivINT_Reserved118=_int_kernel_isr
ivINT_Reserved119=_int_kernel_isr
ivINT_Reserved51=_int_kernel_isr
ivINT_Reserved52=_int_kernel_isr
ivINT_Reserved59=_int_kernel_isr
ivINT_Reserved60=_int_kernel_isr
ivINT_Reserved83=_int_kernel_isr
ivINT_SDHC=_int_kernel_isr
ivINT_SPI0=_int_kernel_isr
ivINT_SPI1=_int_kernel_isr
ivINT_SPI2=_int_kernel_isr
ivINT_SVCall=_svc_handler
ivINT_SysTick=_int_kernel_isr
ivINT_TSI0=_int_kernel_isr
ivINT_UART0_ERR=_int_kernel_isr
ivINT_UART0_RX_TX=_int_kernel_isr
ivINT_UART1_ERR=_int_kernel_isr
ivINT_UART1_RX_TX=_int_kernel_isr
ivINT_UART2_ERR=_int_kernel_isr
ivINT_UART2_RX_TX=_int_kernel_isr
ivINT_UART3_ERR=_int_kernel_isr
ivINT_UART3_RX_TX=_int_kernel_isr
ivINT_UART4_ERR=_int_kernel_isr
ivINT_UART4_RX_TX=_int_kernel_isr
ivINT_UART5_ERR=_int_kernel_isr
ivINT_UART5_RX_TX=_int_kernel_isr
ivINT_USB0=_int_kernel_isr
ivINT_USBDCD=_int_kernel_isr
ivINT_Watchdog=_int_kernel_isr
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1
virtual_ADC1_TotalConversionPrescalerAddr=1074507784
virtual_ADC1_TotalConversionPrescalerReg=ADC1_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
ADC0AsynchroClockAddr=null
ADC0AsynchroClockReg=null
ADC0BusClockAddr=null
ADC0BusClockReg=null
ADC0ClkSelAddr=null
ADC0ClkSelReg=null
ADC1AsynchroClockAddr=null
ADC1AsynchroClockReg=null
ADC1BusClockAddr=null
ADC1BusClockReg=null
ADC1ClkSelAddr=null
ADC1ClkSelReg=null
ActiveConfigIdentifier=null
ActiveConfiguration=null
CPUDB_CPU_MASTER=null
CPUDB_CW_MCU_ID=null
CPUDB_CW_MCU_NAME=null
CPUDB_DataFlashBlockCount=null
CPUDB_DataFlashEraseUnitSize=null
CPUDB_DataFlashSize=null
CPUDB_DataFlashStartAddress=null
CPUDB_DataFlashWriteUnitSize=null
CPUDB_FlexRamSize=null
CPUDB_FlexRamStartAddress=null
CPUDB_LQFP144=null
CPUDB_MK60DN512Zxxx10=null
CPUDB_MK60DZ10=null
CPUDB_PACKAGE=null
CPUDB_ProgramFlashBlockCount=null
CPUDB_ProgramFlashEraseUnitSize=null
CPUDB_ProgramFlashSize=null
CPUDB_ProgramFlashWriteUnitSize=null
CPU_DB_version=null
CPUendian=null
CPUfamily=null
CPUproducer=null
CPUrunSpeedModeNum=null
CPUsubFamily=null
CPUtype=null
CPUvariant=null
ClientDir_Binary=null
ClientDir_Code=null
ClientDir_PE=null
ClientDir_Project=null
CommentBrackets=null
Compiler=null
CompilerID=null
DirRel_Binary=null
DirRel_BinaryToEvents=null
DirRel_Code=null
DirRel_Docs=null
DirRel_EventToBinary=null
DirRel_Events=null
DirRel_ProjectSettings=null
EclipseProjectName=null
InterruptTableType=null
Language=null
Not_for_MPC512x=null
OnChipEEPROM=null
OnChipFLASH=null
OnChipRAM=null
OperatingSystemId=null
PE_DEBUG=null
PE_DEVELOPMENT=null
PE_ECLIPSE=null
PE_GENERATING=null
PE_G_4PEx_ToolChain_Linker_EntryPoint=null
PE_G_CPUCFG_AutoIncludeIO_Map=null
PE_G_CPUCFG_EntryPointFunctionName=null
PE_G_CPUCFG_EntryPointFunctionReturn=null
PE_G_CPUCFG_EntryPointFunctionReturnType=null
PE_G_CPUCFG_GenerateLinkerFile=null
PE_G_CPUCFG_GenerateMainModule=null
PE_G_CPUCFG_InitIntVectorTableSym=null
PE_G_CPUCFG_ManageInterruptVectorTable=null
PE_G_CRI_CPUINIT_set0_NVICIP62=null
PE_G_CRI_CPUINIT_set0_PORTC_PCR1=null
PE_G_CRI_CPUINIT_set1_NVICIP62=null
PE_G_CRI_CPUINIT_set1_PORTC_PCR1=null
PE_G_CRI_GPIO_LDD_INIT_GPIO1_set0_PORTA_PCR19=null
PE_G_CRI_GPIO_LDD_INIT_GPIO1_set1_PORTA_PCR19=null
PE_G_CRI_GPIO_LDD_INIT_GPIO2_set0_PORTE_PCR26=null
PE_G_CRI_GPIO_LDD_INIT_GPIO2_set1_PORTE_PCR26=null
PE_G_EBGN_FTM0BeanName=null
PE_G_GenBitMask=null
PE_G_InternalMethodDescriptionNotFound=null
PE_G_MisraCnfBackParams_0=null
PE_G_MisraCnfParams_0=null
PE_G_MisraRuleList_0=null
PE_G_MisraStackIdx=null
PE_G_NO_SETREGMACROS=null
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=null
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=null
PE_G_RTOSAdap_regCompIndex=null
PE_G_RTOSAdap_regCompInstance_GPIO1_eventEnabled_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO1_eventPtr_OnFieldEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO1_eventPtr_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodEnabled_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ClearPortBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldEventStatus=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldOutputValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortEventStatus=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortOutputValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_GetPortValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldEventCondition=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortEventCondition=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_SetPortValue=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO1_methodPtr_TogglePortBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_eventEnabled_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO2_eventPtr_OnFieldEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO2_eventPtr_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodEnabled_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ClearPortBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldEventStatus=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldOutputValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortEventStatus=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortOutputValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_GetPortValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldEventCondition=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortEventCondition=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortInputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortOutputDirection=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_SetPortValue=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_GPIO2_methodPtr_TogglePortBits=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBlockReceived=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBlockSent=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnBreak=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnError=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnIdle=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnRxActiveEdge=null
PE_G_RTOSAdap_regCompInstance_IO1_eventPtr_OnTxComplete=null
PE_G_RTOSAdap_regCompInstance_IO1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_IO1_methodEnabled_Main=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_CancelBlockReception=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_CancelBlockTransmission=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ClearRTS=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ClearStats=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetBreak=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetCTS=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetDataWidth=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetError=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetLoopMode=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetParity=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetReceivedDataNum=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetSelectedBaudRate=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetSentDataNum=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetStats=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetStopBitLength=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_GetTxCompleteStatus=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_ReceiveBlock=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SelectBaudRate=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SendBlock=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SendBreak=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetDataWidth=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetLoopMode=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetParity=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetRTS=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_SetStopBitLength=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnRxOff=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnRxOn=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnTxOff=null
PE_G_RTOSAdap_regCompInstance_IO1_methodPtr_TurnTxOn=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventEnabled_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel0=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel1=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel2=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel3=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel4=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel5=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel6=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnChannel7=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_eventPtr_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodEnabled_SetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCaptureValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetInputFrequencyReal=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectCaptureEdge=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectInputFrequency=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SelectOutputAction=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methodPtr_SetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_eventEnabled_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel0=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel1=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel2=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel3=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel4=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel5=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel6=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnChannel7=null
PE_G_RTOSAdap_regCompInstance_TU1_eventPtr_OnCounterRestart=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCaptureValue=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetCounterValue=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequency=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetInputFrequencyReal=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_GetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_ResetCounter=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectCaptureEdge=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectInputFrequency=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SelectOutputAction=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOffsetTicks=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_TU1_methodPtr_SetPeriodTicks=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_eventEnabled_OnInterrupt=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_eventPtr_OnInterrupt=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_GetEventStatus=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SelectPeriod=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencyHz=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencyMHz=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetFrequencykHz=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodMS=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodReal=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodSec=null
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methodPtr_SetPeriodUS=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=null
PE_G_USE_UINTXX_T=null
PE_ProductVersion=null
PEversion=null
PEversionDecimal=null
ProcessorModule=null
ProcessorName=null
ProjectModule=null
ProjectName=null
ServerDir_PE=null
SetHighSpeedMode=null
SupportedCPUfamily=null
TimeStamp=null
Xtal_kHz=null
Xtal_kHz_real=null
ivINT_ADC0=null
ivINT_ADC1=null
ivINT_CAN0_Bus_Off=null
ivINT_CAN0_Error=null
ivINT_CAN0_ORed_Message_buffer=null
ivINT_CAN0_Rx_Warning=null
ivINT_CAN0_Tx_Warning=null
ivINT_CAN0_Wake_Up=null
ivINT_CAN1_Bus_Off=null
ivINT_CAN1_Error=null
ivINT_CAN1_ORed_Message_buffer=null
ivINT_CAN1_Rx_Warning=null
ivINT_CAN1_Tx_Warning=null
ivINT_CAN1_Wake_Up=null
ivINT_CMP0=null
ivINT_CMP1=null
ivINT_CMP2=null
ivINT_CMT=null
ivINT_DAC0=null
ivINT_DAC1=null
ivINT_DMA0=null
ivINT_DMA1=null
ivINT_DMA10=null
ivINT_DMA11=null
ivINT_DMA12=null
ivINT_DMA13=null
ivINT_DMA14=null
ivINT_DMA15=null
ivINT_DMA2=null
ivINT_DMA3=null
ivINT_DMA4=null
ivINT_DMA5=null
ivINT_DMA6=null
ivINT_DMA7=null
ivINT_DMA8=null
ivINT_DMA9=null
ivINT_DMA_Error=null
ivINT_ENET_1588_Timer=null
ivINT_ENET_Error=null
ivINT_ENET_Receive=null
ivINT_ENET_Transmit=null
ivINT_FTFL=null
ivINT_FTM0=null
ivINT_FTM1=null
ivINT_FTM2=null
ivINT_I2C0=null
ivINT_I2C1=null
ivINT_I2S0=null
ivINT_Initial_Program_Counter=null
ivINT_LLW=null
ivINT_LPTimer=null
ivINT_LVD_LVW=null
ivINT_MCG=null
ivINT_MCM=null
ivINT_PDB0=null
ivINT_PIT0=null
ivINT_PIT1=null
ivINT_PIT2=null
ivINT_PIT3=null
ivINT_PORTA=null
ivINT_PORTB=null
ivINT_PORTC=null
ivINT_PORTD=null
ivINT_PORTE=null
ivINT_PendableSrvReq=null
ivINT_RNG=null
ivINT_RTC=null
ivINT_Read_Collision=null
ivINT_Reserved102=null
ivINT_Reserved108=null
ivINT_Reserved109=null
ivINT_Reserved110=null
ivINT_Reserved111=null
ivINT_Reserved112=null
ivINT_Reserved113=null
ivINT_Reserved114=null
ivINT_Reserved115=null
ivINT_Reserved116=null
ivINT_Reserved117=null
ivINT_Reserved118=null
ivINT_Reserved119=null
ivINT_Reserved51=null
ivINT_Reserved52=null
ivINT_Reserved59=null
ivINT_Reserved60=null
ivINT_Reserved83=null
ivINT_SDHC=null
ivINT_SPI0=null
ivINT_SPI1=null
ivINT_SPI2=null
ivINT_SVCall=null
ivINT_SysTick=null
ivINT_TSI0=null
ivINT_UART0_ERR=null
ivINT_UART0_RX_TX=null
ivINT_UART1_ERR=null
ivINT_UART1_RX_TX=null
ivINT_UART2_ERR=null
ivINT_UART2_RX_TX=null
ivINT_UART3_ERR=null
ivINT_UART3_RX_TX=null
ivINT_UART4_ERR=null
ivINT_UART4_RX_TX=null
ivINT_UART5_ERR=null
ivINT_UART5_RX_TX=null
ivINT_USB0=null
ivINT_USBDCD=null
ivINT_Watchdog=null
virtual_ADC0_TotalConversionPrescalerAddr=null
virtual_ADC0_TotalConversionPrescalerReg=null
virtual_ADC1_TotalConversionPrescalerAddr=null
virtual_ADC1_TotalConversionPrescalerReg=null

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
ADC1AsynchroClock=[1]
ADC1AsynchroClock_Setting=[ADC1Async_FullPower_HighSpeed]
ADC1BusClock=[1]
ADC1BusClock_Setting=[1]
ADC1ClkSel=[1]
ADC1ClkSel_Setting=[ADC1BusClock]
CAN0ClkSel=[1]
CAN0ClkSel_Setting=[CAN0BusClk]
CAN1ClkSel=[1]
CAN1ClkSel_Setting=[CAN1BusClk]
CMTPresc=[1]
CMTPresc_Setting=[1]
CMTPrimaryPresc=[1]
CMTPrimaryPresc_Setting=[1]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[SYSTEM_OSC]
EWMClkSel=[1]
EWMClkSel_Setting=[LPO_1kHzSrc]
EventModuleList=[Events|mqx_tasks]
FTM0ClkSource=[1]
FTM0ClkSource_Setting=[OUTDIV2Presc]
FTM1ClkSource=[1]
FTM1ClkSource_Setting=[OUTDIV2Presc]
FTM2ClkSource=[1]
FTM2ClkSource_Setting=[OUTDIV2Presc]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
I2S0_ClkSel=[1]
I2S0_ClkSel_Setting=[I2S0_CoreDiv]
I2S0_Rx_Div2_PSR=[1]
I2S0_Rx_Div2_PSR_Setting=[1]
I2S0_Tx_Div2_PSR=[1]
I2S0_Tx_Div2_PSR_Setting=[1]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[LPO_1kHzSrc]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_ERCLKSel=[1]
MCG_ERCLKSel_Setting=[SYSTEM_OSC]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[1024]
MCG_FRDIV_Setting=[1024]
MCG_PRDIV=[25]
MCG_PRDIV_Setting=[25]
MCG_VDIV=[24]
MCG_VDIV_Setting=[24]
ModuleList=[usb_host|USB_LDD|CsIO1|IO1|MQX1|SystemTimer1|PWM|GPIO1|GPIO2|Sampling_TM|TimerIntLdd1|TU1]
OUTDIV1Presc=[1]
OUTDIV1Presc_Setting=[1]
OUTDIV2Presc=[1]
OUTDIV2Presc_Setting=[1]
OUTDIV3Presc=[2]
OUTDIV3Presc_Setting=[2]
OUTDIV4Presc=[2]
OUTDIV4Presc_Setting=[2]
PE_G_4PEx_ToolChain_Asm_SearchUserPaths=["${ProjDirPath}/MQXLITE/include"|"${ProjDirPath}/MQXLITE/kernel"|"${ProjDirPath}/MQXLITE/psp/cortex_m"|"${ProjDirPath}/MQXLITE/psp/cortex_m/core/M4"|"${ProjDirPath}/MQXLITE/psp/cortex_m/compiler/cwgcc"]
PE_G_4PEx_ToolChain_Compiler_SearchUserPaths=["${ProjDirPath}/MQXLITE/include"|"${ProjDirPath}/MQXLITE/kernel"|"${ProjDirPath}/MQXLITE/psp/cortex_m"|"${ProjDirPath}/MQXLITE/psp/cortex_m/core/M4"|"${ProjDirPath}/MQXLITE/psp/cortex_m/compiler/cwgcc"]
PE_G_CRI_CPUINIT_RegList32=[PORTC_PCR1]
PE_G_CRI_CPUINIT_RegList8=[NVICIP62]
PE_G_CRI_GPIO_LDD_INIT_GPIO1_RegList32=[PORTA_PCR19]
PE_G_CRI_GPIO_LDD_INIT_GPIO1_inited=[PORTA_PCR19]
PE_G_CRI_GPIO_LDD_INIT_GPIO2_RegList32=[PORTE_PCR26]
PE_G_CRI_GPIO_LDD_INIT_GPIO2_inited=[PORTE_PCR26]
PE_G_GPIO_PTA_GetPortEventStatusList=[no]
PE_G_GPIO_PTA_IntServiceList=[yes]
PE_G_GPIO_PTA_ModuleNameList=[GPIO1]
PE_G_GPIO_PTE_GetPortEventStatusList=[no]
PE_G_GPIO_PTE_IntServiceList=[yes]
PE_G_GPIO_PTE_ModuleNameList=[GPIO2]
PE_G_LCF_ADDITIONAL_CODE_SECTION_CONTENT=[/* MQX Lite component BEGIN */|* (KERNEL)|__VECTOR_TABLE_START = __vector_table;|. = ALIGN(0x4);|*(.rdata)|. = ALIGN(0x4);|*(.exception)|. = ALIGN(0x4);|__exception_table_start__ = .;|/* EXCEPTION */|__exception_table_end__ = .;|__sinit__ = .;|/* STATICINIT */|/* MQX Lite component END */]
PE_G_RTOSAdap_regCompInstanceAllocatedDevices=[USB0|UART3|SysTick|PTA|PTE|PIT|PIT]
PE_G_RTOSAdap_regCompInstanceDeviceBaseAddrs=[1074208768|1074188288|3758153744|1074786304|1074786560|1073967104|1073967104]
PE_G_RTOSAdap_regCompInstanceIds=[0|1|2|3|4|5|6]
PE_G_RTOSAdap_regCompInstanceNames=[USB_LDD|IO1|SystemTimer1|GPIO1|GPIO2|TU1|TimerIntLdd1]
PE_G_RTOSAdap_regCompInstanceSharedComponentName=[USB_LDD|IO1|SystemTimer1|GPIO1|GPIO2|TU1|TimerIntLdd1]
PE_G_RTOSAdap_regCompInstanceTypes=[USB_LDD|Serial_LDD|TimerUnit_LDD|LDD_GPIO|LDD_GPIO|TimerUnit_LDD|TimerInt_LDD]
PE_G_RTOSAdap_regCompInstance_GPIO1_events=[OnPortEvent|OnFieldEvent]
PE_G_RTOSAdap_regCompInstance_GPIO1_methods=[Init|Deinit|SetEventMask|GetEventMask|SetPortEventCondition|GetPortEventStatus|SetFieldEventCondition|GetFieldEventStatus|SetPortValue|GetPortValue|GetPortOutputValue|ClearPortBits|SetPortBits|TogglePortBits|SetPortInputDirection|SetPortOutputDirection|SetFieldValue|GetFieldValue|GetFieldOutputValue|ClearFieldBits|SetFieldBits|ToggleFieldBits|SetFieldInputDirection|SetFieldOutputDirection|SetOperationMode|GetDriverState|ConnectPin]
PE_G_RTOSAdap_regCompInstance_GPIO2_events=[OnPortEvent|OnFieldEvent]
PE_G_RTOSAdap_regCompInstance_GPIO2_methods=[Init|Deinit|SetEventMask|GetEventMask|SetPortEventCondition|GetPortEventStatus|SetFieldEventCondition|GetFieldEventStatus|SetPortValue|GetPortValue|GetPortOutputValue|ClearPortBits|SetPortBits|TogglePortBits|SetPortInputDirection|SetPortOutputDirection|SetFieldValue|GetFieldValue|GetFieldOutputValue|ClearFieldBits|SetFieldBits|ToggleFieldBits|SetFieldInputDirection|SetFieldOutputDirection|SetOperationMode|GetDriverState|ConnectPin]
PE_G_RTOSAdap_regCompInstance_IO1_events=[OnBlockReceived|OnBlockSent|OnBreak|OnError|OnTxComplete|OnIdle|OnRxActiveEdge]
PE_G_RTOSAdap_regCompInstance_IO1_methods=[Init|Deinit|Enable|Disable|SendBlock|ReceiveBlock|CancelBlockTransmission|CancelBlockReception|GetError|GetSentDataNum|GetReceivedDataNum|GetTxCompleteStatus|SetEventMask|GetEventMask|SelectBaudRate|GetSelectedBaudRate|SetParity|GetParity|SetDataWidth|GetDataWidth|SetStopBitLength|GetStopBitLength|SetLoopMode|GetLoopMode|GetStats|ClearStats|SetRTS|ClearRTS|GetCTS|SendBreak|GetBreak|TurnTxOn|TurnTxOff|TurnRxOn|TurnRxOff|ConnectPin|Main|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_SystemTimer1_events=[OnCounterRestart|OnChannel0|OnChannel1|OnChannel2|OnChannel3|OnChannel4|OnChannel5|OnChannel6|OnChannel7]
PE_G_RTOSAdap_regCompInstance_SystemTimer1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectInputFrequency|GetInputFrequencyReal|GetInputFrequency|SetPeriodTicks|GetPeriodTicks|ResetCounter|GetCounterValue|SetOffsetTicks|GetOffsetTicks|GetCaptureValue|SelectOutputAction|SelectCaptureEdge|ConnectPin|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_TU1_events=[OnCounterRestart|OnChannel0|OnChannel1|OnChannel2|OnChannel3|OnChannel4|OnChannel5|OnChannel6|OnChannel7]
PE_G_RTOSAdap_regCompInstance_TU1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectInputFrequency|GetInputFrequencyReal|GetInputFrequency|SetPeriodTicks|GetPeriodTicks|ResetCounter|GetCounterValue|SetOffsetTicks|GetOffsetTicks|GetCaptureValue|SelectOutputAction|SelectCaptureEdge|ConnectPin|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_events=[OnInterrupt]
PE_G_RTOSAdap_regCompInstance_TimerIntLdd1_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|GetEventStatus|SelectPeriod|SetPeriodUS|SetPeriodMS|SetPeriodSec|SetPeriodReal|SetFrequencyHz|SetFrequencykHz|SetFrequencyMHz|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_USB_LDD_events=[OnDeviceReset|OnDeviceSpeedDetect|OnDeviceSuspend|OnDeviceResume|OnDeviceSetupPacket|OnDeviceSof|OnDeviceError|OnDevice1msTimer|OnHostDeviceDeattach|OnHostResetRecovery|OnHostResumeRecovery|OnHostError|OnHost1msTimer|OnOtgDevice|OnOtgHost|OnOtgStateChange|OnSignalChange]
PE_G_RTOSAdap_regCompInstance_USB_LDD_methods=[Init|Deinit|SetEventMask|GetEventMask|Enable|Disable|DeviceGetUsbStatus|DeviceSetUsbStatus|DeviceSetAddress|DeviceAssertResume|DeviceInitEndpoint|DeviceDeinitEndpoint|DeviceStallEndpoint|DeviceUnstallEndpoint|DeviceReadSetupData|DeviceSendData|DeviceRecvData|DeviceGetTransferStatus|DeviceCancelTransfer|HostGetPortState|HostSetPortState|HostGetFrameNumber|HostGetMicroFrameNumber|HostOpenPipe|HostClosePipe|HostSendSetup|HostSendData|HostRecvData|HostGetTransferStatus|HostCancelTransfer|OtgRegisterDevice|OtgRegisterHost|OtgCmd|SetSignal|ConnectPin|Main|SetOperationMode|GetDriverState]
PE_G_TU_TU1_LinkedBy=[TimerIntLdd1]
PE_G_TU_TU1_LinkedChannel=[PIT_LDVAL0]
PE_G_TU_TU1_Sharing=[true]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLK]
SDHC_ClkSel=[1]
SDHC_ClkSel_Setting=[OUTDIV1Presc]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0Div]
USB0_PLLFLL0Div=[1]
USB0_PLLFLL0Div_Setting=[1]
USB0_PLLFLL0Frac=[1]
USB0_PLLFLL0Frac_Setting=[1]
WDOGAddPresc=[1]
WDOGAddPresc_Setting=[1]
WDOGClkSel=[1]
WDOGClkSel_Setting=[OUTDIV2Presc]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]
virtual_ADC1_TotalConversionPrescaler=[1]
virtual_ADC1_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 


#endif /* __PE_Types_H */
