=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "usb_host"  (component USB_HOST_STACK)
   - usb_host_usb_class_hub_init -This function is called by common class to initialize the class driver. It is called in 
                response to a select interface call by application
   - usb_host_usb_class_hub_cntrl_callback -This is the callback used when hub information is sent or received
   - usb_host_usb_class_hub_cntrl_common -This function is used to send a control request
   - usb_host_usb_class_hub_get_descriptor -This function is called by the application to read the descriptor of hub device
   - usb_host_usb_class_hub_set_port_feature -Sets feature of specified hub port
   - usb_host_usb_class_hub_clear_port_feature -Clears feature of selected hub port
   - usb_host_usb_class_hub_get_port_status -Gets the status of specified port
   - usb_host_usb_host_hub_device_event -called when a hub has been attached, detached, etc.
   - usb_host__usb_khci_task -KHCI task
   - usb_host__usb_event_init -Allocate event pointer, clear value and set event in valid state.
   - usb_host__usb_event_clear -Clear value of event pointer
   - usb_host__usb_event_wait_ticks -This function returns the value USB_EVENT_SET when an event occurs, but timeout not support
   - usb_host__usb_host_register_ch9_callback -This function registers a callback function that will be called  to notify the 
                user of a ch9 command completion. This should be used  only after enumeration is completed
   - usb_host__usb_host_ch9_clear_feature -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of 
                USB 2.0 specification.
   - usb_host__usb_host_ch9_get_configuration -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 
                of USB 2.0 specification.
   - usb_host__usb_host_ch9_get_descriptor -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of 
                USB 2.0 specification.
   - usb_host__usb_host_ch9_get_interface -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of 
                USB 2.0 specification.
   - usb_host__usb_host_ch9_get_status -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.
                0 specification.
   - usb_host__usb_host_ch9_set_address -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 
                2.0 specification.
   - usb_host__usb_host_ch9_set_descriptor -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of 
                USB 2.0 specification.
   - usb_host__usb_host_ch9_set_interface -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of 
                USB 2.0 specification.
   - usb_host__usb_host_ch9_synch_frame -Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 
                2.0 specification.
   - usb_host__usb_hostdev_cntrl_request -Function to process class- or vendor-specific control pipe device requests.
   - usb_host__usb_host_close_pipe -_usb_host_close_pipe routine removes the pipe from the open pipe list
   - usb_host__usb_host_close_all_pipes -_usb_host_close_all_pipes routine removes the pipe from the open pipe list
   - usb_host__usb_host_cancel_transfer -_usb_host_cancel_transfer is a non-blocking routine that causes a transfer to be 
                terminated.
   - usb_host_usb_hostdev_validate -Function to verify pointer is address of an instance on device list. It is presumed that 
                this function is called with USB interrupts disabled
   - usb_host__usb_hostdev_get_buffer -Applications should use this function to get I/O buffers and other work areas that stay 
                allocated until the device is detached.  At that time, these are all freed by the system.
   - usb_host__usb_hostdev_get_descriptor -If the intf_handle is NULL, then the descriptor is searched within the whole device. 
                If the intf_handle is not NULL, the descriptor is  searched within specified interface (ignored if desc_type is 
                USB_DESC_TYPE_DEV, USB_DESC_TYPE_CFG or USB_DESC_TYPE_IF and required  for USB_DESC_TYPE_EP).
   - usb_host__usb_hostdev_find_pipe_handle -Function to find a pipe with specified type and direction
   - usb_host_usb_hostdev_get_pipe_handle -Function to map a particular pipe type and direction in the given bundle (which 
                contains device/interface). It is presumed that this function is called with USB interrupts disabled
   - usb_host_usb_host_class_intf_init -Initialize header of class interface info struct. Incoming params are checked to catch 
                errors early before attempts to use the struct.
   - usb_host_usb_host_class_intf_validate -It is presumed that this function is called with interrupts disabled
   - usb_host__usb_host_driver_info_register -Function to register user's desired-interfaces array of structs.
   - usb_host__usb_hostdev_select_config -Function to tear down an old configuration, and set up a new configuration with the 
                same or different index.
   - usb_host__usb_hostdev_select_interface -Function to tear down old interface, and set up a new one with the same or 
                different index/alternate. For each interface, only one of its alternates  can be selected per USB spec.  Also 
                per spec, an endpoint  can be in only one interface (though it may exist in  several alternates of that 
                interface).
   - usb_host_usb_dev_list_attach_device -This function will be called when attach interrupt happens, to add onto the device 
                list and do common initialization.
   - usb_host_usb_hostdev_tr_init -To ensure that a new TR_STRUCT is used by the system for each new transaction, it is 
                essential to have a distinct TR_INDEX value.  Completed transactions have TR_INDEX cleared to zero, it is 
                invalid for a new transaction
   - usb_host__usb_host_init -Initializes the USB hardware and installs the USB interrupt handler
   - usb_host__usb_host_register_service -Registers a callback routine for a specified event.
   - usb_host__usb_host_unregister_service -Unregisters a callback routine for a specified event or endpoint.
   - usb_host__usb_host_open_pipe -_usb_host_open_pipe routine initializes a new pipe descriptor and  returns USB_OK or error 
                and the pipe descriptor for the USB bus address,  endpoint number, direction of transfer, maximum packet size, 
                interval  and the type of pipe
   - usb_host__usb_host_send_setup -Sends a Setup packet. Internally, following the SendSetup call this takes care of the whole 
                transaction (including receiving or sending any data to or from the device).
   - usb_host__usb_host_get_transfer_status -_usb_host_get_transfer_status is a routine that returns status of a transfer.
   - usb_host__usb_host_recv_data -The Receive Data routine is non-blocking routine that causes a buffer to be made available 
                for data recieved from the USB host. It takes the buffer and passes it down to lower level hardware driver
   - usb_host__usb_host_shutdown -Shutdown an initialized USB Host
   - usb_host__usb_host_get_frame_number -This function can be used to inquire the current frame number.
   - usb_host__usb_host_get_micro_frame_number -This function can be used to inquire the current micro frame number.
   - usb_host__usb_host_send_data -The Send Data routine is non-blocking routine that causes a block of data to be made 
                available for transmission to the USB host.

Module "CsIO1"     (component ConsoleIO)

Module "Cpu"       (component MK40N512LQ100)

===================================================================================
