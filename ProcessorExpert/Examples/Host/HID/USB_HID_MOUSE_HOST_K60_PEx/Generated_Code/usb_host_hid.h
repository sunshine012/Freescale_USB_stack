
/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : usb_host_hid.h
**     Project     : ProcessorExpert
**     Processor   : MK60DN512ZVLQ10
**     Component   : USB_HID_CLASS
**     Version     : Component 01.027, Driver 01.00, CPU db: 3.00.001
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2012-11-19, 12:23, # CodeGen: 54
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         usb_class_host_hid_init         - void usb_host_hid_usb_class_host_hid_init(PIPE_BUNDLE_STRUCT_PTR *pbs_ptr,...
**         usb_class_host_hid_get_report   - USB_STATUS usb_host_hid_usb_class_host_hid_get_report(HID_COMMAND_PTR...
**         usb_class_host_hid_set_report   - USB_STATUS usb_host_hid_usb_class_host_hid_set_report(HID_COMMAND_PTR...
**         usb_class_host_hid_get_idle     - USB_STATUS usb_host_hid_usb_class_host_hid_get_idle(HID_COMMAND_PTR *com_ptr,...
**         usb_class_host_hid_set_idle     - USB_STATUS usb_host_hid_usb_class_host_hid_set_idle(HID_COMMAND_PTR *com_ptr,...
**         usb_class_host_hid_get_protocol - USB_STATUS usb_host_hid_usb_class_host_hid_get_protocol(HID_COMMAND_PTR...
**         usb_class_host_hid_set_protocol - USB_STATUS usb_host_hid_usb_class_host_hid_set_protocol(HID_COMMAND_PTR...
**
**     (c) Copyright <company/user-name>, 2011
**     http      : www.<company>.com
**     mail      : info@<company>.com
** ###################################################################*/
#ifndef _USB_HOST_HID_H
#define _USB_HOST_HID_H 1
/******************************************************************************
 * Includes
 *****************************************************************************/
#include "usb.h"
#include "hostapi.h"
#include "host_ch9.h"
#include "host_dev_list.h"
#include "host_common.h"
#include "usbprv.h"



/******************************************************************************
 * Macro's
 *****************************************************************************/
#define LONG_ITEM                           (0xFE)
#define SHORT_ITEM                          (0x03)

#define MAIN_INPUT                          (0x80)
#define MAIN_OUTPUT                         (0x90)
#define MAIN_FEATURE                        (0xB0)
#define MAIN_COLLECTION                     (0xA0)
#define MAIN_END_COLLECTION                 (0xC0)

#define GLOBAL_USAGE_PAGE                   (0x04)
#define GLOBAL_LOGICAL_MIN                  (0x14)
#define GLOBAL_LOGICAL_MAX                  (0x24)
#define GLOBAL_PHYSICAL_MIN                 (0x34)
#define GLOBAL_PHYSICAL_MAX                 (0x44)
#define GLOBAL_UNIT_COMPONENT               (0x54)
#define GLOBAL_UNIT                         (0x64)
#define GLOBAL_REPORT_SIZE                  (0x74)
#define GLOBAL_REPORT_ID                    (0x84)
#define GLOBAL_REPORT_COUNT                 (0x94)
#define GLOBAL_PUSH                         (0xA4)
#define GLOBAL_POP                          (0xB4)

#define LOCAL_USAGE                         (0x08)
#define LOCAL_USAGE_MINIMUM                 (0x18)
#define LOCAL_USAGE_MAXIMUM                 (0x28)
#define LOCAL_DESIGNATOR_INDEX              (0x38)
#define LOCAL_DESIGNATOR_MIN                (0x48)
#define LOCAL_DESIGNATOR_MAX                (0x58)
#define LOCAL_STRING_INDEX                  (0x78)
#define LOCAL_STRING_MIN                    (0x88)
#define LOCAL_STRING_MAX                    (0x98)
#define LOCAL_SET_DELIMITER                 (0xA8)

#define USAGE_PAGE_UNDEFINED                (0x00)
#define USAGE_PAGE_GENERIC_DESKTOP          (0x01)
#define USAGE_PAGE_KEYBOARD                 (0x07)
#define USAGE_PAGE_LEDS                     (0x08)
#define USAGE_PAGE_BUTTONS                  (0x09)

#define DESKTOP_USAGE_POINTER               (0x01)
#define DESKTOP_USAGE_MOUSE                 (0x02)
#define DESKTOP_USAGE_KEYBOARD              (0x06)
#define DESKTOP_USAGE_X                     (0x30)
#define DESKTOP_USAGE_Y                     (0x31)
#define DESKTOP_USAGE_Z                     (0x32)
#define DESKTOP_USAGE_WHEEL                 (0x38)

#define INPUT_DATA_CONSTBIT                 (0x01)
#define INPUT_DATA_VAR_BIT                  (0x02)
#define INPUT_ABS_RELATIVE_BIT              (0x04)
#define INPUT_NO_WRAP_BIT                   (0x08)
#define INPUT_NON_LINEAR_BIT                (0x10)
#define INPUT_PREF_STATE_NO_PREF_BIT        (0x20)
#define INPUT_NO_NULL_STATE_BIT             (0x40)
#define INPUT_BIT_FIELD_BUF_BYTES_BIT       (0x100)

#define GET_REPORT                          (0x01)
#define GET_IDLE                            (0x02)
#define GET_PROTOCOL                        (0x03)
#define SET_REPORT                          (0x09)
#define SET_IDLE                            (0x0A)
#define SET_PROTOCOL                        (0x0B)

/******************************************************************************
 * Types
 *****************************************************************************/
typedef void (_CODE_PTR_  HID_CALLBACK_USER_FN)(
    uint_32,                     /* [IN] Callback parameter */
    pointer,                     /* [IN] Pointer to class interface */
    pointer,                     /* [IN] Pointer to the data buffer */
    uint_32                      /* [IN] Error code */
);

/* structure for HID class descriptor */
typedef struct _HID_DESCRIPTOR_STRUCT {
    uint_8     BLENGTH;
    uint_8     BDESCRIPTORTYPE;
    uint_8     BCDHID[2];
    uint_8     BCOUNTRYCODE;
    uint_8     BNUMDESCRIPTORS;
    uint_8     BCLASSDESCRIPTORTYPE;
    uint_8     BDESCRIPTORLENGTH[2];
} HID_DESCRIPTOR_STRUCT, _PTR_ HID_DESCRIPTOR_STRUCT_PTR;

/*
** HID Class Interface structure. This structure will be passed to
** all commands to this class driver.
*/
typedef struct {
    /* Each class must start with a GENERAL_CLASS struct */
    GENERAL_CLASS                             G;
    /* Only 1 command can be issued at one time */
    boolean                                   IN_SETUP;
    /* Here we store callback and parameter from higher level */
    tr_callback                               USER_CALLBACK;
    pointer                                   USER_PARAM;
}USB_HID_CLASS_INTF_STRUCT, _PTR_ USB_HID_CLASS_INTF_STRUCT_PTR;

typedef struct {
    CLASS_CALL_STRUCT_PTR   CLASS_PTR;
    tr_callback             CALLBACK_FN;
    pointer                 CALLBACK_PARAM;
}HID_COMMAND, _PTR_ HID_COMMAND_PTR;

/******************************************************************************
 * Global Functions
 *****************************************************************************/
#ifdef __cplusplus
extern "C" {
#endif
void usb_class_host_hid_init(
    PIPE_BUNDLE_STRUCT_PTR pbs_ptr,
    CLASS_CALL_STRUCT_PTR ccs_ptr
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_init (component USB_HID_CLASS)
**
**     Description :
**         This function is called by common class to initialize the
**         class driver. It is called in response to a select interface
**         call by application
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pbs_ptr         - Pointer to [IN]  structure with
**                           USB pipe information on the interface
**       * ccs_ptr         - Pointer to [IN] printer call
**                           struct pointer
**     Returns     : Nothing
** ===================================================================
*/

void usb_class_host_hid_cntrl_callback(
    pointer pipe, pointer param,
    uchar_ptr buffer,
    uint_32 len,
    USB_STATUS status
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_cntrl_callback (component USB_HID_CLASS)
**
**     Description :
**         This is the callback used when HID information is sent or 
**         received
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

USB_STATUS usb_class_host_hid_cntrl_common(
    HID_COMMAND_PTR com_ptr,
    uint_8 bmrequesttype,
    uint_8 brequest,
    uint_16 wvalue,
    uint_16 wlength,
    uchar_ptr data
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_cntrl_common (component USB_HID_CLASS)
**
**     Description :
**         This function is used to send a control request
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

USB_STATUS usb_class_host_hid_get_report(
    HID_COMMAND_PTR com_ptr,
    uint_8 rid,
    uint_8 rtype,
    pointer buf,
    uint_16 blen
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_get_report (component USB_HID_CLASS)
**
**     Description :
**         This function is called by the application to get a report
**         from the HID device
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - Pointer to [IN] Class Interface
**                           structure pointer
**         rid             - [IN] Report ID (see HID specification)
**         rtype           - [IN] Report type (see HID
**                           specification)
**       * buf             - Pointer to [IN] Buffer to receive report
**                           data
**         blen            - [IN] length of the Buffer
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

USB_STATUS usb_class_host_hid_set_report(
    HID_COMMAND_PTR com_ptr,
    uint_8 rid,
    uint_8 rtype,
    pointer buf,
    uint_16 blen
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_set_report (component USB_HID_CLASS)
**
**     Description :
**         This function is called by the application to send a report
**         to the HID device
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - [IN] Class Interface structure
**                           pointer
**         rid             - [IN] Report ID (see HID specification)
**         rtype           - [IN] Report type (see HID
**                           specification)
**       * buf             - Pointer to [IN] Buffer to receive report
**                           data
**         blen            - [IN] length of the Buffer
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

USB_STATUS usb_class_host_hid_get_idle(
    HID_COMMAND_PTR com_ptr,
    uint_8 rid,
    uint_8_ptr idle_rate
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_get_idle (component USB_HID_CLASS)
**
**     Description :
**         This function is called by the application to read the idle
**         rate of a particular HID device report
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - [IN] Class Interface structure
**                           pointer
**         rid             - [IN] Report ID (see HID specification)
**       * idle_rate       - Pointer to [OUT] idle rate of
**                           this report
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

USB_STATUS usb_class_host_hid_set_idle(
    HID_COMMAND_PTR com_ptr,
    uint_8 rid,
    uint_8 duration
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_set_idle (component USB_HID_CLASS)
**
**     Description :
**         This function is called by the application to silence a
**         particular report on interrupt In pipe until a new event
**         occurs or specified  time elapses
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - [IN] Class Interface structure
**                           pointer
**         rid             - [IN] Report ID (see HID specification)
**         duration        - [IN] Idle rate
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

USB_STATUS usb_class_host_hid_get_protocol(
    HID_COMMAND_PTR com_ptr,
    uint_8_ptr protocol
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_get_protocol (component USB_HID_CLASS)
**
**     Description :
**         Reads the active protocol (boot protocol or report protocol)
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - [IN] Class Interface structure
**                           pointer
**       * protocol        - Pointer to [IN] Protocol (1 byte,
**                           0 = Boot Protocol or 1 = Report Protocol
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

USB_STATUS usb_class_host_hid_set_protocol(
    HID_COMMAND_PTR com_ptr,
    uint_8 protocol
);
/*
** ===================================================================
**     Method      :  usb_host_hid_usb_class_host_hid_set_protocol (component USB_HID_CLASS)
**
**     Description :
**         Switches between the boot protocol and the report protocol
**         (or vice versa)
**     Parameters  :
**         NAME            - DESCRIPTION
**       * com_ptr         - [IN] Class Interface structure
**                           pointer
**         protocol        - [IN] Protocol (1 byte, 0 = Boot
**                           Protocol or 1 = Report Protocol
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

#ifdef __cplusplus
}
#endif
#endif
/* EOF */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/

