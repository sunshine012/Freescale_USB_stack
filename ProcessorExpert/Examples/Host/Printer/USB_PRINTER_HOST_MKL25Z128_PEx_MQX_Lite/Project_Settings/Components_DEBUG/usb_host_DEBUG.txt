
{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\USB_HOST_STACKAbstract.Inc
Description_USB_LDD_OnHostDeviceDeattach=Called after the device has been successfully attached (see OnResetRecovery() event) and the deattach condition is detected,  OnDeattach() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostError=Called after the Error is detected, OnError() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostResetRecovery=Called 10 ms later (reset recovery time) after the reset signaling is stopped, OnResetRecovery() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. As soon as this event is invoked attached device can be accessed by the SendXX()/RecvXX() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostResumeRecovery=Called 10 ms later (resume recovery time) after the resume signaling is stopped, OnResumeRecovery() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. As soon as this event is invoked attached device can be accessed by the SendXX()/RecvXX() methods. The event services the event of the inherited component and eventually invokes other events.
Description__usb_event_set=
Description__usb_host_ch9_set_configuration=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
Description__usb_host_ch9_set_feature=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
Description__usb_khci_add_int_tr=Add new interrupt transaction to queue
Description__usb_khci_init_int_tr=Initialize interrupt transaction queue
Description__usb_khci_process_tr_complete=Transaction complete
Description__usb_khci_rm_int_tr=Remove interrupt transaction from queue
Description_usb_host_hub_device_sm=This fucntion is called when a hub changes state; sm = state machine
Description_usb_host_hub_int_callback=This fucntion is called on interrupt endpoint data reception
Description_usb_hub_wait_for_interrupt=Starts interrupt endpoint to poll for interrupt on specified hub
DriverAuthor=Author
DriverDate=06.12.2011
DriverVersion=01.00
EndOfInterface=
Paralternate=
Paranchor_ptr=
Parbuff_ptr=
Parbuffer=
Parbuffer_size=
Parbuflen=
Parcallback=
Parcallback_param=
Parccs_ptr=
Parclass_intf_handle=
Parclass_intf_ptr=
Parconfig=
Parconfig_no=
Pardesc_index=
Pardesc_type=
Pardescriptor=
Pardev_handle=
Pardevice_handle=
Pardevnum=
Pardevreq=
Parevent=
Parfeature=
Parframe_list_size=
Parhandle=
Parhci_handle=
Parhost_handle=
Parhub_no=
Parinfo_table_ptr=
Parinterface=
Parintf=
Parintf_alt=
Parintf_endpt=
Parintf_handle=
Parlang_id=
Parpbs_ptr=
Parpipe_direction=
Parpipe_handle=
Parpipe_init_params_ptr=
Parpipe_type=
Parport_no=
Parreq_type=
Parservice=
Parspeed=
Partr_params_ptr=
Partr_ptr=
Partransfer_number=
Partype=
Partype_index=
RetVal=
Settings=Common\USB_HOST_STACKSettings.Inc
_filetype=usb_psptypes.h
_index=2

 LOCAL SYMBOLS (alphabet order)
-------------------------------
BeanVersion=01.027
CHG_BeanIsEnabled=yes
Class_Code0=7
Class_Code_Mask0=255
Class_ListMaxItem=0
Class_ListNumItems=1
Class_Name0=printer
Common_Class=yes
DeviceName=usb_host
DeviceType=USB_HOST_STACK
LDD_Component=USB_LDD
ModuleName=usb_host
OS=MQX_Lite
Protocol_Code0=2
Protocol_Code_Mask0=255
SubClass_Code0=1
SubClass_Code_Mask0=255
Use_Hub=no
Use_Poll=yes
_usb_event_clear=_usb_event_clear
_usb_event_clear_Hint=uint_16 usb_host__usb_event_clear(USB_EVENT_STRUCT_PTR event, uint_32 bitmask);
_usb_event_clear_HintHint=Clear value of event pointer
_usb_event_clear_HintHintLong=Clear value of event pointer
_usb_event_init=_usb_event_init
_usb_event_init_Hint=uint_16 usb_host__usb_event_init(USB_EVENT_STRUCT_PTR event);
_usb_event_init_HintHint=Allocate event pointer, clear value and set event in valid state.
_usb_event_init_HintHintLong=Allocate event pointer, clear value and set event in valid state.
_usb_event_wait_ticks=_usb_event_wait_ticks
_usb_event_wait_ticks_Hint=uint_16 usb_host__usb_event_wait_ticks(USB_EVENT_STRUCT_PTR event, uint_32...
_usb_event_wait_ticks_HintHint=This function returns the value USB_EVENT_SET when an event occurs, but...
_usb_event_wait_ticks_HintHintLong=This function returns the value USB_EVENT_SET when an event occurs, but timeout not support
_usb_host_cancel_transfer=_usb_host_cancel_transfer
_usb_host_cancel_transfer_Hint=USB_STATUS usb_host__usb_host_cancel_transfer(_usb_host_handle hci_handle,...
_usb_host_cancel_transfer_HintHint=_usb_host_cancel_transfer is a non-blocking routine that causes a transfer to...
_usb_host_cancel_transfer_HintHintLong=_usb_host_cancel_transfer is a non-blocking routine that causes a transfer to be terminated.
_usb_host_ch9_clear_feature=_usb_host_ch9_clear_feature
_usb_host_ch9_clear_feature_Hint=USB_STATUS usb_host__usb_host_ch9_clear_feature(_usb_device_instance_handle...
_usb_host_ch9_clear_feature_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_clear_feature_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_configuration=_usb_host_ch9_get_configuration
_usb_host_ch9_get_configuration_Hint=USB_STATUS usb_host__usb_host_ch9_get_c...
_usb_host_ch9_get_configuration_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_configuration_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_descriptor=_usb_host_ch9_get_descriptor
_usb_host_ch9_get_descriptor_Hint=USB_STATUS usb_host__usb_host_ch9_get_descriptor(_usb_device_instance_handle...
_usb_host_ch9_get_descriptor_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_descriptor_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_interface=_usb_host_ch9_get_interface
_usb_host_ch9_get_interface_Hint=USB_STATUS usb_host__usb_host_ch9_get_interface(_usb_device_instance_handle...
_usb_host_ch9_get_interface_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_interface_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_status=_usb_host_ch9_get_status
_usb_host_ch9_get_status_Hint=USB_STATUS usb_host__usb_host_ch9_get_status(_usb_device_instance_handle...
_usb_host_ch9_get_status_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_status_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_address=_usb_host_ch9_set_address
_usb_host_ch9_set_address_Hint=USB_STATUS usb_host__usb_host_ch9_set_address(_usb_device_instance_handle...
_usb_host_ch9_set_address_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_address_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_descriptor=_usb_host_ch9_set_descriptor
_usb_host_ch9_set_descriptor_Hint=USB_STATUS usb_host__usb_host_ch9_set_descriptor(_usb_device_instance_handle...
_usb_host_ch9_set_descriptor_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_descriptor_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_interface=_usb_host_ch9_set_interface
_usb_host_ch9_set_interface_Hint=USB_STATUS usb_host__usb_host_ch9_set_interface(_usb_device_instance_handle...
_usb_host_ch9_set_interface_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_interface_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_synch_frame=_usb_host_ch9_synch_frame
_usb_host_ch9_synch_frame_Hint=USB_STATUS usb_host__usb_host_ch9_synch_frame(_usb_device_instance_handle...
_usb_host_ch9_synch_frame_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_synch_frame_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_close_all_pipes=_usb_host_close_all_pipes
_usb_host_close_all_pipes_Hint=void usb_host__usb_host_close_all_pipes(_usb_host_handle hci_handle);
_usb_host_close_all_pipes_HintHint=_usb_host_close_all_pipes routine removes the pipe from the open pipe list
_usb_host_close_all_pipes_HintHintLong=_usb_host_close_all_pipes routine removes the pipe from the open pipe list
_usb_host_close_pipe=_usb_host_close_pipe
_usb_host_close_pipe_Hint=USB_STATUS usb_host__usb_host_close_pipe(_usb_host_handle hci_handle,...
_usb_host_close_pipe_HintHint=_usb_host_close_pipe routine removes the pipe from the open pipe list
_usb_host_close_pipe_HintHintLong=_usb_host_close_pipe routine removes the pipe from the open pipe list
_usb_host_driver_info_register=_usb_host_driver_info_register
_usb_host_driver_info_register_Hint=USB_STATUS usb_host__usb_host_driver_info_register(_usb_host_handle...
_usb_host_driver_info_register_HintHint=Function to register user's desired-interfaces array of structs.
_usb_host_driver_info_register_HintHintLong=Function to register user's desired-interfaces array of structs.
_usb_host_get_frame_number=_usb_host_get_frame_number
_usb_host_get_frame_number_Hint=uint_32 usb_host__usb_host_get_frame_number(_usb_host_handle hci_handle);
_usb_host_get_frame_number_HintHint=This function can be used to inquire the current frame number.
_usb_host_get_frame_number_HintHintLong=This function can be used to inquire the current frame number.
_usb_host_get_micro_frame_number=_usb_host_get_micro_frame_number
_usb_host_get_micro_frame_number_Hint=uint_32 usb_host__usb_host_get_micro_frame_number(_usb_host_handle hci_handle);
_usb_host_get_micro_frame_number_HintHint=This function can be used to inquire the current micro frame number.
_usb_host_get_micro_frame_number_HintHintLong=This function can be used to inquire the current micro frame number.
_usb_host_get_transfer_status=_usb_host_get_transfer_status
_usb_host_get_transfer_status_Hint=uint_32 usb_host__usb_host_get_transfer_status(_usb_pipe_handle pipe_handle,...
_usb_host_get_transfer_status_HintHint=_usb_host_get_transfer_status is a routine that returns status of a transfer.
_usb_host_get_transfer_status_HintHintLong=_usb_host_get_transfer_status is a routine that returns status of a transfer.
_usb_host_init=_usb_host_init
_usb_host_init_Hint=USB_STATUS usb_host__usb_host_init(uint_8 devnum, uint_32 frame_list_size,...
_usb_host_init_HintHint=Initializes the USB hardware and installs the USB interrupt handler
_usb_host_init_HintHintLong=Initializes the USB hardware and installs the USB interrupt handler
_usb_host_open_pipe=_usb_host_open_pipe
_usb_host_open_pipe_Hint=USB_STATUS usb_host__usb_host_open_pipe(_usb_host_handle hci_handle,...
_usb_host_open_pipe_HintHint=_usb_host_open_pipe routine initializes a new pipe descriptor and  returns...
_usb_host_open_pipe_HintHintLong=_usb_host_open_pipe routine initializes a new pipe descriptor and  returns USB_OK or error and the pipe descriptor for the USB bus address,  endpoint number, direction of transfer, maximum packet size, interval  and the type of pipe
_usb_host_recv_data=_usb_host_recv_data
_usb_host_recv_data_Hint=uint_32 usb_host__usb_host_recv_data(_usb_host_handle hci_handle,...
_usb_host_recv_data_HintHint=The Receive Data routine is non-blocking routine that causes a buffer to be...
_usb_host_recv_data_HintHintLong=The Receive Data routine is non-blocking routine that causes a buffer to be made available for data recieved from the USB host. It takes the buffer and passes it down to lower level hardware driver
_usb_host_register_ch9_callback=_usb_host_register_ch9_callback
_usb_host_register_ch9_callback_Hint=USB_STATUS usb_host__usb_host_register_...
_usb_host_register_ch9_callback_HintHint=This function registers a callback function that will be called  to notify...
_usb_host_register_ch9_callback_HintHintLong=This function registers a callback function that will be called  to notify the user of a ch9 command completion. This should be used  only after enumeration is completed
_usb_host_register_service=_usb_host_register_service
_usb_host_register_service_Hint=uint_32 usb_host__usb_host_register_service(_usb_host_handle hci_handle,...
_usb_host_register_service_HintHint=Registers a callback routine for a specified event.
_usb_host_register_service_HintHintLong=Registers a callback routine for a specified event.
_usb_host_send_data=_usb_host_send_data
_usb_host_send_data_Hint=uint_32 usb_host__usb_host_send_data(_usb_host_handle hci_handle,...
_usb_host_send_data_HintHint=The Send Data routine is non-blocking routine that causes a block of data to...
_usb_host_send_data_HintHintLong=The Send Data routine is non-blocking routine that causes a block of data to be made available for transmission to the USB host.
_usb_host_send_setup=_usb_host_send_setup
_usb_host_send_setup_Hint=uint_32 usb_host__usb_host_send_setup(_usb_host_handle hci_handle,...
_usb_host_send_setup_HintHint=Sends a Setup packet. Internally, following the SendSetup call this takes...
_usb_host_send_setup_HintHintLong=Sends a Setup packet. Internally, following the SendSetup call this takes care of the whole transaction (including receiving or sending any data to or from the device).
_usb_host_shutdown=_usb_host_shutdown
_usb_host_shutdown_Hint=void usb_host__usb_host_shutdown(_usb_host_handle hci_handle);
_usb_host_shutdown_HintHint=Shutdown an initialized USB Host
_usb_host_shutdown_HintHintLong=Shutdown an initialized USB Host
_usb_host_unregister_service=_usb_host_unregister_service
_usb_host_unregister_service_Hint=uint_32 usb_host__usb_host_unregister_service(_usb_host_handle hci_handle,...
_usb_host_unregister_service_HintHint=Unregisters a callback routine for a specified event or endpoint.
_usb_host_unregister_service_HintHintLong=Unregisters a callback routine for a specified event or endpoint.
_usb_hostdev_cntrl_request=_usb_hostdev_cntrl_request
_usb_hostdev_cntrl_request_Hint=USB_STATUS usb_host__usb_hostdev_cntrl_request(_usb_device_instance_handle...
_usb_hostdev_cntrl_request_HintHint=Function to process class- or vendor-specific control pipe device requests.
_usb_hostdev_cntrl_request_HintHintLong=Function to process class- or vendor-specific control pipe device requests.
_usb_hostdev_find_pipe_handle=_usb_hostdev_find_pipe_handle
_usb_hostdev_find_pipe_handle_Hint=_usb_pipe_handle usb_host__usb_hostdev_...
_usb_hostdev_find_pipe_handle_HintHint=Function to find a pipe with specified type and direction
_usb_hostdev_find_pipe_handle_HintHintLong=Function to find a pipe with specified type and direction
_usb_hostdev_get_buffer=_usb_hostdev_get_buffer
_usb_hostdev_get_buffer_Hint=USB_STATUS usb_host__usb_hostdev_get_buffer(_usb_device_instance_handle...
_usb_hostdev_get_buffer_HintHint=Applications should use this function to get I/O buffers and other work areas...
_usb_hostdev_get_buffer_HintHintLong=Applications should use this function to get I/O buffers and other work areas that stay allocated until the device is detached.  At that time, these are all freed by the system.
_usb_hostdev_get_descriptor=_usb_hostdev_get_descriptor
_usb_hostdev_get_descriptor_Hint=USB_STATUS usb_host__usb_hostdev_get_descriptor(_usb_device_instance_handle...
_usb_hostdev_get_descriptor_HintHint=If the intf_handle is NULL, then the descriptor is searched within the whole...
_usb_hostdev_get_descriptor_HintHintLong=If the intf_handle is NULL, then the descriptor is searched within the whole device. If the intf_handle is not NULL, the descriptor is  searched within specified interface (ignored if desc_type is  USB_DESC_TYPE_DEV, USB_DESC_TYPE_CFG or USB_DESC_TYPE_IF and required  for USB_DESC_TYPE_EP).
_usb_hostdev_select_config=_usb_hostdev_select_config
_usb_hostdev_select_config_Hint=USB_STATUS usb_host__usb_hostdev_select_config(_usb_device_instance_handle...
_usb_hostdev_select_config_HintHint=Function to tear down an old configuration, and set up a new configuration...
_usb_hostdev_select_config_HintHintLong=Function to tear down an old configuration, and set up a new configuration with the same or different index.
_usb_hostdev_select_interface=_usb_hostdev_select_interface
_usb_hostdev_select_interface_Hint=USB_STATUS usb_host__usb_hostdev_select_interface(_usb_device_instance_handle...
_usb_hostdev_select_interface_HintHint=Function to tear down old interface, and set up a new one with the same or...
_usb_hostdev_select_interface_HintHintLong=Function to tear down old interface, and set up a new one with the same or different index/alternate. For each interface, only one of its alternates  can be selected per USB spec.  Also per spec, an endpoint  can be in only one interface (though it may exist in  several alternates of that interface).
_usb_khci_task=_usb_khci_task
_usb_khci_task_Hint=void usb_host__usb_khci_task(void);
_usb_khci_task_HintHint=KHCI task
_usb_khci_task_HintHintLong=KHCI task
runSpeedModeNum=1
usb_class_hub_clear_port_feature=usb_class_hub_clear_port_feature
usb_class_hub_clear_port_feature_Hint=USB_STATUS usb_host_usb_class_hub_clear_port_feature(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_clear_port_feature_HintHint=Clears feature of selected hub port
usb_class_hub_clear_port_feature_HintHintLong=Clears feature of selected hub port
usb_class_hub_cntrl_callback=usb_class_hub_cntrl_callback
usb_class_hub_cntrl_callback_Hint=void usb_host_usb_class_hub_cntrl_callback(void* pipe, void* param, uchar_ptr...
usb_class_hub_cntrl_callback_HintHint=This is the callback used when hub information is sent or received
usb_class_hub_cntrl_callback_HintHintLong=This is the callback used when hub information is sent or received
usb_class_hub_cntrl_common=usb_class_hub_cntrl_common
usb_class_hub_cntrl_common_Hint=USB_STATUS usb_host_usb_class_hub_cntrl_common(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_cntrl_common_HintHint=This function is used to send a control request
usb_class_hub_cntrl_common_HintHintLong=This function is used to send a control request
usb_class_hub_get_descriptor=usb_class_hub_get_descriptor
usb_class_hub_get_descriptor_Hint=USB_STATUS usb_host_usb_class_hub_get_descriptor(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_get_descriptor_HintHint=This function is called by the application to read the descriptor of hub device
usb_class_hub_get_descriptor_HintHintLong=This function is called by the application to read the descriptor of hub device
usb_class_hub_get_port_status=usb_class_hub_get_port_status
usb_class_hub_get_port_status_Hint=USB_STATUS usb_host_usb_class_hub_get_port_status(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_get_port_status_HintHint=Gets the status of specified port
usb_class_hub_get_port_status_HintHintLong=Gets the status of specified port
usb_class_hub_init=usb_class_hub_init
usb_class_hub_init_Hint=void usb_host_usb_class_hub_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr,...
usb_class_hub_init_HintHint=This function is called by common class to initialize the class driver. It is...
usb_class_hub_init_HintHintLong=This function is called by common class to initialize the class driver. It is called in response to a select interface call by application
usb_class_hub_set_port_feature=usb_class_hub_set_port_feature
usb_class_hub_set_port_feature_Hint=USB_STATUS usb_host_usb_class_hub_set_port_feature(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_set_port_feature_HintHint=Sets feature of specified hub port
usb_class_hub_set_port_feature_HintHintLong=Sets feature of specified hub port
usb_dev_list_attach_device=usb_dev_list_attach_device
usb_dev_list_attach_device_Hint=USB_STATUS usb_host_usb_dev_list_attach_device(_usb_host_handle handle,...
usb_dev_list_attach_device_HintHint=This function will be called when attach interrupt happens, to add onto the...
usb_dev_list_attach_device_HintHintLong=This function will be called when attach interrupt happens, to add onto the device list and do common initialization.
usb_host_class_intf_init=usb_host_class_intf_init
usb_host_class_intf_init_Hint=USB_STATUS usb_host_usb_host_class_intf_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr,...
usb_host_class_intf_init_HintHint=Initialize header of class interface info struct. Incoming params are checked...
usb_host_class_intf_init_HintHintLong=Initialize header of class interface info struct. Incoming params are checked to catch errors early before attempts to use the struct.
usb_host_class_intf_validate=usb_host_class_intf_validate
usb_host_class_intf_validate_Hint=uint_32 usb_host_usb_host_class_intf_validate(void* class_intf_handle);
usb_host_class_intf_validate_HintHint=It is presumed that this function is called with interrupts disabled
usb_host_class_intf_validate_HintHintLong=It is presumed that this function is called with interrupts disabled
usb_host_hub_device_event=usb_host_hub_device_event
usb_host_hub_device_event_Hint=void usb_host_usb_host_hub_device_event(_usb_device_instance_handle...
usb_host_hub_device_event_HintHint=called when a hub has been attached, detached, etc.
usb_host_hub_device_event_HintHintLong=called when a hub has been attached, detached, etc.
usb_hostdev_get_pipe_handle=usb_hostdev_get_pipe_handle
usb_hostdev_get_pipe_handle_Hint=_usb_pipe_handle usb_host_usb_hostdev_get_pipe_handle(PIPE_BUNDLE_STRUCT_PTR...
usb_hostdev_get_pipe_handle_HintHint=Function to map a particular pipe type and direction in the given bundle...
usb_hostdev_get_pipe_handle_HintHintLong=Function to map a particular pipe type and direction in the given bundle (which contains device/interface). It is presumed that this function is called with USB interrupts disabled
usb_hostdev_tr_init=usb_hostdev_tr_init
usb_hostdev_tr_init_Hint=void usb_host_usb_hostdev_tr_init(TR_INIT_PARAM_STRUCT_PTR tr_ptr,...
usb_hostdev_tr_init_HintHint=To ensure that a new TR_STRUCT is used by the system for each new...
usb_hostdev_tr_init_HintHintLong=To ensure that a new TR_STRUCT is used by the system for each new transaction, it is essential to have a distinct TR_INDEX value.  Completed transactions have TR_INDEX cleared to zero, it is invalid for a new transaction
usb_hostdev_validate=usb_hostdev_validate
usb_hostdev_validate_Hint=USB_STATUS usb_host_usb_hostdev_validate(_usb_device_instance_handle...
usb_hostdev_validate_HintHint=Function to verify pointer is address of an instance on device list. It is...
usb_hostdev_validate_HintHintLong=Function to verify pointer is address of an instance on device list. It is presumed that this function is called with USB interrupts disabled
BeanUserCopyright=[(c) Copyright <company/user-name>, 2011|http      : www.<company>.com|mail      : info@<company>.com]
InhrSymbolList=[LDD_Component]
MethodHintList=[void usb_host_usb_class_hub_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, CLASS_CALL_STRUCT_PTR ccs_ptr);|void usb_host_usb_class_hub_cntrl_callback(void* pipe, void* param, uchar_ptr buffer, uint_32 len, USB_STATUS status);|USB_STATUS usb_host_usb_class_hub_cntrl_common(HUB_COMMAND_PTR com_ptr, uint_8 bmrequesttype, uint_8 brequest, uint_16 wvalue, uint_16 windex, uint_16 wlength, uchar_ptr data);|USB_STATUS usb_host_usb_class_hub_get_descriptor(HUB_COMMAND_PTR com_ptr, uchar_ptr buffer, uchar len);|USB_STATUS usb_host_usb_class_hub_set_port_feature(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uint_8 feature);|USB_STATUS usb_host_usb_class_hub_clear_port_feature(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uint_8 feature);|USB_STATUS usb_host_usb_class_hub_get_port_status(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uchar_ptr buffer, uchar len);|void usb_host_usb_host_hub_device_event(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, uint_32 event_code);|void usb_host__usb_khci_task(void);|uint_16 usb_host__usb_event_init(USB_EVENT_STRUCT_PTR event);|uint_16 usb_host__usb_event_clear(USB_EVENT_STRUCT_PTR event, uint_32 bitmask);|uint_16 usb_host__usb_event_wait_ticks(USB_EVENT_STRUCT_PTR event, uint_32 bitmask, uint_8 all, uint_16 ticks);|USB_STATUS usb_host__usb_host_register_ch9_callback(_usb_device_instance_handle dev_handle, tr_callback callback, void* callback_param);|USB_STATUS usb_host__usb_host_ch9_clear_feature(_usb_device_instance_handle dev_handle, uint_8 req_type, uint_8 intf_endpt, uint_16 feature);|USB_STATUS usb_host__usb_host_ch9_get_configuration(_usb_device_instance_handle dev_handle, uchar_ptr buffer);|USB_STATUS usb_host__usb_host_ch9_get_descriptor(_usb_device_instance_handle dev_handle, uint_16 type_index, uint_16 lang_id, uint_16 buflen, uchar_ptr buffer);|USB_STATUS usb_host__usb_host_ch9_get_interface(_usb_device_instance_handle dev_handle, uint_8 interface, uchar_ptr buffer);|USB_STATUS usb_host__usb_host_ch9_get_status(_usb_device_instance_handle dev_handle, uint_8 req_type, uint_8 intf_endpt, uchar_ptr buffer);|USB_STATUS usb_host__usb_host_ch9_set_address(_usb_device_instance_handle dev_handle);|USB_STATUS usb_host__usb_host_ch9_set_descriptor(_usb_device_instance_handle dev_handle, uint_16 type_index, uint_16 lang_id, uint_16 buflen, uchar_ptr buffer);|USB_STATUS usb_host__usb_host_ch9_set_interface(_usb_device_instance_handle dev_handle, uint_8 alternate, uint_8 intf);|USB_STATUS usb_host__usb_host_ch9_synch_frame(_usb_device_instance_handle dev_handle, uint_8 intf, uchar_ptr buffer);|USB_STATUS usb_host__usb_hostdev_cntrl_request(_usb_device_instance_handle dev_handle, USB_SETUP_PTR devreq, uchar_ptr buff_ptr, tr_callback callback, void* callback_param);|USB_STATUS usb_host__usb_host_close_pipe(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle);|void usb_host__usb_host_close_all_pipes(_usb_host_handle hci_handle);|USB_STATUS usb_host__usb_host_cancel_transfer(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, uint_32 transfer_number);|USB_STATUS usb_host_usb_hostdev_validate(_usb_device_instance_handle device_handle);|USB_STATUS usb_host__usb_hostdev_get_buffer(_usb_device_instance_handle dev_handle, uint_32 buffer_size, uchar_ptr *buff_ptr);|USB_STATUS usb_host__usb_hostdev_get_descriptor(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, descriptor_type desc_type, uint_8 desc_index, uint_8 intf_alt, void* *descriptor);|_usb_pipe_handle usb_host__usb_hostdev_find_pipe_handle(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, uint_8 pipe_type, uint_8 pipe_direction);|_usb_pipe_handle usb_host_usb_hostdev_get_pipe_handle(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, uint_8 pipe_type, uint_8 pipe_direction);|USB_STATUS usb_host_usb_host_class_intf_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, void* class_intf_handle, void* anchor_ptr);|uint_32 usb_host_usb_host_class_intf_validate(void* class_intf_handle);|USB_STATUS usb_host__usb_host_driver_info_register(_usb_host_handle host_handle, void* info_table_ptr);|USB_STATUS usb_host__usb_hostdev_select_config(_usb_device_instance_handle dev_handle, uint_8 config_no);|USB_STATUS usb_host__usb_hostdev_select_interface(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, void* class_intf_ptr);|USB_STATUS usb_host_usb_dev_list_attach_device(_usb_host_handle handle, uint_8 speed, uint_8 hub_no, uint_8 port_no);|void usb_host_usb_hostdev_tr_init(TR_INIT_PARAM_STRUCT_PTR tr_ptr, tr_callback callback, void* callback_param);|USB_STATUS usb_host__usb_host_init(uint_8 devnum, uint_32 frame_list_size, _usb_host_handle *hci_handle);|uint_32 usb_host__usb_host_register_service(_usb_host_handle hci_handle, uint_8 type, SERVICE_CALLBACK service);|uint_32 usb_host__usb_host_unregister_service(_usb_host_handle hci_handle, uint_8 event);|USB_STATUS usb_host__usb_host_open_pipe(_usb_host_handle hci_handle, PIPE_INIT_PARAM_STRUCT_PTR pipe_init_params_ptr, _usb_pipe_handle *pipe_handle);|uint_32 usb_host__usb_host_send_setup(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);|uint_32 usb_host__usb_host_get_transfer_status(_usb_pipe_handle pipe_handle, uint_32 transfer_number);|uint_32 usb_host__usb_host_recv_data(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);|void usb_host__usb_host_shutdown(_usb_host_handle hci_handle);|uint_32 usb_host__usb_host_get_frame_number(_usb_host_handle hci_handle);|uint_32 usb_host__usb_host_get_micro_frame_number(_usb_host_handle hci_handle);|uint_32 usb_host__usb_host_send_data(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);]
MethodList=[usb_class_hub_init|usb_class_hub_cntrl_callback|usb_class_hub_cntrl_common|usb_class_hub_get_descriptor|usb_class_hub_set_port_feature|usb_class_hub_clear_port_feature|usb_class_hub_get_port_status|usb_host_hub_device_event|_usb_khci_task|_usb_event_init|_usb_event_clear|_usb_event_wait_ticks|_usb_host_register_ch9_callback|_usb_host_ch9_clear_feature|_usb_host_ch9_get_configuration|_usb_host_ch9_get_descriptor|_usb_host_ch9_get_interface|_usb_host_ch9_get_status|_usb_host_ch9_set_address|_usb_host_ch9_set_descriptor|_usb_host_ch9_set_interface|_usb_host_ch9_synch_frame|_usb_hostdev_cntrl_request|_usb_host_close_pipe|_usb_host_close_all_pipes|_usb_host_cancel_transfer|usb_hostdev_validate|_usb_hostdev_get_buffer|_usb_hostdev_get_descriptor|_usb_hostdev_find_pipe_handle|usb_hostdev_get_pipe_handle|usb_host_class_intf_init|usb_host_class_intf_validate|_usb_host_driver_info_register|_usb_hostdev_select_config|_usb_hostdev_select_interface|usb_dev_list_attach_device|usb_hostdev_tr_init|_usb_host_init|_usb_host_register_service|_usb_host_unregister_service|_usb_host_open_pipe|_usb_host_send_setup|_usb_host_get_transfer_status|_usb_host_recv_data|_usb_host_shutdown|_usb_host_get_frame_number|_usb_host_get_micro_frame_number|_usb_host_send_data]
runSpeedMode=[Yes]

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_BUS_FREQ_HZ_MAX=24000000
CPUDB_CPU_MASTER=MKL25Z4
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MKL25Z128xxx4
CPUDB_LQFP80=-1
CPUDB_MKL25Z128xxx4=-1
CPUDB_MKL25Z4=-1
CPUDB_PACKAGE=LQFP80
CPUDB_PLL_INPUT_FREQ_HZ_MAX=4000000
CPUDB_PLL_INPUT_FREQ_HZ_MIN=2000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=100000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=48000000
CPUDB_ProgramFlashBlockCount=1
CPUDB_ProgramFlashEraseUnitSize=1024
CPUDB_ProgramFlashSize=131072
CPUDB_ProgramFlashWriteUnitSize=4
CPUDB_SYSTEM_FREQ_HZ_MAX=48000000
CPU_DB_version=3.00.000
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MKL25
CPUtype=MKL25Z128LK4
CPUvariant=MKL25Z128VLK4
ClientDir_Binary=E:\USB_Printer_Host\Codes\K25\USB_PRINTER_HOST_MKL25Z128_PEx_MQX_Lite_2012_12_28_11h24\Sources\
ClientDir_Code=E:\USB_Printer_Host\Codes\K25\USB_PRINTER_HOST_MKL25Z128_PEx_MQX_Lite_2012_12_28_11h24\Generated_Code\
ClientDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
ClientDir_Project=E:\USB_Printer_Host\Codes\K25\USB_PRINTER_HOST_MKL25Z128_PEx_MQX_Lite_2012_12_28_11h24\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
EclipseProjectName=USB_PRINTER_HOST_MKL25Z128_PEx_MQX_Lite
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
OnChipEEPROM=0
OnChipFLASH=131072
OnChipRAM=16384
OperatingSystemId=MQXLite
PE_DEBUG=
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void __attribute__ ((constructor))
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_GenBitMask=
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=_int_disable
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=_int_enable
PE_G_RTOSAdap_regCompIndex=0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=(void (*)(LDD_TUserData *UserDataPtr, uint8_t EpNum))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=(void (*)(LDD_TUserData *UserDataPtr, uint16_t FrameNumber))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostDeviceDeattach
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))&USB_LDD_USB_LDD_OnHostError
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))&USB_LDD_USB_LDD_OnHostResetRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostResumeRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_Otg_TState NewState))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetDriverState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetOperationMode=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceDataPtr *DeviceData, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Deinit
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Address))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Disable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Enable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetDriverState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeHandlePtr))&USB_LDD_HostCancelTransfer
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr))&USB_LDD_HostClosePipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=(uint8_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetMicroFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=(LDD_USB_Host_TState (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=(LDD_USB_TTransferState (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TTransferHandle *TransferHandlePtr))&USB_LDD_HostGetTransferStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeInitParamsPtr, LDD_USB_Host_TPipeHandle **PipeHandlePtr))&USB_LDD_HostOpenPipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostRecvData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendSetup
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPortControlCmd Cmd))&USB_LDD_HostSetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=(LDD_TDeviceData * (*)(LDD_TUserData *UserDataPtr))&USB_LDD_Init
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))&USB_LDD_SetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))&USB_LDD_SetOperationMode
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))0
PE_G_USE_UINTXX_T=
PE_ProductVersion=10.0
PEversion=05.03
PEversionDecimal=1283
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectModule=ProcessorExpert
ProjectName=ProcessorExpert
ServerDir_PE=D:\FreeScale\CW MCU v10.3_B121029\MCU\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2012-12-28, 16:09, # CodeGen: 123
Xtal_kHz=4000
Xtal_kHz_real=4000
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
ADC0AsynchroClockAddr=null
ADC0AsynchroClockReg=null
ADC0BusClockAddr=null
ADC0BusClockReg=null
ADC0ClkSelAddr=null
ADC0ClkSelReg=null
ActiveConfigIdentifier=null
ActiveConfiguration=null
CPUDB_BUS_FREQ_HZ_MAX=null
CPUDB_CPU_MASTER=null
CPUDB_CW_MCU_ID=null
CPUDB_CW_MCU_NAME=null
CPUDB_LQFP80=null
CPUDB_MKL25Z128xxx4=null
CPUDB_MKL25Z4=null
CPUDB_PACKAGE=null
CPUDB_PLL_INPUT_FREQ_HZ_MAX=null
CPUDB_PLL_INPUT_FREQ_HZ_MIN=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=null
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=null
CPUDB_ProgramFlashBlockCount=null
CPUDB_ProgramFlashEraseUnitSize=null
CPUDB_ProgramFlashSize=null
CPUDB_ProgramFlashWriteUnitSize=null
CPUDB_SYSTEM_FREQ_HZ_MAX=null
CPU_DB_version=null
CPUendian=null
CPUfamily=null
CPUproducer=null
CPUrunSpeedModeNum=null
CPUsubFamily=null
CPUtype=null
CPUvariant=null
ClientDir_Binary=null
ClientDir_Code=null
ClientDir_PE=null
ClientDir_Project=null
CommentBrackets=null
Compiler=null
CompilerID=null
DirRel_Binary=null
DirRel_BinaryToEvents=null
DirRel_Code=null
DirRel_Docs=null
DirRel_EventToBinary=null
DirRel_Events=null
DirRel_ProjectSettings=null
EclipseProjectName=null
InterruptTableType=null
Language=null
Not_for_MPC512x=null
OnChipEEPROM=null
OnChipFLASH=null
OnChipRAM=null
OperatingSystemId=null
PE_DEBUG=null
PE_DEVELOPMENT=null
PE_ECLIPSE=null
PE_GENERATING=null
PE_G_CPUCFG_AutoIncludeIO_Map=null
PE_G_CPUCFG_EntryPointFunctionName=null
PE_G_CPUCFG_EntryPointFunctionReturn=null
PE_G_CPUCFG_EntryPointFunctionReturnType=null
PE_G_CPUCFG_GenerateLinkerFile=null
PE_G_CPUCFG_GenerateMainModule=null
PE_G_CPUCFG_InitIntVectorTableSym=null
PE_G_CPUCFG_ManageInterruptVectorTable=null
PE_G_GenBitMask=null
PE_G_MisraCnfBackParams_0=null
PE_G_MisraCnfParams_0=null
PE_G_MisraRuleList_0=null
PE_G_MisraStackIdx=null
PE_G_NO_SETREGMACROS=null
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=null
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=null
PE_G_RTOSAdap_regCompIndex=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=null
PE_G_USE_UINTXX_T=null
PE_ProductVersion=null
PEversion=null
PEversionDecimal=null
ProcessorModule=null
ProcessorName=null
ProjectModule=null
ProjectName=null
ServerDir_PE=null
SetHighSpeedMode=null
SupportedCPUfamily=null
TimeStamp=null
Xtal_kHz=null
Xtal_kHz_real=null
virtual_ADC0_TotalConversionPrescalerAddr=null
virtual_ADC0_TotalConversionPrescalerReg=null

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
COPClkSelect=[1]
COPClkSelect_Setting=[COPBusClock]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[SYSTEM_OSC]
EventModuleList=[Events|mqx_tasks]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[ERCLK]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[256]
MCG_FRDIV_Setting=[256]
MCG_PRDIV=[2]
MCG_PRDIV_Setting=[2]
MCG_VDIV=[24]
MCG_VDIV_Setting=[24]
ModuleList=[usb_host|USB_LDD|CsIO1|IO1|MQX1|SystemTimer1]
OUTDIV1Presc=[2]
OUTDIV1Presc_Setting=[2]
OUTDIV4Presc=[2]
OUTDIV4Presc_Setting=[2]
PE_G_RTOSAdap_regCompInstanceAllocatedDevices=[USB0]
PE_G_RTOSAdap_regCompInstanceDeviceBaseAddrs=[1074208768]
PE_G_RTOSAdap_regCompInstanceIds=[0]
PE_G_RTOSAdap_regCompInstanceNames=[USB_LDD]
PE_G_RTOSAdap_regCompInstanceSharedComponentName=[USB_LDD]
PE_G_RTOSAdap_regCompInstanceTypes=[USB_LDD]
PE_G_RTOSAdap_regCompInstance_USB_LDD_events=[OnDeviceReset|OnDeviceSpeedDetect|OnDeviceSuspend|OnDeviceResume|OnDeviceSetupPacket|OnDeviceSof|OnDeviceError|OnDevice1msTimer|OnHostDeviceDeattach|OnHostResetRecovery|OnHostResumeRecovery|OnHostError|OnHost1msTimer|OnOtgDevice|OnOtgHost|OnOtgStateChange|OnSignalChange]
PE_G_RTOSAdap_regCompInstance_USB_LDD_methods=[Init|Deinit|SetEventMask|GetEventMask|Enable|Disable|DeviceGetUsbStatus|DeviceSetUsbStatus|DeviceSetAddress|DeviceAssertResume|DeviceInitEndpoint|DeviceDeinitEndpoint|DeviceStallEndpoint|DeviceUnstallEndpoint|DeviceReadSetupData|DeviceSendData|DeviceRecvData|DeviceGetTransferStatus|DeviceCancelTransfer|HostGetPortState|HostSetPortState|HostGetFrameNumber|HostGetMicroFrameNumber|HostOpenPipe|HostClosePipe|HostSendSetup|HostSendData|HostRecvData|HostGetTransferStatus|HostCancelTransfer|OtgRegisterDevice|OtgRegisterHost|OtgCmd|SetSignal|ConnectPin|Main|SetOperationMode|GetDriverState]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLKDIV2]
SPI0_BaudRatePrescDiv=[1]
SPI0_BaudRatePrescDiv_Setting=[1]
SPI1_BaudRatePrescDiv=[1]
SPI1_BaudRatePrescDiv_Setting=[1]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
TPMClk=[1]
TPMClk_Setting=[PLLFLLSelDistr]
UART0_ClkSel=[1]
UART0_ClkSel_Setting=[PLLFLLSelDistr]
UART0_Divider=[4]
UART0_Divider_Setting=[4]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 

