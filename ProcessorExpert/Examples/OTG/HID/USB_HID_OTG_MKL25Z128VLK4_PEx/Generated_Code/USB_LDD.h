/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : USB_LDD.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : USB_LDD
**     Version     : Component 01.306, Driver 01.08, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2013-02-28, 11:17, # CodeGen: 8
**     Abstract    :
**         This component implements an low level USB API.
**     Settings    :
**          Component name                                 : USB_LDD
**          USB module (SIE)                               : USB0
**          Input clock frequency [MHz]                    : 48 MHz
**          Interrupt service/event                        : Enabled
**            Interrupt                                    : INT_USB0
**            Interrupt priority                           : medium priority
**          Mode                                           : OTG
**            Transceiver type                             : Internal
**              Transceiver module                         : USB0_FS
**              Transceiver weak pull-downs                : Enabled
**              USB revision                               : USB 2.0
**              Device data rate                           : Full speed
**              Host data rates                            : 
**                Low speed                                : yes
**                Full speed                               : yes
**                High speed                               : no
**              Pin/signal setting                         : 
**                Clock pin                                : Disabled
**                USB data pins                            : 
**                  Data plus                              : 
**                    Pin                                  : USB0_DP
**                    Pin signal                           : 
**                  Data minus                             : 
**                    Pin                                  : USB0_DM
**                    Pin signal                           : 
**                Pullup/Pulldown pins                     : 
**                  DP pullup                              : Enabled
**                    Pin                                  : USB0_Internal_DP_PU
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  DM pullup                              : Disabled
**                  DP pulldown                            : Enabled
**                    Pin                                  : USB0_Internal_DP_PD
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  DM pulldown                            : Enabled
**                    Pin                                  : USB0_Internal_DM_PD
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                Otg pins                                 : 
**                  ID                                     : Enabled
**                    Pin                                  : USB0_ID_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  VBUS drive                             : Enabled
**                    Pin                                  : USB0_VBUS_DRV_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  VBUS valid                             : Enabled
**                    Pin                                  : USB0_VBUS_VALID_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  Session valid                          : Enabled
**                    Pin                                  : USB0_SESSION_VALID_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  B session end                          : Enabled
**                    Pin                                  : USB0_B_SESSION_END_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  VBUS charge                            : Enabled
**                    Pin                                  : USB0_VBUS_CHARGE_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**                  VBUS discharge                         : Enabled
**                    Pin                                  : USB0_VBUS_DISCHARGE_signal
**                    Pin signal                           : 
**                    Polarity                             : Activ high
**            Device mode setting                          : 
**              EP list                                    : 16
**                EP 0                                     : Enabled
**                  Control transfer                       : Enabled
**                    Maximum packet size                  : 8
**                    Max. queue size                      : 1
**                  Bulk OUT transfer                      : Disabled
**                  Bulk IN transfer                       : Disabled
**                  Interrupt OUT transfer                 : Disabled
**                  Interrupt IN transfer                  : Disabled
**                  Isochronous OUT  transfer              : Disabled
**                  Isochronous IN  transfer               : Disabled
**                EP 1                                     : Enabled
**                  Control transfer                       : Disabled
**                  Bulk OUT transfer                      : Disabled
**                  Bulk IN transfer                       : Disabled
**                  Interrupt OUT transfer                 : Disabled
**                  Interrupt IN transfer                  : Enabled
**                    Max. packet size                     : 16
**                    Max. queue size                      : 1
**                  Isochronous OUT  transfer              : Disabled
**                  Isochronous IN  transfer               : Disabled
**                EP 2                                     : Disabled
**                EP 3                                     : Disabled
**                EP 4                                     : Disabled
**                EP 5                                     : Disabled
**                EP 6                                     : Disabled
**                EP 7                                     : Disabled
**                EP 8                                     : Disabled
**                EP 9                                     : Disabled
**                EP 10                                    : Disabled
**                EP 11                                    : Disabled
**                EP 12                                    : Disabled
**                EP 13                                    : Disabled
**                EP 14                                    : Disabled
**                EP 15                                    : Disabled
**            Host mode setting                            : 
**              Max. pipes                                 : 3
**              Max. transfers                             : 4
**              Asynchronous transfers                     : yes
**                Control transfers                        : yes
**                Bulk transfers                           : no
**              Periodic transfers                         : yes
**                Interrupt transfers                      : yes
**                Isochronous transfers                    : no
**            OTG mode settings                            : 
**              A wait B connect timeout                   : Disabled
**              SRP                                        : Disabled
**              HNP                                        : Disabled
**            Initialization                               : 
**              Enabled in init. code                      : no
**              Auto initialization                        : no
**              Event mask                                 : 
**                OnDeviceReset                            : Enabled
**                OnDeviceSpeedDetect                      : Enabled
**                OnDeviceSuspend                          : Enabled
**                OnDeviceResume                           : Enabled
**                OnDeviceSetupPacket                      : Enabled
**                OnDeviceSof                              : Disabled
**                OnDeviceError                            : Enabled
**                OnDevice1msTimer                         : Disabled
**                OnHostDeviceDeattach                     : Enabled
**                OnHostResetRecovery                      : Enabled
**                OnHostResumeRecovery                     : Enabled
**                OnHostError                              : Enabled
**                OnHost1msTimer                           : Disabled
**                OnOtgDevice                              : Enabled
**                OnOtgHost                                : Enabled
**                OnOtgStateChange                         : Enabled
**                OnSignalChange                           : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component enabled
**            Clock configuration 2                        : This component enabled
**     Contents    :
**         Init                    - LDD_TDeviceData * USB_LDD_Init(LDD_TUserData *UserDataPtr);
**         Deinit                  - void USB_LDD_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SetEventMask            - LDD_TError USB_LDD_SetEventMask(LDD_TDeviceData *DeviceDataPtr,...
**         GetEventMask            - LDD_TEventMask USB_LDD_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
**         Enable                  - LDD_TError USB_LDD_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable                 - LDD_TError USB_LDD_Disable(LDD_TDeviceData *DeviceDataPtr);
**         DeviceGetUsbStatus      - LDD_TError USB_LDD_DeviceGetUsbStatus(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceSetUsbStatus      - LDD_TError USB_LDD_DeviceSetUsbStatus(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceSetAddress        - void USB_LDD_DeviceSetAddress(LDD_TDeviceData *DeviceDataPtr, uint8_t Address);
**         DeviceAssertResume      - LDD_TError USB_LDD_DeviceAssertResume(LDD_TDeviceData *DeviceDataPtr);
**         DeviceInitEndpoint      - LDD_TError USB_LDD_DeviceInitEndpoint(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceDeinitEndpoint    - LDD_TError USB_LDD_DeviceDeinitEndpoint(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceStallEndpoint     - void USB_LDD_DeviceStallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceUnstallEndpoint   - void USB_LDD_DeviceUnstallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceReadSetupData     - void USB_LDD_DeviceReadSetupData(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         DeviceSendData          - LDD_TError USB_LDD_DeviceSendData(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceRecvData          - LDD_TError USB_LDD_DeviceRecvData(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceGetTransferStatus - LDD_TError USB_LDD_DeviceGetTransferStatus(LDD_TDeviceData *DeviceDataPtr,...
**         DeviceCancelTransfer    - LDD_TError USB_LDD_DeviceCancelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         HostGetPortState        - LDD_USB_Host_TState USB_LDD_HostGetPortState(LDD_TDeviceData *DeviceDataPtr);
**         HostSetPortState        - LDD_TError USB_LDD_HostSetPortState(LDD_TDeviceData *DeviceDataPtr,...
**         HostGetFrameNumber      - uint16_t USB_LDD_HostGetFrameNumber(LDD_TDeviceData *DeviceDataPtr);
**         HostGetMicroFrameNumber - uint8_t USB_LDD_HostGetMicroFrameNumber(LDD_TDeviceData *DeviceDataPtr);
**         HostOpenPipe            - LDD_TError USB_LDD_HostOpenPipe(LDD_TDeviceData *DeviceDataPtr,...
**         HostClosePipe           - LDD_TError USB_LDD_HostClosePipe(LDD_TDeviceData *DeviceDataPtr,...
**         HostSendSetup           - LDD_TError USB_LDD_HostSendSetup(LDD_TDeviceData *DeviceDataPtr,...
**         HostSendData            - LDD_TError USB_LDD_HostSendData(LDD_TDeviceData *DeviceDataPtr,...
**         HostRecvData            - LDD_TError USB_LDD_HostRecvData(LDD_TDeviceData *DeviceDataPtr,...
**         HostGetTransferStatus   - LDD_USB_TTransferState USB_LDD_HostGetTransferStatus(LDD_TDeviceData...
**         HostCancelTransfer      - LDD_TError USB_LDD_HostCancelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         OtgRegisterDevice       - LDD_TError USB_LDD_OtgRegisterDevice(LDD_TDeviceData *DeviceDataPtr,...
**         OtgRegisterHost         - LDD_TError USB_LDD_OtgRegisterHost(LDD_TDeviceData *DeviceDataPtr,...
**         OtgCmd                  - LDD_TError USB_LDD_OtgCmd(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd);
**         SetSignal               - LDD_TError USB_LDD_SetSignal(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask...
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __USB_LDD_H
#define __USB_LDD_H

/* MODULE USB_LDD. */
#include "PE_LDD.h"

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */

#include "Cpu.h"


/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define USB_LDD_PRPH_BASE_ADDRESS  0x40072000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define USB_LDD_Init_METHOD_ENABLED
#define USB_LDD_Deinit_METHOD_ENABLED
#define USB_LDD_SetEventMask_METHOD_ENABLED
#define USB_LDD_GetEventMask_METHOD_ENABLED
#define USB_LDD_Enable_METHOD_ENABLED
#define USB_LDD_Disable_METHOD_ENABLED
#define USB_LDD_DeviceGetUsbStatus_METHOD_ENABLED
#define USB_LDD_DeviceSetUsbStatus_METHOD_ENABLED
#define USB_LDD_DeviceSetAddress_METHOD_ENABLED
#define USB_LDD_DeviceAssertResume_METHOD_ENABLED
#define USB_LDD_DeviceInitEndpoint_METHOD_ENABLED
#define USB_LDD_DeviceDeinitEndpoint_METHOD_ENABLED
#define USB_LDD_DeviceStallEndpoint_METHOD_ENABLED
#define USB_LDD_DeviceUnstallEndpoint_METHOD_ENABLED
#define USB_LDD_DeviceReadSetupData_METHOD_ENABLED
#define USB_LDD_DeviceSendData_METHOD_ENABLED
#define USB_LDD_DeviceRecvData_METHOD_ENABLED
#define USB_LDD_DeviceGetTransferStatus_METHOD_ENABLED
#define USB_LDD_DeviceCancelTransfer_METHOD_ENABLED
#define USB_LDD_HostGetPortState_METHOD_ENABLED
#define USB_LDD_HostSetPortState_METHOD_ENABLED
#define USB_LDD_HostGetFrameNumber_METHOD_ENABLED
#define USB_LDD_HostGetMicroFrameNumber_METHOD_ENABLED
#define USB_LDD_HostOpenPipe_METHOD_ENABLED
#define USB_LDD_HostClosePipe_METHOD_ENABLED
#define USB_LDD_HostSendSetup_METHOD_ENABLED
#define USB_LDD_HostSendData_METHOD_ENABLED
#define USB_LDD_HostRecvData_METHOD_ENABLED
#define USB_LDD_HostGetTransferStatus_METHOD_ENABLED
#define USB_LDD_HostCancelTransfer_METHOD_ENABLED
#define USB_LDD_OtgRegisterDevice_METHOD_ENABLED
#define USB_LDD_OtgRegisterHost_METHOD_ENABLED
#define USB_LDD_OtgCmd_METHOD_ENABLED
#define USB_LDD_SetSignal_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define USB_LDD_OnDeviceReset_EVENT_ENABLED
#define USB_LDD_OnDeviceSpeedDetect_EVENT_ENABLED
#define USB_LDD_OnDeviceSuspend_EVENT_ENABLED
#define USB_LDD_OnDeviceResume_EVENT_ENABLED
#define USB_LDD_OnDeviceSetupPacket_EVENT_ENABLED
#define USB_LDD_OnDeviceError_EVENT_ENABLED
#define USB_LDD_OnHostDeviceDeattach_EVENT_ENABLED
#define USB_LDD_OnHostResetRecovery_EVENT_ENABLED
#define USB_LDD_OnHostResumeRecovery_EVENT_ENABLED
#define USB_LDD_OnHostError_EVENT_ENABLED
#define USB_LDD_OnOtgDevice_EVENT_ENABLED
#define USB_LDD_OnOtgHost_EVENT_ENABLED
#define USB_LDD_OnOtgStateChange_EVENT_ENABLED
#define USB_LDD_OnSignalChange_EVENT_ENABLED

/* Driver mode */
#define USB_LDD_MODE_OTG

LDD_TDeviceData * USB_LDD_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_Init (component USB_LDD)
**
**     Description :
**         Initializes USB device. Allocates memory for the device data
**         structure, interrupts, pins, etc. This method doesn't enable
**         device pull-up. Use Enable() method to enable device pull-up.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void USB_LDD_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_Deinit (component USB_LDD)
**
**     Description :
**         Disables and deinitializes the device and frees the device
**         data structure memory.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError USB_LDD_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask);
/*
** ===================================================================
**     Method      :  USB_LDD_SetEventMask (component USB_LDD)
**
**     Description :
**         Enables/disables event(s). The events contained within the
**         mask are enabled. Events not contained within the mask are
**         disabled. Pair method to GetEventMask().
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EventMask       - Mask of events to enable.
**     Returns     :
**         ---             - Return value:
**                           ERR_OK
**                           ERR_PARAM_MASK - Invalid mask.
**                           ERR_DISABLED - Device is disabled.
** ===================================================================
*/

LDD_TEventMask USB_LDD_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_GetEventMask (component USB_LDD)
**
**     Description :
**         Returns current events mask. Pair method to SetEventMask().
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Current event mask.
** ===================================================================
*/

LDD_TError USB_LDD_Enable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_Enable (component USB_LDD)
**
**     Description :
**         Enables the USB device (PHY, SIE). Enables device's DP(DM)
**         pull-up.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - 
** ===================================================================
*/

LDD_TError USB_LDD_Disable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_Disable (component USB_LDD)
**
**     Description :
**         Disabled device's DP(DM) pull-up. Disables PHY, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - 
** ===================================================================
*/

LDD_TError USB_LDD_DeviceGetUsbStatus(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceGetUsbStatus (component USB_LDD)
**
**     Description :
**         Returns the status of the object (e.g. endpoint). This
**         method is intended to be used in the standard USB
**         'GetStatus' request handler.
**         The object is described by the command (CmdStatusPtr
**         parameter) and by the id (Id parameter). 
**         The supported commands are:
**         [1) LDD_USB_CMD_GET_EP_STATUS] - Fills the memory addressed
**         by the CmdStatusPtr parameter by the current endpoint XXX
**         status (where XXX = Id parameter value) .
**         Format of the returned status is defined in the USB
**         specification 2.0, figure 9.6.
**         The LDD_USB_CMD_EP_STATUS_HALT_MASK constant can be used to
**         get endpoint status from the returned value.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Id              - Id. (E.g endpoint address for endpoint
**                           status, ...)
**                           The Id parameter value has the same format
**                           as wIndex parameter in the setup data
**                           packet - see USB specification.
**       * CmdStatusPtr    - Pointer to the uint16_t
**                           in/out variable. This variable must
**                           contains requested command before the
**                           method is called and contains requested
**                           status after the method returns.
**                           The supported command are:
**                           LDD_USB_CMD_GET_EP_STATUS
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
**                           ERR_PARAM_ADDRESS - No such object (e.g.
**                           endpoint doesn't exists or is not enabled
**                           by the host). Note: The 'Id' parameter
**                           check is always enabled in order to
**                           simplify implementation of the standard USB
**                           GetStatus request handler.
**                           ERR_FAILED - Command not supported for
**                           current object setting (e.g. STALL feature
**                           is not supported for isochronous endpoints).
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - The command cannot be accomplished
**                           in XXX <device state>.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceSetUsbStatus(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSetUsbStatus (component USB_LDD)
**
**     Description :
**         Sets the status(feature) of the object (e.g. endpoint). This
**         method is intended to be used in the standard USB
**         ClearFeature/SetFeature request handler.
**         The object is described by the command (Cmd parameter) and
**         by the id (Id parameter). 
**         The supported commands are:
**         [LDD_USB_CMD_SET_EP_HALT_FATURE] - Sets HALT feature for
**         endpoint XXX (where XXX = Id parameter value).
**         [LDD_USB_CMD_CLR_EP_HALT_FATURE] - Clears HALT feature for
**         endpoint XXX (where XXX = Id parameter value).
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Id              - Id. (E.g endpoint address for endpoint
**                           status, ...)
**                           The Id parameter value has the same format
**                           as wIndex parameter in the setup data
**                           packet - see USB specification.
**         Cmd             - Command. Supported commands are:
**                           LDD_USB_CMD_SET_EP_HALT_FATURE
**                           LDD_USB_CMD_CLR_EP_HALT_FATURE
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
**                           ERR_PARAM_ADDRESS - No such object (e.g.
**                           endpoint doesn't exists or is not enabled
**                           by the host). Note: The 'Id' parameter
**                           check is always enabled in order to
**                           simplify implementation of the standard USB
**                           GetStatus request handler.
**                           ERR_FAILED - Command not supported for
**                           current object setting (e.g. STALL feature
**                           is not supported for isochronous endpoints).
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - The command cannot be accomplished
**                           in XXX <device state>.
** ===================================================================
*/

void USB_LDD_DeviceSetAddress(LDD_TDeviceData *DeviceDataPtr, uint8_t Address);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSetAddress (component USB_LDD)
**
**     Description :
**         Sets new device address. Address must be in range 0-127 but
**         no check is performed.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Address         - New device address.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError USB_LDD_DeviceAssertResume(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceAssertResume (component USB_LDD)
**
**     Description :
**         Starts Remote wake-up signaling. Remote wake up signaling is
**         stopped automatically (by the HW or explicitly by the SW).
**         [Note:] Resume signaling can be started only if device is in
**         suspend state more then 5 ms (Device state =
**         LDD_USB_DEVICE_SUSPENDED_RESUME_READY).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - The command is not supported in
**                           XXX <device state>.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceInitEndpoint(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceInitEndpoint (component USB_LDD)
**
**     Description :
**         Initializes endpoint according to the values in the
**         <standard Endpoint descriptor> and in the flags parameter.
**         As soon as the ERR_OK is returned the endpoint can be used
**         to transmit data. To initialize endpoint 0 you can create
**         Endpoint descriptor for EP0 or you can use the <standard
**         Device descriptor>.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * EpDescriptorPtr - Pointer to
**                           standard Endpoint descriptor structure
**                           pointer. To initialize EP0 you can use
**                           pointer to the standard Device descriptor
**                           structure.
**         Flags           - Additional EP properties. 
**                           For Bulk/Interrupt transfer types:
**                           0 = no ZLT,  1 = ZLT
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the HW.
**                           ERR_PARAM_TYPE - Requested transfer is not
**                           supported by the HW for given address and
**                           direction.
**                           ERR_PARAM_SIZE - Requested max. packet size
**                           is not supported by the HW.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - Device is not in enabled <state>.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceDeinitEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceDeinitEndpoint (component USB_LDD)
**
**     Description :
**         Deinitializes EP and disables it in the HW. For control EP
**         both directions are deinitialized. All pending transfers are
**         aborted and callback functions are called, if enabled.
**         If the device is not in enabled <state> the method returns
**         ERR_USB_DEVICE_XXX error code.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the HW.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state. - Device is not in enabled <state>.
** ===================================================================
*/

void USB_LDD_DeviceStallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceStallEndpoint (component USB_LDD)
**
**     Description :
**         Sets STALL feature for endpoint.
**         Note: No parameters and endpoint state are checked. The
**         <DeviceSetUsbStatus()> method provides same functionality
**         with state and parameter checking.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     Returns     : Nothing
** ===================================================================
*/

void USB_LDD_DeviceUnstallEndpoint(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceUnstallEndpoint (component USB_LDD)
**
**     Description :
**         Clears STALL feature for endpoint.
**         Note: No parameters and endpoint state are checked. The
**         <DeviceSetUsbStatus()> method provides same functionality
**         with state and parameter checking.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     Returns     : Nothing
** ===================================================================
*/

void USB_LDD_DeviceReadSetupData(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceReadSetupData (component USB_LDD)
**
**     Description :
**         Fills the given buffer with last received setup data packet
**         for given EP.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**       * SDPPtr          - Address of the buffer for setup data.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError USB_LDD_DeviceSendData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceSendData (component USB_LDD)
**
**     Description :
**         This method prepares data to be sent to the HOST (transfer
**         request). The transfer request is queued into the internal
**         queue of requests for given endpoint. Some devices have HW
**         queues. On other devices the queue can be emulated by the SW
**         or no queue is implemented (property Max. queue size = 1 and
**         cannot be modified). Size of queue can be defined for each
**         endpoint at the design time. As soon as the host sends IN
**         token data from the request on the queue head are sent to
**         the HOST. This process is repeated until all data are
**         transferred or transfer is cancelled. If the transfer is
**         done the request is removed from the queue and next request
**         becomes ready for transmission, if queue not empty.
**         Each transfer is described by the <transfer descriptor (TD)>
**         structure.
**         The first item of the TD is the <Head> structure. The Head
**         structure item is required and contains these items:
**         _/[EpNum]/_ - endpoint number.
**         _/[BufferPtr]/_ - buffer address.
**         _/[BufferSize]/_ - buffer size.
**         _/[Flags]/_ - flags:
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_ZLT/_ - this flag can be used
**         to force zero-length termination(ZLT) of the transfer.
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see below.
**         The following items of the TD are optional:
**         _/[TransmittedDataSize]/_ - this item is set by the driver
**         and contains actual number of transmitted data.
**         _/[CallbackFnPtr]/_ - pointer to the callback function
**         called (if not NULL) after the transfer is done.
**         _/[ParamPtr]/_ - parameter passed to the callback function.
**         The optional items can be used to track the status of the
**         transfer request and are used(accessed) by the driver only
**         if <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to
**         '1' in the Head.Flags item. In this case the TD must be
**         accessible from the ISR and may be freed only if the
**         transfer is done (TransfereState item must be lower then
**         LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be
**         cancelled by the <DeviceCancelTransfer()> method.
**         Transfer is done if all data are sent. If data size = max.
**         packet size and ZLT is enabled the zero length packet is
**         send as the last packet of the transfer.
**         [Note:]For control transfer the transmitted data size
**         truncated (if necessary) by the driver to the size requested
**         by the host (wLength item of setup data packet) and the ZLT
**         is added if needed. Note: On some MCUs (e.g. Kinetis) must
**         be the address of the data buffer 4 bytes aligned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * TransferDescriptorPtr -
**                           Pointer to the <transfer descriptor (TD)>
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
**                           ERR_NOTAVAIL - Endpoint is not <initialized>.
**                           ERR_FAILED - Endpoint is STALLed.
**                           ERR_QFULL - Endpoint transfer queue is full.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceRecvData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceRecvData (component USB_LDD)
**
**     Description :
**         This method prepares buffer for data sent by the HOST
**         (transfer request). The transfer request is queued into the
**         internal queue of requests for given endpoint. Some devices
**         have HW queues. On other devices the queue can be emulated
**         by the SW or no queue is implemented (property Max. queue
**         size = 1 and cannot be modified). Size of queue can be
**         defined for each endpoint at the design time. Data from the
**         HOST are stored into the provided buffer. If the transfer is
**         done the request is removed from the queue and next request
**         becomes ready for transmission, if queue not empty.
**         Each transfer is described by the <transfer descriptor (TD)>
**         structure.
**         The first item of the TD is the <Head> structure. The Head
**         structure item is required and contains these items:
**         _/[EpNum]/_ - endpoint number.
**         _/[BufferPtr]/_ - buffer address.
**         _/[BufferSize]/_ - buffer size.
**         _/[Flags]/_ - flags:
**         _/LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM/_ - see below.
**         The following items of the TD are optional:
**         _/[TransmittedDataSize]/_ - this item is set by the driver
**         and contains actual number of transmitted data.
**         _/[CallbackFnPtr]/_ - pointer to the callback function
**         called (if not NULL) after the transfer is done.
**         _/[ParamPtr]/_ - parameter passed to the callback function.
**         The optional items can be used to track the status of the
**         transfer request and are used(accessed) by the driver only
**         if <LDD_USB_DEVICE_TRANSFER_FLAG_EXT_PARAM> flag is set to
**         '1' in the Head.Flags item. In this case the TD must be
**         accessible from the ISR and may be freed only if the
**         transfer is done (TransfereState item must be lower then
**         LDD_USB_TRANSFER_QUEUED). Pending transfer requests can be
**         cancelled by the <DeviceCancelTransfer()> method.
**         Transfer is done if all requested data are received or
**         short(zero length) packet is received. Note: On some MCUs (e.
**         g. Kinetis) must be the address of the data buffer 4 bytes
**         aligned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * TransferDescriptorPtr -
**                           Pointer to the <transfer descriptor (TD)>
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
**                           ERR_NOTAVAIL - Endpoint is not <initialized>.
**                           ERR_FAILED - Endpoint is STALLed.
**                           ERR_QFULL - Endpoint transfer queue is full.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceGetTransferStatus(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceGetTransferStatus (component USB_LDD)
**
**     Description :
**         This method returns current status of the endpoint. If
**         endpoint is idle/busy/stalled, the
**         ERR_IDLE/ERR_BUSY/ERR_FAILED is return. Please note that
**         these error codes reports endpoint status, not error of the
**         method.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
**                           ERR_NOTAVAIL - Endpoint is not <initialized>.
**                           ERR_FAILED - Endpoint is STALLed.
**                           ERR_BUSY - Endpoint transfer is
**                           transmitting data.
**                           ERR_IDLE - Endpoint is idle.
** ===================================================================
*/

LDD_TError USB_LDD_DeviceCancelTransfer(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir);
/*
** ===================================================================
**     Method      :  USB_LDD_DeviceCancelTransfer (component USB_LDD)
**
**     Description :
**         Cancels all pending transfers in the given EP queue.
**         Transfer status is updated and callback function is called
**         for each cancelled transfer request if enabled in the
**         <SendData> or <RecvData> methods.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EpNum           - Endpoint number.
**         EpDir           - Endpoint direction, 0 = OUT(Rx), 1 for
**                           IN(Tx).
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_USB_DEVICE_XXX where XXX is name of the
**                           state - Device is not in enabled <state>.
**                           ERR_PARAM_ADDRESS - Endpoint of requested
**                           address and direction is not supported by
**                           the driver.
** ===================================================================
*/

LDD_USB_Host_TState USB_LDD_HostGetPortState(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostGetPortState (component USB_LDD)
**
**     Description :
**         Returns port <state>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Returned value:
**                           LDD_USB_HOST_DISABLED - Host mode is
**                           disabled (by the user or by the clock
**                           configuration).
**                           LDD_USB_HOST_DISABLED_BY_OTG - Host mode is
**                           disabled by the OTG driver.
**                           LDD_USB_HOST_PORT_POWERED_OFF - Port is
**                           powered-off.
**                           LDD_USB_HOST_PORT_DISCONNECTED -  No device
**                           is connected.
**                           LDD_USB_HOST_PORT_DISABLED - Device is
**                           connected to the port.
**                           LDD_USB_HOST_PORT_RESETING - Port generates
**                           reset signaling.
**                           LDD_USB_HOST_PORT_RESET_RECOVERING - Port
**                           waits 10 ms for reset recovery.
**                           LDD_USB_HOST_PORT_ENABLED - Device is
**                           connected, reset and ready to use.
**                           LDD_USB_HOST_PORT_SUSPENDED - Port is
**                           suspended.
**                           LDD_USB_HOST_PORT_RESUME_READY - Port is
**                           ready to generate resume signaling.
**                           LDD_USB_HOST_PORT_RESUMING - Port generates
**                           resume signaling.
**                           LDD_USB_HOST_PORT_RESUME_RECOVERING - Port
**                           waits 10 ms for resume recovery.
** ===================================================================
*/

LDD_TError USB_LDD_HostSetPortState(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPortControlCmd Cmd);
/*
** ===================================================================
**     Method      :  USB_LDD_HostSetPortState (component USB_LDD)
**
**     Description :
**         This method sets root port (bus) states. Supported commands
**         are:
**         [LDD_USB_HOST_PORT_CMD_POWER_OFF]
**         Deactivates VBUS enable signal and sets the port to the
**         POWER_OFF state, closes all pipes and discards all pending
**         transfers.
**         [LDD_USB_HOST_PORT_CMD_POWER_ON]
**         Activates VBUS enable signal and sets the port to the
**         DISCONNECTED state.
**         Port must be in the POWERED_OFF state to be power on.
**         [LDD_USB_HOST_PORT_CMD_RESET]
**         Sets the port to the RESETING state, starts the reset
**         signaling and closes all pipes and discards all pending
**         transfers. As soon as the reset interval is elapsed the
**         reset signaling will be stopped, the port state will be
**         change to the RESET_RECOVERING, and the reset recovery
**         interval will begin. After the reset recovery interval is
**         elapsed, the port state will be changed to the ENABLED state.
**         In the ENABLED state the port can used to transfer data.
**         Device must be connected (ports state > DISCONNECTED) before
**         reset can be started.
**         [LDD_USB_HOST_PORT_CMD_DISABLE]
**         Sets the port to the DISABLED state and closes all pipes and
**         discards all pending transfers. This state can be changed
**         only by performing the bus reset(transfer to the ENABLED
**         state), by disconnecting the device (transfer to the
**         DISCONNECT state) or by the powering-off the bus (transfer
**         to the POWERED_OFF state).
**         [LDD_USB_HOST_PORT_CMD_SUSPEND]
**         Suspends port (state = SUSPENDED). No transaction should be
**         pending before this method is called.
**         Port must be in the LDD_USB_HOST_PORT_ENABLED state to be
**         suspend.
**         [LDD_USB_HOST_PORT_CMD_RESUME]
**         Sets the port to the RESUMING state and starts the resume
**         signaling. After the resume interval is elapsed, the port
**         state will be changed to the ENABLED state. In the ENABLED
**         state the port can used to transfer data.
**         Port must be in the LDD_USB_HOST_PORT_RESUME_READY state
**         before resume can start.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Cmd             - Command
**     Returns     :
**         ---             - Return value: ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
**                           ERR_USB_HOST_XXX where XXX is name of the
**                           state - Requested operation cannot be is
**                           done in current <state>.
** ===================================================================
*/

uint16_t USB_LDD_HostGetFrameNumber(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostGetFrameNumber (component USB_LDD)
**
**     Description :
**         This method returns current frame number.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Frame number.
** ===================================================================
*/

uint8_t USB_LDD_HostGetMicroFrameNumber(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostGetMicroFrameNumber (component USB_LDD)
**
**     Description :
**         This method returns current microframe number.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Microframe number.
** ===================================================================
*/

LDD_TError USB_LDD_HostOpenPipe(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeInitParamsPtr, LDD_USB_Host_TPipeHandle **PipeHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostOpenPipe (component USB_LDD)
**
**     Description :
**         Initializes pipe according to the values in the endpoint
**         descriptor and in the flags parameter. Allocate bandwidth
**         for periodic transfer types.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeInitParamsPtr - Pointer to the
**                           structure containing pipe configuration
**                           data.
**       * PipeHandlePtr   - Pointer to pipe handle
**                           variable.
**     Returns     :
**         ---             - Return value:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_PARAM_ID - Requested transfer is not
**                           supported by the HW .
**                           ERR_OVERFLOW - Not enough frame time for
**                           periodic transfer type.
**                           ERR_OK - OK
** ===================================================================
*/

LDD_TError USB_LDD_HostClosePipe(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostClosePipe (component USB_LDD)
**
**     Description :
**         Deinitializes EP and disables it in the HW. For control EP
**         both directions are deinitialized. All pending transfers are
**         aborted and callback functions are called, if enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeHandlePtr   - Pipe handle
**     Returns     :
**         ---             - Return value:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_OK - OK
** ===================================================================
*/

LDD_TError USB_LDD_HostSendSetup(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostSendSetup (component USB_LDD)
**
**     Description :
**         This method prepares control transfer. All transfer phases
**         are handled by this method.
**         Note: On some MCUs (e.g. Kinetis) must be the address of the
**         data buffer 4 bytes aligned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeHandlePtr   - Pipe handle.
**       * TransferDescriptorPtr -
**                           Pointer to transfer descriptor.
**       * TransferHandlePtr - Pointer to
**                           transfer handle variable.
**     Returns     :
**         ---             - Return value: ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_ADDRESS - Transfer descriptor
**                           pointer or Pipe descriptor pointer is NULL.
**                           ERR_PARAM_DATA - Pointer to the Setup data
**                           packet is NULL.
**                           ERR_FAILED - Pipe is closed.
**                           ERR_USB_HOST_XXX where XXX is name of the
**                           state - Port is not in enabled <state>.
** ===================================================================
*/

LDD_TError USB_LDD_HostSendData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostSendData (component USB_LDD)
**
**     Description :
**         This method prepares data to be sent to the device.
**         Note: On some MCUs (e.g. Kinetis) must be the address of the
**         data buffer 4 bytes aligned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeHandlePtr   - Pipe handle.
**       * TransferDescriptorPtr -
**                           Pointer to transfer descriptor.
**       * TransferHandlePtr - Pointer to
**                           transfer handle variable.
**     Returns     :
**         ---             - Return value: ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_ADDRESS - Transfer descriptor
**                           pointer or Pipe handle is NULL.
**                           ERR_FAILED - Pipe is closed.
**                           ERR_USB_HOST_XXX where XXX is name of the
**                           state - Port is not in enabled <state>.
** ===================================================================
*/

LDD_TError USB_LDD_HostRecvData(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostRecvData (component USB_LDD)
**
**     Description :
**         This method prepares buffer for data sent by the device.
**         Note: On some MCUs (e.g. Kinetis) must be the address of the
**         data buffer 4 bytes aligned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeHandlePtr   - Pipe handle.
**       * TransferDescriptorPtr -
**                           Pointer to transfer descriptor.
**       * TransferHandlePtr - Pointer to
**                           transfer handle variable.
**     Returns     :
**         ---             - Return value: ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_ADDRESS - Transfer descriptor
**                           pointer or Pipe handle is NULL.
**                           ERR_FAILED - Pipe is closed.
**                           ERR_USB_HOST_XXX where XXX is name of the
**                           state - Port is not in enabled <state>.
** ===================================================================
*/

LDD_USB_TTransferState USB_LDD_HostGetTransferStatus(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TTransferHandle *TransferHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostGetTransferStatus (component USB_LDD)
**
**     Description :
**         This method returns transfer status.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * TransferHandlePtr - Pointer to
**                           transfer handle return by Send/Recv methods
**                           in the 'TransferDescriptorPtr' variable.
**     Returns     :
**         ---             - Transfer status.
** ===================================================================
*/

LDD_TError USB_LDD_HostCancelTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeHandlePtr);
/*
** ===================================================================
**     Method      :  USB_LDD_HostCancelTransfer (component USB_LDD)
**
**     Description :
**         This method cancels all pending transfer requests in the
**         given EP queue. Callback function is called ( if enabled)
**         for each cancelled transfer request.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * PipeHandlePtr   - Pipe handle
**     Returns     :
**         ---             - Return value: ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_ADDRESS - Transfer descriptor
**                           pointer or Pipe handle is NULL.
**                           ERR_FAILED - Pipe is closed.
**                           ERR_USB_HOST_XXX where XXX is name of the
**                           state - Port is not in enabled <state>.
** ===================================================================
*/

LDD_TError USB_LDD_OtgRegisterDevice(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_OtgRegisterDevice (component USB_LDD)
**
**     Description :
**         Registers higher level driver for Device mode. As soon as
**         the Device mode is enabled by the OTG state machine the
**         OnDeviceXXX() events will be called. The UserDataPtr value
**         will be passed as the first parameter of the OnDeviceXXX()
**         event.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter to
**                           all OnDeviceXXX events.
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
** ===================================================================
*/

LDD_TError USB_LDD_OtgRegisterHost(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  USB_LDD_OtgRegisterHost (component USB_LDD)
**
**     Description :
**         Registers higher level driver for Host mode. As soon as the
**         host mode is enabled by the OTG state machine the OnHostXXX()
**         events will be called. The UserDataPtr value will be passed
**         as the first parameter of the OnHostXXX() event.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter to
**                           all OnHostXXX events.
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
** ===================================================================
*/

LDD_TError USB_LDD_OtgCmd(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd);
/*
** ===================================================================
**     Method      :  USB_LDD_OtgCmd (component USB_LDD)
**
**     Description :
**         This method sets "bus request" and "bus drop" user signal
**         states. For more information see OTG specification.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Cmd             - Command
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component is disabled.
**                           ERR_PARAM_COMMAND - Unknown command.
** ===================================================================
*/

LDD_TError USB_LDD_SetSignal(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue);
/*
** ===================================================================
**     Method      :  USB_LDD_SetSignal (component USB_LDD)
**
**     Description :
**         This method sets input signals  (VBUS detect, VBUS
**         overcurrent, ID, VBUS valid, Session valid, B session end)
**         states. 
**         The state machine use input signal to change its internal
**         state. In some implementations the signals are handled
**         internally (e.g. voltage comparators are integrated on the
**         chip) or are connected to the pin. This method can be used
**         in the case of external HW providing signals state.
**         Read only - This method is enabled only if at least one
**         "input pin" property (e.g. VBUS detect) selects "XXX_signal"
**         value and is disabled if no signal is used.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         SignalMask      - Mask of signal to change.
**                           Possible values:
**                           LDD_USB_DEVICE_VBUS_DETECT_PIN - VBUS
**                           detect signal mask
**                           LDD_USB_HOST_VBUS_OVERCURRENT_PIN - VBUS
**                           overcurrent signal mask
**                           LDD_USB_OTG_ID_PIN - ID signal mask
**                           LDD_USB_OTG_VBUS_VALID_PIN - VBUS valid
**                           signal mask
**                           LDD_USB_OTG_SESSION_VALID_PIN - SESSION
**                           valid signal mask
**                           LDD_USB_OTG_B_SESSION_END_PIN - B SESSION
**                           end signal mask
**         SignalValue     - Requested signal value.
**     Returns     :
**         ---             - Return value:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Signal mask is not valid.
**                           (signal is not selected in the pin
**                           configuration)
** ===================================================================
*/

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(USB_LDD_USB_Interrupt);
/*
** ===================================================================
**     Method      :  USB_LDD_USB_Interrupt (component USB_LDD)
**
**     Description :
**         USB interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END USB_LDD. */

#endif
/* ifndef __USB_LDD_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
