
{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\USB_OTG_STACKAbstract.Inc
CONFIG_ONLY_DESC_SIZE=09
DEVICE_DESCRIPTOR_SIZE=12
Description_MAX3353_ReadReg=Read data from MAX3353 register
Description_MAX3353_WriteReg=Write data to MAX3353 register
Description_OTG_MAX3353_INT_PIN_OnPortEvent=Called if defined event on any pin of the port occured. OnPortEvent event and GPIO interrupt must be enabled. See SetPortEventMask() and GetPortEventMask() methods. This event is enabled if <a href="GPIO_LDDProperties.html#IntService">Interrupt service/event</a> is Enabled and disabled if <a href="GPIO_LDDProperties.html#IntService">Interrupt service/event</a> is Disabled. The event services the event of the inherited component and eventually invokes other events.
Description_OTG_MAX3353_OnMasterBlockReceived=This event is called when I2C is in master mode and finishes the reception of the data successfully. This event is not available for the SLAVE mode and if MasterReceiveBlock is disabled. The event services the event of the inherited component and eventually invokes other events.
Description_OTG_MAX3353_OnMasterBlockSent=This event is called when I2C in master mode finishes the transmission of the data successfully. This event is not available for the SLAVE mode and if MasterSendBlock is disabled.  The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceError=Called after the Error is detected, OnError() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceReset=Called after the reset signal is detected on the USB bus, OnDeviceReset() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. All pending transfers are cancelled and all EPs are disabled before this event is called.  Device address is set to "0".  The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceResume=Called after the resume signaling is done, OnDeviceResume() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSetupPacket=Called after the setup packet is received into the internal buffer, OnSetupPacket() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. Use the method GetSetupPacket() to copy setup packet to the user buffer. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSpeedDetect=Called after the device detects bus speed, OnBusSpedDetect() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. EP 0 should be enabled and configured after the USB speed is known. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnDeviceSuspend=Called after the suspend condition is met, OnDeviceSuspend() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostDeviceDeattach=Called after the device has been successfully attached (see OnResetRecovery() event) and the deattach condition is detected,  OnDeattach() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostError=Called after the Error is detected, OnError() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostResetRecovery=Called 10 ms later (reset recovery time) after the reset signaling is stopped, OnResetRecovery() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. As soon as this event is invoked attached device can be accessed by the SendXX()/RecvXX() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnHostResumeRecovery=Called 10 ms later (resume recovery time) after the resume signaling is stopped, OnResumeRecovery() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. As soon as this event is invoked attached device can be accessed by the SendXX()/RecvXX() methods. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnOtgDevice=Called to inform the user that device mode is being enabled or disabled.This event is enabled only if OTG mode is enabled. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnOtgHost=Called to inform the user that host mode is being enabled or disabled.This event is enabled only if OTG mode is enabled. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnOtgStateChange=Called after signaling started by the OtgSetState() method is done, OnOtgStateChange() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods. Note: The new state can be some as previous state. This can be caused by the negative response from the device on the opposite side of the USB cable. E.g unsuccessful SRP request. E.g. B device performs session request and becomes A device. The event services the event of the inherited component and eventually invokes other events.
Description_USB_LDD_OnSignalChange=Called after the output signals (DP+- pull-up,DP+- pull-down, VBUS enable, VBUS charge, VBUS discharge) state have changed , OnSignalStateChange() event is enabled and USB module is enabled. See SetEventMask() and GetEventMask() methods.The state machine changed these signals. In some implementations the signals are handled internally(e.g. internal pull up/down) or are connected to the pin. This event can be used in the case of external HW providing requested functionality.Read only - This event is enabled only if at least one "output pin" property (e.g. VBUS enable  selects "XXX_signal" value and is disabled if no signal is used. The event services the event of the inherited component and eventually invokes other events.
Description__usb_event_set=
Description__usb_host_ch9_set_configuration=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
Description__usb_host_ch9_set_feature=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
DriverAuthor=Author
DriverDate=06.01.2012
DriverVersion=01.00
EndOfInterface=
Endpoint_suffix=0_0
Interface_suffix=0
KINETIS=
ParCurrentSpeed=
ParEpNum=
ParErrorCode=
ParErrorSource=
ParRegAddres=
ParRegVal=
ParSignalMask=
ParSignalValue=
ParTDevDataPtr=
ParUSBDevDataPtr=
ParUserDataPtr=
ParVarAddress=
Para_bus_drop=
Para_bus_req=
Paraddress=
Parall=
Paralt_interface=
Paralternate=
Paranchor_ptr=
Parb_hnp_en=
Parbitfield=
Parbitmask=
Parbm_attributes=
Parbmrequesttype=
Parbrequest=
Parbuff_ptr=
Parbuffer=
Parbuffer_ptr=
Parbuffer_size=
Parbuflen=
Parcallback=
Parcallback_param=
Parccs_ptr=
Parclass_callback=
Parclass_intf_handle=
Parclass_intf_ptr=
Parcom_ptr=
Parcomponent=
Parconfig=
Parconfig_no=
Parconfig_val=
Parcontroller_ID=
Parcount=
Pardata=
Pardesc_index=
Pardesc_type=
Pardescriptor=
Pardev_handle=
Pardevice_handle=
Pardevice_number=
Pardevnum=
Pardevreq=
Pardirection=
Parenable=
Parendpoint_number=
Parendpoint_type=
Parep_num=
Parep_ptr=
Parevent=
Parevent_code=
Parevent_endpoint=
Parfeature=
Parflag=
Parframe_list_size=
Parhandle=
Parhci_handle=
Parhost_handle=
Parhub_no=
Parindex=
Parinfo_table_ptr=
Parinit_struct=
Parinterface=
Parintf=
Parintf_alt=
Parintf_endpt=
Parintf_handle=
Parlang_id=
Parlen=
Parmax_packet_size=
Parnew_state=
Parnumber_of_endpoints=
Parodd=
Parotg_handle=
Parother_req_callback=
ParpTD=
Parparam=
Parpbs_ptr=
Parpipe=
Parpipe_direction=
Parpipe_handle=
Parpipe_init_params_ptr=
Parpipe_type=
Parport_no=
Parport_nr=
Parreq_type=
Parservice=
Parsetting=
Parsetup_packet=
Parsize=
Parspeed=
Parstart_addr=
Parstatus=
Parstr_num=
Particks=
Partr_params_ptr=
Partr_ptr=
Partransfer_number=
Partype=
Partype_index=
Paruint_8=
Parval=
Parvalue=
Parwindex=
Parwlength=
Parwvalue=
Product_ID_high=1
Product_ID_low=1
Release_num_high=0
Release_num_low=2
RetVal=
Settings=Common\USB_OTG_STACKSettings.Inc
String_cur_index=1
USB_CONFIG_DESCRIPTOR=02
USB_DESC_CONST=
USB_DEVICE_DESCRIPTOR=01
Vendor_ID_high=21
Vendor_ID_low=162
_AlternateSetting=0
_Attributes=3
_Configuration_Index=0
_Configuration_Value=1
_DESC_ENDPOINT_COUNT=1
_EndpointAddress=129
_EndpointDirection=1
_EndpointMaxPacketSize=8
_EndpointMaxPacketSize_high=0
_EndpointMaxPacketSize_low=8
_EndpointNumber=1
_Gen_desc_en=0
_InterfaceClass=3
_InterfaceNumber=0
_InterfaceProtocol=1
_InterfaceSubClass=1
_Interface_des_index=0
_Interval=10
_NumConfigurations=1
_NumEndpoints=1
_NumInterfaces=1
_OTG_en=1
_Synchronisation_Type=0
_Transfer_Type=3
_Usage_Type=0
_index=2
_index_gen=4
_max_str_des=4
str_des_cur_index=1
str_des_size_temp=54
wTotalLength=12

 LOCAL SYMBOLS (alphabet order)
-------------------------------
AlternateSetting0=0
Attributes=Self Powered
BeanVersion=01.027
CHG_BeanIsEnabled=yes
Class_Code0=3
Class_Code_Mask0=255
Class_ListMaxItem=0
Class_ListNumItems=1
Class_Name0=hid_keyboard
Common_Class=yes
Configuration_Index=0
Configuration_Value=1
DeviceName=usb_otg
DeviceType=USB_OTG_STACK
Device_Class=0
Device_Protocol=0
Device_SubClass=0
EndpointDirection0_0=IN
EndpointMaxPacketSize0_0=32
EndpointMaxPacketSize_int_iso0_0=8
EndpointNumber0_0=1
Endpoints_List0MaxItem=0
Endpoints_List0NumItems=1
Gen_desc_en=yes
InterfaceClass0=3
InterfaceNumber0=0
InterfaceProtocol0=1
InterfaceSubClass0=1
Interface_des_index0=0
Interfaces_ListMaxItem=0
Interfaces_ListNumItems=1
Interval0_0=10
LANGID=2308
LDD_Component=USB_LDD
MAX3353_GetUsbInputSignal=MAX3353_GetUsbInputSignal
MAX3353_GetUsbInputSignal_Hint=void usb_otg_MAX3353_GetUsbInputSignal(void);
MAX3353_GetUsbInputSignal_HintHint=
MAX3353_GetUsbInputSignal_HintHintLong=
MAX3353_Init=MAX3353_Init
MAX3353_Init_Hint=void usb_otg_MAX3353_Init(void);
MAX3353_Init_HintHint=Initialize MAX3353
MAX3353_Init_HintHintLong=Initialize MAX3353
MAX3353_SetUsbOutputSignal=MAX3353_SetUsbOutputSignal
MAX3353_SetUsbOutputSignal_Hint=void usb_otg_MAX3353_SetUsbOutputSignal(LDD_TPinMask SignalMask, LDD_TPinMask...
MAX3353_SetUsbOutputSignal_HintHint=
MAX3353_SetUsbOutputSignal_HintHintLong=
Manufacturer=1
Max3353_I2C=OTG_MAX3353
Max3353_INT_Pin=OTG_MAX3353_INT_PIN
MaxPacketSize=32
MaxPower=50
ModuleName=usb_otg
NumConfigurations=1
NumEndpoints0=1
NumInterfaces=1
OTG_en=no
Product=2
ProductID=257
Protocol_Code0=0
Protocol_Code_Mask0=0
SerialNumber=0
String0=FREESCALE SEMICONDUCTOR INC.
String1=USB HID OTG DEVICE PEx DEMO
String_desc_listMaxItem=1
String_desc_listNumItems=2
SubClass_Code0=0
SubClass_Code_Mask0=0
Synchronisation_Type0_0=No Synchonisation
Transfer_Type0_0=INTERRUPT
USB_Class_DeInit=USB_Class_DeInit
USB_Class_DeInit_Hint=uint_8 usb_otg_USB_Class_DeInit(uint_8 controller_ID);
USB_Class_DeInit_HintHint=De-initializes USB Class Module
USB_Class_DeInit_HintHintLong=De-initializes USB Class Module
USB_Class_Init=USB_Class_Init
USB_Class_Init_Hint=uint_8 usb_otg_USB_Class_Init(uint_8 controller_ID, USB_CLASS_CALLBACK...
USB_Class_Init_HintHint=Initializes USB Class Module
USB_Class_Init_HintHintLong=Initializes USB Class Module
USB_Class_Send_Data=USB_Class_Send_Data
USB_Class_Send_Data_Hint=uint_8 usb_otg_USB_Class_Send_Data(uint_8 controller_ID, uint_8 ep_num,...
USB_Class_Send_Data_HintHint=Used by Application to send Data on USB Bus if not suspended
USB_Class_Send_Data_HintHintLong=Used by Application to send Data on USB Bus if not suspended
Usage_Type0_0=Data Endpoint
Use_Hub=yes
Use_Poll=yes
VendorID=5538
_otg_max3353_enable_disable=_otg_max3353_enable_disable
_otg_max3353_enable_disable_Hint=void usb_otg__otg_max3353_enable_disable(bool enable);
_otg_max3353_enable_disable_HintHint=Enable/disable MAX3353
_otg_max3353_enable_disable_HintHintLong=Enable/disable MAX3353
_otg_max3353_get_interrupts=_otg_max3353_get_interrupts
_otg_max3353_get_interrupts_Hint=uint_8 usb_otg__otg_max3353_get_interrupts(void);
_otg_max3353_get_interrupts_HintHint=Read interrupts from MAX3353
_otg_max3353_get_interrupts_HintHintLong=Read interrupts from MAX3353
_otg_max3353_get_status=_otg_max3353_get_status
_otg_max3353_get_status_Hint=uint_8 usb_otg__otg_max3353_get_status(void);
_otg_max3353_get_status_HintHint=Get MAX3353 status
_otg_max3353_get_status_HintHintLong=Get MAX3353 status
_otg_max3353_set_VBUS=_otg_max3353_set_VBUS
_otg_max3353_set_VBUS_Hint=void usb_otg__otg_max3353_set_VBUS(bool enable);
_otg_max3353_set_VBUS_HintHint=Set VBUS for MAX3353
_otg_max3353_set_VBUS_HintHintLong=Set VBUS for MAX3353
_otg_max3353_set_pdowns=_otg_max3353_set_pdowns
_otg_max3353_set_pdowns_Hint=void usb_otg__otg_max3353_set_pdowns(uint_8 bitfield);
_otg_max3353_set_pdowns_HintHint=Set pull-downs for MAX3353
_otg_max3353_set_pdowns_HintHintLong=Set pull-downs for MAX3353
_usb_event_clear=_usb_event_clear
_usb_event_clear_Hint=uint_16 usb_otg__usb_event_clear(USB_EVENT_STRUCT_PTR event, uint_32 bitmask);
_usb_event_clear_HintHint=Clear value of event pointer
_usb_event_clear_HintHintLong=Clear value of event pointer
_usb_event_init=_usb_event_init
_usb_event_init_Hint=uint_16 usb_otg__usb_event_init(USB_EVENT_STRUCT_PTR event);
_usb_event_init_HintHint=Allocate event pointer, clear value and set event in valid state.
_usb_event_init_HintHintLong=Allocate event pointer, clear value and set event in valid state.
_usb_event_wait_ticks=_usb_event_wait_ticks
_usb_event_wait_ticks_Hint=uint_16 usb_otg__usb_event_wait_ticks(USB_EVENT_STRUCT_PTR event, uint_32...
_usb_event_wait_ticks_HintHint=This function returns the value USB_EVENT_SET when an event occurs, but...
_usb_event_wait_ticks_HintHintLong=This function returns the value USB_EVENT_SET when an event occurs, but timeout not support
_usb_host_cancel_transfer=_usb_host_cancel_transfer
_usb_host_cancel_transfer_Hint=USB_STATUS usb_otg__usb_host_cancel_transfer(_usb_host_handle hci_handle,...
_usb_host_cancel_transfer_HintHint=_usb_host_cancel_transfer is a non-blocking routine that causes a transfer to...
_usb_host_cancel_transfer_HintHintLong=_usb_host_cancel_transfer is a non-blocking routine that causes a transfer to be terminated.
_usb_host_ch9_clear_feature=_usb_host_ch9_clear_feature
_usb_host_ch9_clear_feature_Hint=USB_STATUS usb_otg__usb_host_ch9_clear_feature(_usb_device_instance_handle...
_usb_host_ch9_clear_feature_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_clear_feature_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_configuration=_usb_host_ch9_get_configuration
_usb_host_ch9_get_configuration_Hint=USB_STATUS usb_otg__usb_host_ch9_get_co...
_usb_host_ch9_get_configuration_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_configuration_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_descriptor=_usb_host_ch9_get_descriptor
_usb_host_ch9_get_descriptor_Hint=USB_STATUS usb_otg__usb_host_ch9_get_descriptor(_usb_device_instance_handle...
_usb_host_ch9_get_descriptor_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_descriptor_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_interface=_usb_host_ch9_get_interface
_usb_host_ch9_get_interface_Hint=USB_STATUS usb_otg__usb_host_ch9_get_interface(_usb_device_instance_handle...
_usb_host_ch9_get_interface_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_interface_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_get_status=_usb_host_ch9_get_status
_usb_host_ch9_get_status_Hint=USB_STATUS usb_otg__usb_host_ch9_get_status(_usb_device_instance_handle...
_usb_host_ch9_get_status_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_get_status_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_address=_usb_host_ch9_set_address
_usb_host_ch9_set_address_Hint=USB_STATUS usb_otg__usb_host_ch9_set_address(_usb_device_instance_handle...
_usb_host_ch9_set_address_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_address_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_descriptor=_usb_host_ch9_set_descriptor
_usb_host_ch9_set_descriptor_Hint=USB_STATUS usb_otg__usb_host_ch9_set_descriptor(_usb_device_instance_handle...
_usb_host_ch9_set_descriptor_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_descriptor_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_set_interface=_usb_host_ch9_set_interface
_usb_host_ch9_set_interface_Hint=USB_STATUS usb_otg__usb_host_ch9_set_interface(_usb_device_instance_handle...
_usb_host_ch9_set_interface_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_set_interface_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_ch9_synch_frame=_usb_host_ch9_synch_frame
_usb_host_ch9_synch_frame_Hint=USB_STATUS usb_otg__usb_host_ch9_synch_frame(_usb_device_instance_handle...
_usb_host_ch9_synch_frame_HintHint=Function to process standard device request in Chapter 9. See Table 9-3 p....
_usb_host_ch9_synch_frame_HintHintLong=Function to process standard device request in Chapter 9. See Table 9-3 p. 250 of USB 2.0 specification.
_usb_host_close_all_pipes=_usb_host_close_all_pipes
_usb_host_close_all_pipes_Hint=void usb_otg__usb_host_close_all_pipes(_usb_host_handle hci_handle);
_usb_host_close_all_pipes_HintHint=_usb_host_close_all_pipes routine removes the pipe from the open pipe list
_usb_host_close_all_pipes_HintHintLong=_usb_host_close_all_pipes routine removes the pipe from the open pipe list
_usb_host_close_pipe=_usb_host_close_pipe
_usb_host_close_pipe_Hint=USB_STATUS usb_otg__usb_host_close_pipe(_usb_host_handle hci_handle,...
_usb_host_close_pipe_HintHint=_usb_host_close_pipe routine removes the pipe from the open pipe list
_usb_host_close_pipe_HintHintLong=_usb_host_close_pipe routine removes the pipe from the open pipe list
_usb_host_driver_info_register=_usb_host_driver_info_register
_usb_host_driver_info_register_Hint=USB_STATUS usb_otg__usb_host_driver_info_register(_usb_host_handle...
_usb_host_driver_info_register_HintHint=Function to register user's desired-interfaces array of structs.
_usb_host_driver_info_register_HintHintLong=Function to register user's desired-interfaces array of structs.
_usb_host_get_frame_number=_usb_host_get_frame_number
_usb_host_get_frame_number_Hint=uint_32 usb_otg__usb_host_get_frame_number(_usb_host_handle hci_handle);
_usb_host_get_frame_number_HintHint=This function can be used to inquire the current frame number.
_usb_host_get_frame_number_HintHintLong=This function can be used to inquire the current frame number.
_usb_host_get_micro_frame_number=_usb_host_get_micro_frame_number
_usb_host_get_micro_frame_number_Hint=uint_32 usb_otg__usb_host_get_micro_frame_number(_usb_host_handle hci_handle);
_usb_host_get_micro_frame_number_HintHint=This function can be used to inquire the current micro frame number.
_usb_host_get_micro_frame_number_HintHintLong=This function can be used to inquire the current micro frame number.
_usb_host_get_transfer_status=_usb_host_get_transfer_status
_usb_host_get_transfer_status_Hint=uint_32 usb_otg__usb_host_get_transfer_status(_usb_pipe_handle pipe_handle,...
_usb_host_get_transfer_status_HintHint=_usb_host_get_transfer_status is a routine that returns status of a transfer.
_usb_host_get_transfer_status_HintHintLong=_usb_host_get_transfer_status is a routine that returns status of a transfer.
_usb_host_init=_usb_host_init
_usb_host_init_Hint=USB_STATUS usb_otg__usb_host_init(uint_8 devnum, uint_32 frame_list_size,...
_usb_host_init_HintHint=Initializes the USB hardware and installs the USB interrupt handler
_usb_host_init_HintHintLong=Initializes the USB hardware and installs the USB interrupt handler
_usb_host_open_pipe=_usb_host_open_pipe
_usb_host_open_pipe_Hint=USB_STATUS usb_otg__usb_host_open_pipe(_usb_host_handle hci_handle,...
_usb_host_open_pipe_HintHint=_usb_host_open_pipe routine initializes a new pipe descriptor and  returns...
_usb_host_open_pipe_HintHintLong=_usb_host_open_pipe routine initializes a new pipe descriptor and  returns USB_OK or error and the pipe descriptor for the USB bus address,  endpoint number, direction of transfer, maximum packet size, interval  and the type of pipe
_usb_host_recv_data=_usb_host_recv_data
_usb_host_recv_data_Hint=uint_32 usb_otg__usb_host_recv_data(_usb_host_handle hci_handle,...
_usb_host_recv_data_HintHint=The Receive Data routine is non-blocking routine that causes a buffer to be...
_usb_host_recv_data_HintHintLong=The Receive Data routine is non-blocking routine that causes a buffer to be made available for data recieved from the USB host. It takes the buffer and passes it down to lower level hardware driver
_usb_host_register_ch9_callback=_usb_host_register_ch9_callback
_usb_host_register_ch9_callback_Hint=USB_STATUS usb_otg__usb_host_register_c...
_usb_host_register_ch9_callback_HintHint=This function registers a callback function that will be called  to notify...
_usb_host_register_ch9_callback_HintHintLong=This function registers a callback function that will be called  to notify the user of a ch9 command completion. This should be used  only after enumeration is completed
_usb_host_register_service=_usb_host_register_service
_usb_host_register_service_Hint=uint_32 usb_otg__usb_host_register_service(_usb_host_handle hci_handle,...
_usb_host_register_service_HintHint=Registers a callback routine for a specified event.
_usb_host_register_service_HintHintLong=Registers a callback routine for a specified event.
_usb_host_send_data=_usb_host_send_data
_usb_host_send_data_Hint=uint_32 usb_otg__usb_host_send_data(_usb_host_handle hci_handle,...
_usb_host_send_data_HintHint=The Send Data routine is non-blocking routine that causes a block of data to...
_usb_host_send_data_HintHintLong=The Send Data routine is non-blocking routine that causes a block of data to be made available for transmission to the USB host.
_usb_host_send_setup=_usb_host_send_setup
_usb_host_send_setup_Hint=uint_32 usb_otg__usb_host_send_setup(_usb_host_handle hci_handle,...
_usb_host_send_setup_HintHint=Sends a Setup packet. Internally, following the SendSetup call this takes...
_usb_host_send_setup_HintHintLong=Sends a Setup packet. Internally, following the SendSetup call this takes care of the whole transaction (including receiving or sending any data to or from the device).
_usb_host_shutdown=_usb_host_shutdown
_usb_host_shutdown_Hint=void usb_otg__usb_host_shutdown(_usb_host_handle hci_handle);
_usb_host_shutdown_HintHint=Shutdown an initialized USB Host
_usb_host_shutdown_HintHintLong=Shutdown an initialized USB Host
_usb_host_unregister_service=_usb_host_unregister_service
_usb_host_unregister_service_Hint=uint_32 usb_otg__usb_host_unregister_service(_usb_host_handle hci_handle,...
_usb_host_unregister_service_HintHint=Unregisters a callback routine for a specified event or endpoint.
_usb_host_unregister_service_HintHintLong=Unregisters a callback routine for a specified event or endpoint.
_usb_hostdev_cntrl_request=_usb_hostdev_cntrl_request
_usb_hostdev_cntrl_request_Hint=USB_STATUS usb_otg__usb_hostdev_cntrl_request(_usb_device_instance_handle...
_usb_hostdev_cntrl_request_HintHint=Function to process class- or vendor-specific control pipe device requests.
_usb_hostdev_cntrl_request_HintHintLong=Function to process class- or vendor-specific control pipe device requests.
_usb_hostdev_find_pipe_handle=_usb_hostdev_find_pipe_handle
_usb_hostdev_find_pipe_handle_Hint=_usb_pipe_handle usb_otg__usb_hostdev_f...
_usb_hostdev_find_pipe_handle_HintHint=Function to find a pipe with specified type and direction
_usb_hostdev_find_pipe_handle_HintHintLong=Function to find a pipe with specified type and direction
_usb_hostdev_get_buffer=_usb_hostdev_get_buffer
_usb_hostdev_get_buffer_Hint=USB_STATUS usb_otg__usb_hostdev_get_buffer(_usb_device_instance_handle...
_usb_hostdev_get_buffer_HintHint=Applications should use this function to get I/O buffers and other work areas...
_usb_hostdev_get_buffer_HintHintLong=Applications should use this function to get I/O buffers and other work areas that stay allocated until the device is detached.  At that time, these are all freed by the system.
_usb_hostdev_get_descriptor=_usb_hostdev_get_descriptor
_usb_hostdev_get_descriptor_Hint=USB_STATUS usb_otg__usb_hostdev_get_descriptor(_usb_device_instance_handle...
_usb_hostdev_get_descriptor_HintHint=If the intf_handle is NULL, then the descriptor is searched within the whole...
_usb_hostdev_get_descriptor_HintHintLong=If the intf_handle is NULL, then the descriptor is searched within the whole device. If the intf_handle is not NULL, the descriptor is  searched within specified interface (ignored if desc_type is  USB_DESC_TYPE_DEV, USB_DESC_TYPE_CFG or USB_DESC_TYPE_IF and required  for USB_DESC_TYPE_EP).
_usb_hostdev_select_config=_usb_hostdev_select_config
_usb_hostdev_select_config_Hint=USB_STATUS usb_otg__usb_hostdev_select_config(_usb_device_instance_handle...
_usb_hostdev_select_config_HintHint=Function to tear down an old configuration, and set up a new configuration...
_usb_hostdev_select_config_HintHintLong=Function to tear down an old configuration, and set up a new configuration with the same or different index.
_usb_hostdev_select_interface=_usb_hostdev_select_interface
_usb_hostdev_select_interface_Hint=USB_STATUS usb_otg__usb_hostdev_select_interface(_usb_device_instance_handle...
_usb_hostdev_select_interface_HintHint=Function to tear down old interface, and set up a new one with the same or...
_usb_hostdev_select_interface_HintHintLong=Function to tear down old interface, and set up a new one with the same or different index/alternate. For each interface, only one of its alternates  can be selected per USB spec.  Also per spec, an endpoint  can be in only one interface (though it may exist in  several alternates of that interface).
_usb_khci_task=_usb_khci_task
_usb_khci_task_Hint=void usb_otg__usb_khci_task(void);
_usb_khci_task_HintHint=KHCI task
_usb_khci_task_HintHintLong=KHCI task
_usb_otg_a_change_state=_usb_otg_a_change_state
_usb_otg_a_change_state_Hint=void usb_otg__usb_otg_a_change_state(_usb_otg_handle otg_handle, uint_32...
_usb_otg_a_change_state_HintHint=This function handles the actions performed at A substate change
_usb_otg_a_change_state_HintHintLong=This function handles the actions performed at A substate change
_usb_otg_a_set_b_hnp_en=_usb_otg_a_set_b_hnp_en
_usb_otg_a_set_b_hnp_en_Hint=uint_32 usb_otg__usb_otg_a_set_b_hnp_en(void* dev_handle, bool b_hnp_en);
_usb_otg_a_set_b_hnp_en_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_a_set_b_hnp_en_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_b_change_state=_usb_otg_b_change_state
_usb_otg_b_change_state_Hint=void usb_otg__usb_otg_b_change_state(_usb_otg_handle otg_handle, uint_32...
_usb_otg_b_change_state_HintHint=This function handles the actions performed at B substate change
_usb_otg_b_change_state_HintHintLong=This function handles the actions performed at B substate change
_usb_otg_bus_release=_usb_otg_bus_release
_usb_otg_bus_release_Hint=uint_32 usb_otg__usb_otg_bus_release(_usb_otg_handle handle);
_usb_otg_bus_release_HintHint=B-device hands over the bus back to the A device
_usb_otg_bus_release_HintHintLong=B-device hands over the bus back to the A device
_usb_otg_bus_request=_usb_otg_bus_request
_usb_otg_bus_request_Hint=uint_32 usb_otg__usb_otg_bus_request(_usb_otg_handle handle);
_usb_otg_bus_request_HintHint=B-device requests to become Host
_usb_otg_bus_request_HintHintLong=B-device requests to become Host
_usb_otg_ext_isr=_usb_otg_ext_isr
_usb_otg_ext_isr_Hint=void usb_otg__usb_otg_ext_isr(uint_8 controller_ID);
_usb_otg_ext_isr_HintHint=Service interrupt for the external OTG circuit. Needs to be called from the...
_usb_otg_ext_isr_HintHintLong=Service interrupt for the external OTG circuit. Needs to be called from the corresponding interrupt handler (KBI, IRQ, etc)
_usb_otg_get_otg_attribute=_usb_otg_get_otg_attribute
_usb_otg_get_otg_attribute_Hint=uint_32 usb_otg__usb_otg_get_otg_attribute(void* dev_handle, uint_8...
_usb_otg_get_otg_attribute_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_get_otg_attribute_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_hnp_enable=_usb_otg_hnp_enable
_usb_otg_hnp_enable_Hint=uint_32 usb_otg__usb_otg_hnp_enable(uint_8 controller_ID, uint_8 enable);
_usb_otg_hnp_enable_HintHint=This function is intended to be called from the Peripheral USB stack in...
_usb_otg_hnp_enable_HintHintLong=This function is intended to be called from the Peripheral USB stack in response to SET/CLEAR Feature requests from the Host for HNP_Enable
_usb_otg_hnp_poll_req=_usb_otg_hnp_poll_req
_usb_otg_hnp_poll_req_Hint=uint_32 usb_otg__usb_otg_hnp_poll_req(_usb_otg_handle handle);
_usb_otg_hnp_poll_req_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_hnp_poll_req_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_init=_usb_otg_init
_usb_otg_init_Hint=uint_32 usb_otg__usb_otg_init(uint_8 controller_ID, OTG_INIT_STRUCT...
_usb_otg_init_HintHint=Initializes OTG stack and OTG hardware
_usb_otg_init_HintHintLong=Initializes OTG stack and OTG hardware
_usb_otg_on_detach_event=_usb_otg_on_detach_event
_usb_otg_on_detach_event_Hint=uint_32 usb_otg__usb_otg_on_detach_event(void* dev_handle);
_usb_otg_on_detach_event_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_on_detach_event_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_on_interface_event=_usb_otg_on_interface_event
_usb_otg_on_interface_event_Hint=uint_32 usb_otg__usb_otg_on_interface_event(void* dev_handle);
_usb_otg_on_interface_event_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_on_interface_event_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_register_callback=_usb_otg_register_callback
_usb_otg_register_callback_Hint=uint_32 usb_otg__usb_otg_register_callback(_usb_otg_handle handle,...
_usb_otg_register_callback_HintHint=Registers OTG callback
_usb_otg_register_callback_HintHintLong=Registers OTG callback
_usb_otg_session_request=_usb_otg_session_request
_usb_otg_session_request_Hint=uint_32 usb_otg__usb_otg_session_request(_usb_otg_handle handle);
_usb_otg_session_request_HintHint=B-device requests a new session to be started by the A device
_usb_otg_session_request_HintHintLong=B-device requests a new session to be started by the A device
_usb_otg_set_a_bus_drop=_usb_otg_set_a_bus_drop
_usb_otg_set_a_bus_drop_Hint=uint_32 usb_otg__usb_otg_set_a_bus_drop(_usb_otg_handle otg_handle, bool...
_usb_otg_set_a_bus_drop_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_set_a_bus_drop_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_set_a_bus_req=_usb_otg_set_a_bus_req
_usb_otg_set_a_bus_req_Hint=uint_32 usb_otg__usb_otg_set_a_bus_req(_usb_otg_handle otg_handle, bool...
_usb_otg_set_a_bus_req_HintHint=This function is called from the application to set/clear the a_bus_req...
_usb_otg_set_a_bus_req_HintHintLong=This function is called from the application to set/clear the a_bus_req parameter. This is one of the parameters that determines. A state machine behavior.If the A device is in peripheral state the otg status changes to USB_OTG_HOST_REQUEST_FLAG.
_usb_otg_set_a_clear_err=_usb_otg_set_a_clear_err
_usb_otg_set_a_clear_err_Hint=uint_32 usb_otg__usb_otg_set_a_clear_err(_usb_otg_handle otg_handle);
_usb_otg_set_a_clear_err_HintHint=This function is called from the application to set the a_clr_err parameter...
_usb_otg_set_a_clear_err_HintHintLong=This function is called from the application to set the a_clr_err parameter which is one way to escape from the a_vbus_err state. The other two are id = FALSE and a_bus_drop = TRUE.
_usb_otg_set_feature_required=_usb_otg_set_feature_required
_usb_otg_set_feature_required_Hint=uint_8 usb_otg__usb_otg_set_feature_required(void* dev_handle);
_usb_otg_set_feature_required_HintHint=This function is called from the application to set/clear the a_bus_drop...
_usb_otg_set_feature_required_HintHintLong=This function is called from the application to set/clear the a_bus_drop parameter. This is one of the parameters that determines. A state machine behavior.
_usb_otg_sm=_usb_otg_sm
_usb_otg_sm_Hint=void usb_otg__usb_otg_sm(_usb_otg_handle otg_handle, uint_32 new_state);
_usb_otg_sm_HintHint=Handles the changes in OTG status
_usb_otg_sm_HintHintLong=Handles the changes in OTG status
_usb_otg_task=_usb_otg_task
_usb_otg_task_Hint=void usb_otg__usb_otg_task(void);
_usb_otg_task_HintHint=OTG task
_usb_otg_task_HintHintLong=OTG task
bcdDevice=2
bcdUSB=512
runSpeedModeNum=1
usb_class_hub_clear_port_feature=usb_class_hub_clear_port_feature
usb_class_hub_clear_port_feature_Hint=USB_STATUS usb_otg_usb_class_hub_clear_port_feature(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_clear_port_feature_HintHint=Clears feature of selected hub port
usb_class_hub_clear_port_feature_HintHintLong=Clears feature of selected hub port
usb_class_hub_cntrl_callback=usb_class_hub_cntrl_callback
usb_class_hub_cntrl_callback_Hint=void usb_otg_usb_class_hub_cntrl_callback(void* pipe, void* param, uchar_ptr...
usb_class_hub_cntrl_callback_HintHint=This is the callback used when hub information is sent or received
usb_class_hub_cntrl_callback_HintHintLong=This is the callback used when hub information is sent or received
usb_class_hub_cntrl_common=usb_class_hub_cntrl_common
usb_class_hub_cntrl_common_Hint=USB_STATUS usb_otg_usb_class_hub_cntrl_common(HUB_COMMAND_PTR com_ptr, uint_8...
usb_class_hub_cntrl_common_HintHint=This function is used to send a control request
usb_class_hub_cntrl_common_HintHintLong=This function is used to send a control request
usb_class_hub_get_descriptor=usb_class_hub_get_descriptor
usb_class_hub_get_descriptor_Hint=USB_STATUS usb_otg_usb_class_hub_get_descriptor(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_get_descriptor_HintHint=This function is called by the application to read the descriptor of hub device
usb_class_hub_get_descriptor_HintHintLong=This function is called by the application to read the descriptor of hub device
usb_class_hub_get_port_status=usb_class_hub_get_port_status
usb_class_hub_get_port_status_Hint=USB_STATUS usb_otg_usb_class_hub_get_port_status(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_get_port_status_HintHint=Gets the status of specified port
usb_class_hub_get_port_status_HintHintLong=Gets the status of specified port
usb_class_hub_init=usb_class_hub_init
usb_class_hub_init_Hint=void usb_otg_usb_class_hub_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr,...
usb_class_hub_init_HintHint=This function is called by common class to initialize the class driver. It is...
usb_class_hub_init_HintHintLong=This function is called by common class to initialize the class driver. It is called in response to a select interface call by application
usb_class_hub_set_port_feature=usb_class_hub_set_port_feature
usb_class_hub_set_port_feature_Hint=USB_STATUS usb_otg_usb_class_hub_set_port_feature(HUB_COMMAND_PTR com_ptr,...
usb_class_hub_set_port_feature_HintHint=Sets feature of specified hub port
usb_class_hub_set_port_feature_HintHintLong=Sets feature of specified hub port
usb_dev_list_attach_device=usb_dev_list_attach_device
usb_dev_list_attach_device_Hint=USB_STATUS usb_otg_usb_dev_list_attach_device(_usb_host_handle handle, uint_8...
usb_dev_list_attach_device_HintHint=This function will be called when attach interrupt happens, to add onto the...
usb_dev_list_attach_device_HintHintLong=This function will be called when attach interrupt happens, to add onto the device list and do common initialization.
usb_host_class_intf_init=usb_host_class_intf_init
usb_host_class_intf_init_Hint=USB_STATUS usb_otg_usb_host_class_intf_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr,...
usb_host_class_intf_init_HintHint=Initialize header of class interface info struct. Incoming params are checked...
usb_host_class_intf_init_HintHintLong=Initialize header of class interface info struct. Incoming params are checked to catch errors early before attempts to use the struct.
usb_host_class_intf_validate=usb_host_class_intf_validate
usb_host_class_intf_validate_Hint=uint_32 usb_otg_usb_host_class_intf_validate(void* class_intf_handle);
usb_host_class_intf_validate_HintHint=It is presumed that this function is called with interrupts disabled
usb_host_class_intf_validate_HintHintLong=It is presumed that this function is called with interrupts disabled
usb_host_hub_device_event=usb_host_hub_device_event
usb_host_hub_device_event_Hint=void usb_otg_usb_host_hub_device_event(_usb_device_instance_handle...
usb_host_hub_device_event_HintHint=called when a hub has been attached, detached, etc.
usb_host_hub_device_event_HintHintLong=called when a hub has been attached, detached, etc.
usb_hostdev_get_pipe_handle=usb_hostdev_get_pipe_handle
usb_hostdev_get_pipe_handle_Hint=_usb_pipe_handle usb_otg_usb_hostdev_get_pipe_handle(PIPE_BUNDLE_STRUCT_PTR...
usb_hostdev_get_pipe_handle_HintHint=Function to map a particular pipe type and direction in the given bundle...
usb_hostdev_get_pipe_handle_HintHintLong=Function to map a particular pipe type and direction in the given bundle (which contains device/interface). It is presumed that this function is called with USB interrupts disabled
usb_hostdev_tr_init=usb_hostdev_tr_init
usb_hostdev_tr_init_Hint=void usb_otg_usb_hostdev_tr_init(TR_INIT_PARAM_STRUCT_PTR tr_ptr, tr_callback...
usb_hostdev_tr_init_HintHint=To ensure that a new TR_STRUCT is used by the system for each new...
usb_hostdev_tr_init_HintHintLong=To ensure that a new TR_STRUCT is used by the system for each new transaction, it is essential to have a distinct TR_INDEX value.  Completed transactions have TR_INDEX cleared to zero, it is invalid for a new transaction
usb_hostdev_validate=usb_hostdev_validate
usb_hostdev_validate_Hint=USB_STATUS usb_otg_usb_hostdev_validate(_usb_device_instance_handle...
usb_hostdev_validate_HintHint=Function to verify pointer is address of an instance on device list. It is...
usb_hostdev_validate_HintHintLong=Function to verify pointer is address of an instance on device list. It is presumed that this function is called with USB interrupts disabled
BeanUserCopyright=[(c) Copyright <company/user-name>, 2011|http      : www.<company>.com|mail      : info@<company>.com]
InhrSymbolList=[LDD_Component|Max3353_INT_Pin|Max3353_I2C]
MethodHintList=[uint_8 usb_otg_USB_Class_Init(uint_8 controller_ID, USB_CLASS_CALLBACK class_callback, USB_REQ_FUNC other_req_callback);|uint_8 usb_otg_USB_Class_DeInit(uint_8 controller_ID);|uint_8 usb_otg_USB_Class_Send_Data(uint_8 controller_ID, uint_8 ep_num, uint_8_ptr buff_ptr, USB_PACKET_SIZE size);|void usb_otg_usb_class_hub_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, CLASS_CALL_STRUCT_PTR ccs_ptr);|void usb_otg_usb_class_hub_cntrl_callback(void* pipe, void* param, uchar_ptr buffer, uint_32 len, USB_STATUS status);|USB_STATUS usb_otg_usb_class_hub_cntrl_common(HUB_COMMAND_PTR com_ptr, uint_8 bmrequesttype, uint_8 brequest, uint_16 wvalue, uint_16 windex, uint_16 wlength, uchar_ptr data);|USB_STATUS usb_otg_usb_class_hub_get_descriptor(HUB_COMMAND_PTR com_ptr, uchar_ptr buffer, uchar len);|USB_STATUS usb_otg_usb_class_hub_set_port_feature(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uint_8 feature);|USB_STATUS usb_otg_usb_class_hub_clear_port_feature(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uint_8 feature);|USB_STATUS usb_otg_usb_class_hub_get_port_status(HUB_COMMAND_PTR com_ptr, uint_8 port_nr, uchar_ptr buffer, uchar len);|void usb_otg_usb_host_hub_device_event(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, uint_32 event_code);|void usb_otg__usb_khci_task(void);|uint_16 usb_otg__usb_event_init(USB_EVENT_STRUCT_PTR event);|uint_16 usb_otg__usb_event_clear(USB_EVENT_STRUCT_PTR event, uint_32 bitmask);|uint_16 usb_otg__usb_event_wait_ticks(USB_EVENT_STRUCT_PTR event, uint_32 bitmask, uint_8 all, uint_16 ticks);|USB_STATUS usb_otg__usb_host_register_ch9_callback(_usb_device_instance_handle dev_handle, tr_callback callback, void* callback_param);|USB_STATUS usb_otg__usb_host_ch9_clear_feature(_usb_device_instance_handle dev_handle, uint_8 req_type, uint_8 intf_endpt, uint_16 feature);|USB_STATUS usb_otg__usb_host_ch9_get_configuration(_usb_device_instance_handle dev_handle, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_get_descriptor(_usb_device_instance_handle dev_handle, uint_16 type_index, uint_16 lang_id, uint_16 buflen, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_get_interface(_usb_device_instance_handle dev_handle, uint_8 interface, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_get_status(_usb_device_instance_handle dev_handle, uint_8 req_type, uint_8 intf_endpt, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_synch_frame(_usb_device_instance_handle dev_handle, uint_8 intf, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_set_address(_usb_device_instance_handle dev_handle);|USB_STATUS usb_otg__usb_host_ch9_set_descriptor(_usb_device_instance_handle dev_handle, uint_16 type_index, uint_16 lang_id, uint_16 buflen, uchar_ptr buffer);|USB_STATUS usb_otg__usb_host_ch9_set_interface(_usb_device_instance_handle dev_handle, uint_8 alternate, uint_8 intf);|USB_STATUS usb_otg__usb_hostdev_cntrl_request(_usb_device_instance_handle dev_handle, USB_SETUP_PTR devreq, uchar_ptr buff_ptr, tr_callback callback, void* callback_param);|USB_STATUS usb_otg__usb_host_close_pipe(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle);|void usb_otg__usb_host_close_all_pipes(_usb_host_handle hci_handle);|USB_STATUS usb_otg__usb_host_cancel_transfer(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, uint_32 transfer_number);|USB_STATUS usb_otg_usb_hostdev_validate(_usb_device_instance_handle device_handle);|USB_STATUS usb_otg__usb_hostdev_get_buffer(_usb_device_instance_handle dev_handle, uint_32 buffer_size, uchar_ptr *buff_ptr);|USB_STATUS usb_otg__usb_hostdev_get_descriptor(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, descriptor_type desc_type, uint_8 desc_index, uint_8 intf_alt, void* *descriptor);|_usb_pipe_handle usb_otg__usb_hostdev_find_pipe_handle(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, uint_8 pipe_type, uint_8 pipe_direction);|_usb_pipe_handle usb_otg_usb_hostdev_get_pipe_handle(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, uint_8 pipe_type, uint_8 pipe_direction);|USB_STATUS usb_otg_usb_host_class_intf_init(PIPE_BUNDLE_STRUCT_PTR pbs_ptr, void* class_intf_handle, void* anchor_ptr);|uint_32 usb_otg_usb_host_class_intf_validate(void* class_intf_handle);|USB_STATUS usb_otg__usb_host_driver_info_register(_usb_host_handle host_handle, void* info_table_ptr);|USB_STATUS usb_otg__usb_hostdev_select_config(_usb_device_instance_handle dev_handle, uint_8 config_no);|USB_STATUS usb_otg__usb_hostdev_select_interface(_usb_device_instance_handle dev_handle, _usb_interface_descriptor_handle intf_handle, void* class_intf_ptr);|USB_STATUS usb_otg_usb_dev_list_attach_device(_usb_host_handle handle, uint_8 speed, uint_8 hub_no, uint_8 port_no);|void usb_otg_usb_hostdev_tr_init(TR_INIT_PARAM_STRUCT_PTR tr_ptr, tr_callback callback, void* callback_param);|USB_STATUS usb_otg__usb_host_init(uint_8 devnum, uint_32 frame_list_size, _usb_host_handle *hci_handle);|uint_32 usb_otg__usb_host_register_service(_usb_host_handle hci_handle, uint_8 type, SERVICE_CALLBACK service);|uint_32 usb_otg__usb_host_unregister_service(_usb_host_handle hci_handle, uint_8 event);|USB_STATUS usb_otg__usb_host_open_pipe(_usb_host_handle hci_handle, PIPE_INIT_PARAM_STRUCT_PTR pipe_init_params_ptr, _usb_pipe_handle *pipe_handle);|uint_32 usb_otg__usb_host_send_setup(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);|uint_32 usb_otg__usb_host_get_transfer_status(_usb_pipe_handle pipe_handle, uint_32 transfer_number);|uint_32 usb_otg__usb_host_recv_data(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);|void usb_otg__usb_host_shutdown(_usb_host_handle hci_handle);|uint_32 usb_otg__usb_host_get_frame_number(_usb_host_handle hci_handle);|uint_32 usb_otg__usb_host_get_micro_frame_number(_usb_host_handle hci_handle);|uint_32 usb_otg__usb_host_send_data(_usb_host_handle hci_handle, _usb_pipe_handle pipe_handle, TR_INIT_PARAM_STRUCT_PTR tr_params_ptr);|void usb_otg__usb_otg_sm(_usb_otg_handle otg_handle, uint_32 new_state);|void usb_otg__usb_otg_a_change_state(_usb_otg_handle otg_handle, uint_32 new_state);|void usb_otg__usb_otg_b_change_state(_usb_otg_handle otg_handle, uint_32 new_state);|uint_32 usb_otg__usb_otg_init(uint_8 controller_ID, OTG_INIT_STRUCT *init_struct, _usb_otg_handle *otg_handle);|uint_32 usb_otg__usb_otg_register_callback(_usb_otg_handle handle, otg_event_callback callback);|uint_32 usb_otg__usb_otg_session_request(_usb_otg_handle handle);|uint_32 usb_otg__usb_otg_bus_request(_usb_otg_handle handle);|uint_32 usb_otg__usb_otg_bus_release(_usb_otg_handle handle);|uint_32 usb_otg__usb_otg_hnp_enable(uint_8 controller_ID, uint_8 enable);|void usb_otg__usb_otg_task(void);|void usb_otg__usb_otg_ext_isr(uint_8 controller_ID);|uint_32 usb_otg__usb_otg_set_a_bus_req(_usb_otg_handle otg_handle, bool a_bus_req);|uint_32 usb_otg__usb_otg_set_a_bus_drop(_usb_otg_handle otg_handle, bool a_bus_drop);|uint_32 usb_otg__usb_otg_set_a_clear_err(_usb_otg_handle otg_handle);|uint_32 usb_otg__usb_otg_a_set_b_hnp_en(void* dev_handle, bool b_hnp_en);|uint_32 usb_otg__usb_otg_get_otg_attribute(void* dev_handle, uint_8 bm_attributes);|uint_8 usb_otg__usb_otg_set_feature_required(void* dev_handle);|uint_32 usb_otg__usb_otg_on_interface_event(void* dev_handle);|uint_32 usb_otg__usb_otg_on_detach_event(void* dev_handle);|uint_32 usb_otg__usb_otg_hnp_poll_req(_usb_otg_handle handle);|void usb_otg_MAX3353_Init(void);|void usb_otg__otg_max3353_enable_disable(bool enable);|uint_8 usb_otg__otg_max3353_get_status(void);|uint_8 usb_otg__otg_max3353_get_interrupts(void);|void usb_otg__otg_max3353_set_pdowns(uint_8 bitfield);|void usb_otg__otg_max3353_set_VBUS(bool enable);|void usb_otg_MAX3353_GetUsbInputSignal(void);|void usb_otg_MAX3353_SetUsbOutputSignal(LDD_TPinMask SignalMask, LDD_TPinMask SignalValue);]
MethodList=[USB_Class_Init|USB_Class_DeInit|USB_Class_Send_Data|usb_class_hub_init|usb_class_hub_cntrl_callback|usb_class_hub_cntrl_common|usb_class_hub_get_descriptor|usb_class_hub_set_port_feature|usb_class_hub_clear_port_feature|usb_class_hub_get_port_status|usb_host_hub_device_event|_usb_khci_task|_usb_event_init|_usb_event_clear|_usb_event_wait_ticks|_usb_host_register_ch9_callback|_usb_host_ch9_clear_feature|_usb_host_ch9_get_configuration|_usb_host_ch9_get_descriptor|_usb_host_ch9_get_interface|_usb_host_ch9_get_status|_usb_host_ch9_synch_frame|_usb_host_ch9_set_address|_usb_host_ch9_set_descriptor|_usb_host_ch9_set_interface|_usb_hostdev_cntrl_request|_usb_host_close_pipe|_usb_host_close_all_pipes|_usb_host_cancel_transfer|usb_hostdev_validate|_usb_hostdev_get_buffer|_usb_hostdev_get_descriptor|_usb_hostdev_find_pipe_handle|usb_hostdev_get_pipe_handle|usb_host_class_intf_init|usb_host_class_intf_validate|_usb_host_driver_info_register|_usb_hostdev_select_config|_usb_hostdev_select_interface|usb_dev_list_attach_device|usb_hostdev_tr_init|_usb_host_init|_usb_host_register_service|_usb_host_unregister_service|_usb_host_open_pipe|_usb_host_send_setup|_usb_host_get_transfer_status|_usb_host_recv_data|_usb_host_shutdown|_usb_host_get_frame_number|_usb_host_get_micro_frame_number|_usb_host_send_data|_usb_otg_sm|_usb_otg_a_change_state|_usb_otg_b_change_state|_usb_otg_init|_usb_otg_register_callback|_usb_otg_session_request|_usb_otg_bus_request|_usb_otg_bus_release|_usb_otg_hnp_enable|_usb_otg_task|_usb_otg_ext_isr|_usb_otg_set_a_bus_req|_usb_otg_set_a_bus_drop|_usb_otg_set_a_clear_err|_usb_otg_a_set_b_hnp_en|_usb_otg_get_otg_attribute|_usb_otg_set_feature_required|_usb_otg_on_interface_event|_usb_otg_on_detach_event|_usb_otg_hnp_poll_req|MAX3353_Init|_otg_max3353_enable_disable|_otg_max3353_get_status|_otg_max3353_get_interrupts|_otg_max3353_set_pdowns|_otg_max3353_set_VBUS|MAX3353_GetUsbInputSignal|MAX3353_SetUsbOutputSignal]
String0List=[F|R|E|E|S|C|A|L|E| |S|E|M|I|C|O|N|D|U|C|T|O|R| |I|N|C|.]
String1List=[U|S|B| |H|I|D| |O|T|G| |D|E|V|I|C|E| |P|E|x| |D|E|M|O]
runSpeedMode=[Yes]

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ADC1AsynchroClockAddr=1074507784
ADC1AsynchroClockReg=ADC1_CFG1
ADC1BusClockAddr=1074507784
ADC1BusClockReg=ADC1_CFG1
ADC1ClkSelAddr=1074507784
ADC1ClkSelReg=ADC1_CFG1
ActiveConfigIdentifier=PEcfg_MK40DX256ZVMD10_INTERNAL_RAM
ActiveConfiguration=MK40DX256ZVMD10_INTERNAL_RAM
CPUDB_CPU_MASTER=MK40DZ10
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MK40DN512Zxxx10
CPUDB_DataFlashBlockCount=0
CPUDB_DataFlashEraseUnitSize=2048
CPUDB_DataFlashSize=0
CPUDB_DataFlashStartAddress=268435456
CPUDB_DataFlashWriteUnitSize=4
CPUDB_FlexRamSize=0
CPUDB_FlexRamStartAddress=335544320
CPUDB_MAPBGA144=-1
CPUDB_MK40DN512Zxxx10=-1
CPUDB_MK40DZ10=-1
CPUDB_PACKAGE=MAPBGA144
CPUDB_ProgramFlashBlockCount=2
CPUDB_ProgramFlashEraseUnitSize=2048
CPUDB_ProgramFlashSize=524288
CPUDB_ProgramFlashWriteUnitSize=4
CPU_DB_version=3.00.003
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MK40
CPUtype=MK40N512MD100
CPUvariant=MK40DN512ZVMD10
ClientDir_Binary=E:\Project\MQXLite\20121119\Copy of ProcessorExpert_1118\OTG_STACK\Update\USB_HID_OTG_STACK_K40_PEx\Sources\
ClientDir_Code=E:\Project\MQXLite\20121119\Copy of ProcessorExpert_1118\OTG_STACK\Update\USB_HID_OTG_STACK_K40_PEx\Generated_Code\
ClientDir_PE=E:\Freescale\CW MCU v10.3_121029\MCU\ProcessorExpert\
ClientDir_Project=E:\Project\MQXLite\20121119\Copy of ProcessorExpert_1118\OTG_STACK\Update\USB_HID_OTG_STACK_K40_PEx\
CommentBrackets=/**/
Compiler=CodeWarriorARM
CompilerID=CodeWarrior ARM C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
EclipseProjectName=USB_HID_OTG_STACK_K40_PEx
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
OnChipEEPROM=0
OnChipFLASH=524288
OnChipRAM=131072
PE_DEBUG=
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_set0_PORTB_PCR8=16811520
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_set1_PORTB_PCR8=256
PE_G_GenBitMask=
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_RTOSAdap_regCompIndex=2
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventEnabled_OnPortEvent=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventPtr_OnFieldEvent=(void (*)(LDD_TUserData *UserDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventPtr_OnPortEvent=(void (*)(LDD_TUserData *UserDataPtr))&OTG_MAX3353_INT_PIN_OTG_MAX3353_INT_PIN_OnPortEvent
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ClearFieldBits=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ConnectPin=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_GetFieldValue=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldBits=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldInputDirection=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldOutputDirection=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldValue=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ToggleFieldBits=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ClearFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, OTG_MAX3353_INT_PIN_TFieldValue Mask))&OTG_MAX3353_INT_PIN_ClearFieldBits
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ClearPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))&OTG_MAX3353_INT_PIN_ConnectPin
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&OTG_MAX3353_INT_PIN_Deinit
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldEventStatus=(OTG_MAX3353_INT_PIN_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldOutputValue=(OTG_MAX3353_INT_PIN_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldValue=(OTG_MAX3353_INT_PIN_TFieldValue (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&OTG_MAX3353_INT_PIN_GetFieldValue
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortEventStatus=(OTG_MAX3353_INT_PIN_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortOutputValue=(OTG_MAX3353_INT_PIN_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortValue=(OTG_MAX3353_INT_PIN_TPortValue (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&OTG_MAX3353_INT_PIN_Init
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, OTG_MAX3353_INT_PIN_TFieldValue Mask))&OTG_MAX3353_INT_PIN_SetFieldBits
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name, OTG_MAX3353_INT_PIN_TFieldValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field))&OTG_MAX3353_INT_PIN_SetFieldInputDirection
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, OTG_MAX3353_INT_PIN_TFieldValue Value))&OTG_MAX3353_INT_PIN_SetFieldOutputDirection
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, OTG_MAX3353_INT_PIN_TFieldValue Value))&OTG_MAX3353_INT_PIN_SetFieldValue
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortEventCondition=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask, LDD_GPIO_TEventCondition Condition))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortInputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortOutputDirection=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask, OTG_MAX3353_INT_PIN_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortValue=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Value))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ToggleFieldBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, OTG_MAX3353_INT_PIN_TFieldValue Mask))&OTG_MAX3353_INT_PIN_ToggleFieldBits
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_TogglePortBits=(void (*)(LDD_TDeviceData *DeviceDataPtr, OTG_MAX3353_INT_PIN_TPortValue Mask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventEnabled_OnMasterBlockReceived=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventEnabled_OnMasterBlockSent=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnBusStartDetected=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnBusStopDetected=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnError=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterBlockReceived=(void (*)(LDD_TUserData *UserDataPtr))&OTG_MAX3353_OTG_MAX3353_OnMasterBlockReceived
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterBlockSent=(void (*)(LDD_TUserData *UserDataPtr))&OTG_MAX3353_OTG_MAX3353_OnMasterBlockSent
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterByteReceived=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveBlockReceived=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveBlockSent=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveByteReceived=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveGeneralCallAddr=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveRxRequest=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveSmBusAlertResponse=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveSmBusCallAddr=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveTxRequest=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_CheckBus=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_GetError=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Main=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterGetBlockReceivedStatus=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterGetBlockSentStatus=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterReceiveBlock=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterSendBlock=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_SelectSlaveDevice=
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_CheckBus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr))&OTG_MAX3353_CheckBus
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_ClearStats=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&OTG_MAX3353_Deinit
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetError=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TErrorMask *ErrorMaskPtr))&OTG_MAX3353_GetError
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetStats=(LDD_I2C_TStats (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Init=(LDD_TDeviceData* (*)(LDD_TUserData *UserDataPtr))&OTG_MAX3353_Init
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))&OTG_MAX3353_Main
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetBlockReceivedStatus=(bool (*)(LDD_TDeviceData *DeviceDataPtr))&OTG_MAX3353_MasterGetBlockReceivedStatus
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetBlockSentStatus=(bool (*)(LDD_TDeviceData *DeviceDataPtr))&OTG_MAX3353_MasterGetBlockSentStatus
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetReceivedDataNum=(LDD_I2C_TSize (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetSentDataNum=(LDD_I2C_TSize (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterReceiveBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop))&OTG_MAX3353_MasterReceiveBlock
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterSendBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop))&OTG_MAX3353_MasterSendBlock
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterUpdateReceiveBlockSize=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TSize Size))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SelectSlaveDevice=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr))&OTG_MAX3353_SelectSlaveDevice
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SendAcknowledge=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAckType AckType))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetAcknowledgeMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAckMode AckMode))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveCancelReceptionBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveCancelTransmissionBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetBlockReceivedStatus=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetBlockSentStatus=(bool (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetReceivedDataNum=(LDD_I2C_TSize (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetSentDataNum=(LDD_I2C_TSize (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveReceiveBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveSendBlock=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size))0
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveUpdateReceiveBlockSize=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TSize Size))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceError=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceReset=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceResume=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSetupPacket=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSpeedDetect=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSuspend=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgDevice=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgHost=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgStateChange=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnSignalChange=
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))&USB_LDD_USB_LDD_OnDeviceError
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceReset
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceResume
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=(void (*)(LDD_TUserData *UserDataPtr, uint8_t EpNum))&USB_LDD_USB_LDD_OnDeviceSetupPacket
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=(void (*)(LDD_TUserData *UserDataPtr, uint16_t FrameNumber))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))&USB_LDD_USB_LDD_OnDeviceSpeedDetect
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnDeviceSuspend
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=(void (*)(LDD_TUserData *UserDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostDeviceDeattach
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=(void (*)(LDD_TUserData *UserDataPtr, uint8_t ErrorSource, uint8_t ErrorCode))&USB_LDD_USB_LDD_OnHostError
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_TBusSpeed CurrentSpeed))&USB_LDD_USB_LDD_OnHostResetRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=(void (*)(LDD_TUserData *UserDataPtr))&USB_LDD_USB_LDD_OnHostResumeRecovery
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))&USB_LDD_USB_LDD_OnOtgDevice
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=(void (*)(LDD_TUserData *UserDataPtr, bool Enabled))&USB_LDD_USB_LDD_OnOtgHost
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_USB_Otg_TState NewState))&USB_LDD_USB_LDD_OnOtgStateChange
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=(void (*)(LDD_TUserData *UserDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))&USB_LDD_USB_LDD_OnSignalChange
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceAssertResume=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceCancelTransfer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceDeinitEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetTransferStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetUsbStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceInitEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceReadSetupData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceRecvData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSendData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetAddress=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetUsbStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceStallEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceUnstallEndpoint=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgCmd=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgRegisterDevice=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgRegisterHost=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetSignal=
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=(LDD_TError (*)(LDD_TDeviceDataPtr *DeviceData, LDD_TPinMask PinMask))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=(void (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Deinit
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_DeviceAssertResume
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceCancelTransfer
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceDeinitEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceGetTransferStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t *CmdStatusPtr))&USB_LDD_DeviceGetUsbStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_TEpDescriptor *EpDescriptorPtr, uint8_t Flags))&USB_LDD_DeviceInitEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, LDD_USB_TSDP *SDPPtr))&USB_LDD_DeviceReadSetupData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))&USB_LDD_DeviceRecvData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Device_TTD *TransferDescriptorPtr))&USB_LDD_DeviceSendData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t Address))&USB_LDD_DeviceSetAddress
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, uint16_t Id, uint16_t Cmd))&USB_LDD_DeviceSetUsbStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceStallEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=(void (*)(LDD_TDeviceData *DeviceDataPtr, uint8_t EpNum, uint8_t EpDir))&USB_LDD_DeviceUnstallEndpoint
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Disable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_Enable
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=(LDD_TDriverState (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=(LDD_TEventMask (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_GetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeHandlePtr))&USB_LDD_HostCancelTransfer
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr))&USB_LDD_HostClosePipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=(uint16_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=(uint8_t (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetMicroFrameNumber
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=(LDD_USB_Host_TState (*)(LDD_TDeviceData *DeviceDataPtr))&USB_LDD_HostGetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=(LDD_USB_TTransferState (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TTransferHandle *TransferHandlePtr))&USB_LDD_HostGetTransferStatus
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeDescr *PipeInitParamsPtr, LDD_USB_Host_TPipeHandle **PipeHandlePtr))&USB_LDD_HostOpenPipe
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostRecvData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendData
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPipeHandle *PipeHandlePtr, LDD_USB_Host_TTD *TransferDescriptorPtr, LDD_USB_Host_TTransferHandle **TransferHandlePtr))&USB_LDD_HostSendSetup
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Host_TPortControlCmd Cmd))&USB_LDD_HostSetPortState
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=(LDD_TDeviceData * (*)(LDD_TUserData *UserDataPtr))&USB_LDD_Init
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=(void (*)(LDD_TDeviceData *DeviceDataPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_USB_Otg_TCmd Cmd))&USB_LDD_OtgCmd
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))&USB_LDD_OtgRegisterDevice
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TUserData *UserDataPtr))&USB_LDD_OtgRegisterHost
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask))&USB_LDD_SetEventMask
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr))0
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=(LDD_TError (*)(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask SignalMask, LDD_TPinMask SignalValue))&USB_LDD_SetSignal
PE_G_USE_UINTXX_T=
PE_G_XLKR_ASM_COMPILER_OTHER_PARAMS=
PE_G_XLKR_C_COMPILER_OTHER_PARAMS=
PE_ProductVersion=10.0
PEversion=05.03
PEversionDecimal=1283
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectModule=ProcessorExpert
ProjectName=ProcessorExpert
ServerDir_PE=E:\Freescale\CW MCU v10.3_121029\MCU\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2012-11-19, 13:12, # CodeGen: 30
Xtal_kHz=4000
Xtal_kHz_real=4000
ivINT_PORTB=OTG_MAX3353_INT_PIN_Interrupt
ivINT_USB0=USB_LDD_USB_Interrupt
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1
virtual_ADC1_TotalConversionPrescalerAddr=1074507784
virtual_ADC1_TotalConversionPrescalerReg=ADC1_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
ADC0AsynchroClockAddr=null
ADC0AsynchroClockReg=null
ADC0BusClockAddr=null
ADC0BusClockReg=null
ADC0ClkSelAddr=null
ADC0ClkSelReg=null
ADC1AsynchroClockAddr=null
ADC1AsynchroClockReg=null
ADC1BusClockAddr=null
ADC1BusClockReg=null
ADC1ClkSelAddr=null
ADC1ClkSelReg=null
ActiveConfigIdentifier=null
ActiveConfiguration=null
CPUDB_CPU_MASTER=null
CPUDB_CW_MCU_ID=null
CPUDB_CW_MCU_NAME=null
CPUDB_DataFlashBlockCount=null
CPUDB_DataFlashEraseUnitSize=null
CPUDB_DataFlashSize=null
CPUDB_DataFlashStartAddress=null
CPUDB_DataFlashWriteUnitSize=null
CPUDB_FlexRamSize=null
CPUDB_FlexRamStartAddress=null
CPUDB_MAPBGA144=null
CPUDB_MK40DN512Zxxx10=null
CPUDB_MK40DZ10=null
CPUDB_PACKAGE=null
CPUDB_ProgramFlashBlockCount=null
CPUDB_ProgramFlashEraseUnitSize=null
CPUDB_ProgramFlashSize=null
CPUDB_ProgramFlashWriteUnitSize=null
CPU_DB_version=null
CPUendian=null
CPUfamily=null
CPUproducer=null
CPUrunSpeedModeNum=null
CPUsubFamily=null
CPUtype=null
CPUvariant=null
ClientDir_Binary=null
ClientDir_Code=null
ClientDir_PE=null
ClientDir_Project=null
CommentBrackets=null
Compiler=null
CompilerID=null
DirRel_Binary=null
DirRel_BinaryToEvents=null
DirRel_Code=null
DirRel_Docs=null
DirRel_EventToBinary=null
DirRel_Events=null
DirRel_ProjectSettings=null
EclipseProjectName=null
InterruptTableType=null
Language=null
Not_for_MPC512x=null
OnChipEEPROM=null
OnChipFLASH=null
OnChipRAM=null
PE_DEBUG=null
PE_DEVELOPMENT=null
PE_ECLIPSE=null
PE_GENERATING=null
PE_G_CPUCFG_AutoIncludeIO_Map=null
PE_G_CPUCFG_EntryPointFunctionName=null
PE_G_CPUCFG_EntryPointFunctionReturn=null
PE_G_CPUCFG_EntryPointFunctionReturnType=null
PE_G_CPUCFG_GenerateLinkerFile=null
PE_G_CPUCFG_GenerateMainModule=null
PE_G_CPUCFG_InitIntVectorTableSym=null
PE_G_CPUCFG_ManageInterruptVectorTable=null
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_set0_PORTB_PCR8=null
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_set1_PORTB_PCR8=null
PE_G_GenBitMask=null
PE_G_MisraCnfBackParams_0=null
PE_G_MisraCnfParams_0=null
PE_G_MisraRuleList_0=null
PE_G_MisraStackIdx=null
PE_G_NO_SETREGMACROS=null
PE_G_RTOSAdap_regCompIndex=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventEnabled_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventPtr_OnFieldEvent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_eventPtr_OnPortEvent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodEnabled_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ClearFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ClearPortBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldEventStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldOutputValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetFieldValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortEventStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortOutputValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_GetPortValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldEventCondition=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldInputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldOutputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetFieldValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortEventCondition=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortInputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortOutputDirection=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_SetPortValue=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_ToggleFieldBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methodPtr_TogglePortBits=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventEnabled_OnMasterBlockReceived=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventEnabled_OnMasterBlockSent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnBusStartDetected=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnBusStopDetected=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnError=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterBlockReceived=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterBlockSent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnMasterByteReceived=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveBlockReceived=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveBlockSent=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveByteReceived=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveGeneralCallAddr=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveRxRequest=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveSmBusAlertResponse=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveSmBusCallAddr=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_eventPtr_OnSlaveTxRequest=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_CheckBus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_GetError=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_Main=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterGetBlockReceivedStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterGetBlockSentStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterReceiveBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_MasterSendBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodEnabled_SelectSlaveDevice=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_CheckBus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_ClearStats=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetError=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_GetStats=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetBlockReceivedStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetBlockSentStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetReceivedDataNum=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterGetSentDataNum=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterReceiveBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterSendBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_MasterUpdateReceiveBlockSize=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SelectSlaveDevice=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SendAcknowledge=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetAcknowledgeMode=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveCancelReceptionBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveCancelTransmissionBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetBlockReceivedStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetBlockSentStatus=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetReceivedDataNum=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveGetSentDataNum=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveReceiveBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveSendBlock=null
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methodPtr_SlaveUpdateReceiveBlockSize=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnOtgStateChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventEnabled_OnSignalChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDevice1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceReset=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSetupPacket=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSof=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSpeedDetect=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnDeviceSuspend=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHost1msTimer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostDeviceDeattach=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostError=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResetRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnHostResumeRecovery=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnOtgStateChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_eventPtr_OnSignalChange=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgCmd=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgRegisterDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_OtgRegisterHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodEnabled_SetSignal=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_ConnectPin=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Deinit=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceAssertResume=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceDeinitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceGetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceInitEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceReadSetupData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetAddress=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceSetUsbStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceStallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_DeviceUnstallEndpoint=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Disable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Enable=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetDriverState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_GetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostCancelTransfer=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostClosePipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetMicroFrameNumber=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostGetTransferStatus=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostOpenPipe=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostRecvData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendData=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSendSetup=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_HostSetPortState=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Init=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_Main=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgCmd=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterDevice=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_OtgRegisterHost=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetEventMask=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetOperationMode=null
PE_G_RTOSAdap_regCompInstance_USB_LDD_methodPtr_SetSignal=null
PE_G_USE_UINTXX_T=null
PE_G_XLKR_ASM_COMPILER_OTHER_PARAMS=null
PE_G_XLKR_C_COMPILER_OTHER_PARAMS=null
PE_ProductVersion=null
PEversion=null
PEversionDecimal=null
ProcessorModule=null
ProcessorName=null
ProjectModule=null
ProjectName=null
ServerDir_PE=null
SetHighSpeedMode=null
SupportedCPUfamily=null
TimeStamp=null
Xtal_kHz=null
Xtal_kHz_real=null
ivINT_PORTB=null
ivINT_USB0=null
virtual_ADC0_TotalConversionPrescalerAddr=null
virtual_ADC0_TotalConversionPrescalerReg=null
virtual_ADC1_TotalConversionPrescalerAddr=null
virtual_ADC1_TotalConversionPrescalerReg=null

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
ADC1AsynchroClock=[1]
ADC1AsynchroClock_Setting=[ADC1Async_FullPower_HighSpeed]
ADC1BusClock=[1]
ADC1BusClock_Setting=[1]
ADC1ClkSel=[1]
ADC1ClkSel_Setting=[ADC1BusClock]
CAN0ClkSel=[1]
CAN0ClkSel_Setting=[CAN0BusClk]
CAN1ClkSel=[1]
CAN1ClkSel_Setting=[CAN1BusClk]
CMTPresc=[1]
CMTPresc_Setting=[1]
CMTPrimaryPresc=[1]
CMTPrimaryPresc_Setting=[1]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[SYSTEM_OSC]
EWMClkSel=[1]
EWMClkSel_Setting=[LPO_1kHzSrc]
EventModuleList=[Events]
FTM0ClkSource=[1]
FTM0ClkSource_Setting=[OUTDIV2Presc]
FTM1ClkSource=[1]
FTM1ClkSource_Setting=[OUTDIV2Presc]
FTM2ClkSource=[1]
FTM2ClkSource_Setting=[OUTDIV2Presc]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
I2S0_ClkSel=[1]
I2S0_ClkSel_Setting=[I2S0_CoreDiv]
I2S0_Rx_Div2_PSR=[1]
I2S0_Rx_Div2_PSR_Setting=[1]
I2S0_Tx_Div2_PSR=[1]
I2S0_Tx_Div2_PSR_Setting=[1]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[PE_Types|PE_Error|PE_Const|IO_Map]
InstructionClock=[undef]
LCDAlternateDiv=[1]
LCDAlternateDiv_Setting=[1]
LCDClkSel=[1]
LCDClkSel_Setting=[LCDAlternateDiv]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[ERCLK]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_ERCLKSel=[1]
MCG_ERCLKSel_Setting=[SYSTEM_OSC]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[256]
MCG_FRDIV_Setting=[256]
MCG_PRDIV=[4]
MCG_PRDIV_Setting=[4]
MCG_VDIV=[24]
MCG_VDIV_Setting=[24]
ModuleList=[usb_otg|USB_LDD|OTG_MAX3353_INT_PIN|OTG_MAX3353|AS1|PTC5]
OUTDIV1Presc=[1]
OUTDIV1Presc_Setting=[1]
OUTDIV2Presc=[1]
OUTDIV2Presc_Setting=[1]
OUTDIV3Presc=[2]
OUTDIV3Presc_Setting=[2]
OUTDIV4Presc=[2]
OUTDIV4Presc_Setting=[2]
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_RegList32=[PORTB_PCR8]
PE_G_CRI_GPIO_LDD_INIT_OTG_MAX3353_INT_PIN_inited=[PORTB_PCR8]
PE_G_GPIO_PTB_GetPortEventStatusList=[no]
PE_G_GPIO_PTB_IntServiceList=[yes]
PE_G_GPIO_PTB_ModuleNameList=[OTG_MAX3353_INT_PIN]
PE_G_GPIO_PTC_GetPortEventStatusList=[no]
PE_G_GPIO_PTC_IntServiceList=[yes]
PE_G_GPIO_PTC_ModuleNameList=[PTC5]
PE_G_LCF_DATA_ALIGN=[512]
PE_G_LCF_DATA_SECTION=[.USB_LDD_memory_section]
PE_G_RTOSAdap_regCompInstanceAllocatedDevices=[USB0|PTB|I2C1]
PE_G_RTOSAdap_regCompInstanceDeviceBaseAddrs=[1074208768|1074786368|1074163712]
PE_G_RTOSAdap_regCompInstanceIds=[0|1|2]
PE_G_RTOSAdap_regCompInstanceNames=[USB_LDD|OTG_MAX3353_INT_PIN|OTG_MAX3353]
PE_G_RTOSAdap_regCompInstanceSharedComponentName=[USB_LDD|OTG_MAX3353_INT_PIN|OTG_MAX3353]
PE_G_RTOSAdap_regCompInstanceTypes=[USB_LDD|LDD_GPIO|I2C_LDD]
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_events=[OnPortEvent|OnFieldEvent]
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_INT_PIN_methods=[Init|Deinit|SetEventMask|GetEventMask|SetPortEventCondition|GetPortEventStatus|SetFieldEventCondition|GetFieldEventStatus|SetPortValue|GetPortValue|GetPortOutputValue|ClearPortBits|SetPortBits|TogglePortBits|SetPortInputDirection|SetPortOutputDirection|SetFieldValue|GetFieldValue|GetFieldOutputValue|ClearFieldBits|SetFieldBits|ToggleFieldBits|SetFieldInputDirection|SetFieldOutputDirection|SetOperationMode|GetDriverState|ConnectPin]
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_events=[OnMasterBlockSent|OnMasterBlockReceived|OnMasterByteReceived|OnSlaveBlockSent|OnSlaveBlockReceived|OnSlaveByteReceived|OnSlaveRxRequest|OnSlaveTxRequest|OnSlaveGeneralCallAddr|OnSlaveSmBusCallAddr|OnSlaveSmBusAlertResponse|OnError|OnBusStartDetected|OnBusStopDetected]
PE_G_RTOSAdap_regCompInstance_OTG_MAX3353_methods=[Init|Deinit|Enable|Disable|SetEventMask|GetEventMask|MasterSendBlock|MasterGetBlockSentStatus|MasterGetSentDataNum|MasterReceiveBlock|MasterGetBlockReceivedStatus|MasterGetReceivedDataNum|MasterUpdateReceiveBlockSize|SlaveSendBlock|SlaveGetBlockSentStatus|SlaveGetSentDataNum|SlaveCancelTransmissionBlock|SlaveReceiveBlock|SlaveGetBlockReceivedStatus|SlaveGetReceivedDataNum|SlaveUpdateReceiveBlockSize|SlaveCancelReceptionBlock|SelectSlaveDevice|SetAcknowledgeMode|SendAcknowledge|GetError|CheckBus|GetStats|ClearStats|Main|ConnectPin|SetOperationMode|GetDriverState]
PE_G_RTOSAdap_regCompInstance_USB_LDD_events=[OnDeviceReset|OnDeviceSpeedDetect|OnDeviceSuspend|OnDeviceResume|OnDeviceSetupPacket|OnDeviceSof|OnDeviceError|OnDevice1msTimer|OnHostDeviceDeattach|OnHostResetRecovery|OnHostResumeRecovery|OnHostError|OnHost1msTimer|OnOtgDevice|OnOtgHost|OnOtgStateChange|OnSignalChange]
PE_G_RTOSAdap_regCompInstance_USB_LDD_methods=[Init|Deinit|SetEventMask|GetEventMask|Enable|Disable|DeviceGetUsbStatus|DeviceSetUsbStatus|DeviceSetAddress|DeviceAssertResume|DeviceInitEndpoint|DeviceDeinitEndpoint|DeviceStallEndpoint|DeviceUnstallEndpoint|DeviceReadSetupData|DeviceSendData|DeviceRecvData|DeviceGetTransferStatus|DeviceCancelTransfer|HostGetPortState|HostSetPortState|HostGetFrameNumber|HostGetMicroFrameNumber|HostOpenPipe|HostClosePipe|HostSendSetup|HostSendData|HostRecvData|HostGetTransferStatus|HostCancelTransfer|OtgRegisterDevice|OtgRegisterHost|OtgCmd|SetSignal|ConnectPin|Main|SetOperationMode|GetDriverState]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLK]
SDHC_ClkSel=[1]
SDHC_ClkSel_Setting=[OUTDIV1Presc]
SharedModules=[Kinetis\PE_Types.drv|Kinetis\PE_Error.drv|Kinetis\PE_Const.drv|Kinetis\IO_Map.drv]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0Div]
USB0_PLLFLL0Div=[1]
USB0_PLLFLL0Div_Setting=[1]
USB0_PLLFLL0Frac=[1]
USB0_PLLFLL0Frac_Setting=[1]
WDOGAddPresc=[1]
WDOGAddPresc_Setting=[1]
WDOGClkSel=[1]
WDOGClkSel_Setting=[OUTDIV2Presc]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]
virtual_ADC1_TotalConversionPrescaler=[1]
virtual_ADC1_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 

