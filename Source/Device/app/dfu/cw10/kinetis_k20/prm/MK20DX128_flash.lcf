# Default linker command file.
MEMORY {
	m_interrupts  (RX) : ORIGIN = 0x00000000, LENGTH = 0x000001E0
	m_text        (RX) : ORIGIN = 0x00000800, LENGTH = 0x00020000-0x00000800
	m_data        (RW) : ORIGIN = 0x1FFFE000, LENGTH = 0x00004000-0x00000200
	m_bdt		  (RW) : ORIGIN = 0x20001E00, LENGTH = 0x200
	m_cfmprotrom  (RX) : ORIGIN = 0x00000400, LENGTH = 0x00000010
}

KEEP_SECTION { .vectortable }
KEEP_SECTION { .cfmconfig }
KEEP_SECTION { .m_bdt }

SECTIONS {
	.interrupts :
	{
    	___VECTOR_RAM = .;    	
    	* (.vectortable)
    	. = ALIGN (0x4);
	} > m_interrupts

	.cfmprotect :
	{
    	*(.cfmconfig)
    	. = ALIGN (0x4);
	} > m_cfmprotrom

	.app_text: 
	{
		ALIGNALL(4);
   		* (.init)	
   		* (.text)
		.= ALIGN(0x8) ;
		* (.rodata)
		.= ALIGN(0x4) ;
    	___ROM_AT = .;
	} > m_text

	.usb_bdt_sec: 
	{
		___BDT = .;
		* (.usb_bdt)
		. = ALIGN(0x4);
	} > m_bdt

	.app_data: AT(___ROM_AT)
	{
   		* (.sdata)
   		* (.data)
		.= ALIGN(0x4) ;
   		*(.ARM.extab)
		.= ALIGN(0x4) ;
       	__exception_table_start__ = .;
   		EXCEPTION
       	__exception_table_end__ = .;
		.= ALIGN(0x4) ;
       	__sinit__ = .;
   		STATICINIT
		.= ALIGN(0x8) ;
	} > m_data
	
	.bss :
	{
		.= ALIGN(0x4) ;
		__START_BSS = .;
		* (.bss)
		__END_BSS = .;
		.= ALIGN(0x8) ;
	} >> m_data

	_romp_at = ___ROM_AT + SIZEOF(.app_data);
	.romp : AT(_romp_at)
	{
    	__S_romp = _romp_at;
   		WRITEW(___ROM_AT);
    	WRITEW(ADDR(.app_data));
    	WRITEW(SIZEOF(.app_data));
    	WRITEW(0);
    	WRITEW(0);
    	WRITEW(0);
	}

	__SP_INIT = . + 0x00000400;
	_SP_INIT = __SP_INIT;
	__heap_addr = __SP_INIT;
	__heap_size = 0x00002400;
    __HEAP_START = __heap_addr;
    __HEAP_END = __heap_addr + __heap_size;
    __mem_limit = __HEAP_END;
    __stack_safety = 16;
}