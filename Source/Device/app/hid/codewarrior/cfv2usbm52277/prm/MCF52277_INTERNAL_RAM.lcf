# Sample Linker Command File for CodeWarrior for ColdFire

KEEP_SECTION {.vectortable}

# Memory ranges	

MEMORY {
   vectorram   (RWX) : ORIGIN = 0x80000000, LENGTH = 0x00000400
   code        (RX)  : ORIGIN = 0x80000400, LENGTH = 0x00010000
   userram     (RWX) : ORIGIN = 0x80010400, LENGTH = 0x0000DC00
}

SECTIONS {

    ___EXTERNAL_SDRAM_BASE = 0x40000000;
    ___EXTERNAL_SDRAM_SIZE = 0x04000000; # 64MB

    ___INTERNAL_SRAM_BASE  = 0x80000000;
    ___INTERNAL_SRAM_SIZE  = 0x00020000; # 128KB
    ___EXTERNAL_FLASH_BASE = 0x00000000;
    ___EXTERNAL_FLASH_SIZE = 0x01000000; # 16MB
    
# Heap and Stack sizes definition
	___heap_size	  = 0x8000;
	___stack_size     = 0x1000;



# MCF52277 Derivative Memory map definitions from linker command files:
# __IPSBAR, __RAMBAR, __RAMBAR_SIZE, __FLASHBAR, __FLASHBAR_SIZE linker
# symbols must be defined in the linker command file.

# Memory Mapped Registers (IPSBAR= 0x40000000)
 ___IPSBAR         = 0x40000000;

# 128 Kbytes Internal SRAM
   ___RAMBAR         = 0x80000000;
   ___RAMBAR_SIZE    = 0x00020000;

   ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;
   
  .userram	  : {} > userram		
  .code	    : {} > code		
  .vectorram	: {} > vectorram			
	
	.vectors :
	{
		exceptions_cfv2.c(.vectortable)
		. = ALIGN (0x4); 
	} >> code


	.text :
	{
		*(.text)
		. = ALIGN (0x4);
		*(.rodata)
		. = ALIGN (0x4);		
		___ROM_AT = .;
		___DATA_ROM = .;
	} >> code

	.data : AT(___ROM_AT) 
	{  
		___DATA_RAM = .;
		. = ALIGN(0x4);
		*(.exception)	
		. = ALIGN(0x4);	
		__exception_table_start__ = .;
		EXCEPTION
		__exception_table_end__ = .;
		
		___sinit__ = .;
	    STATICINIT
		__START_DATA = .;

		*(.data)
		. = ALIGN (0x4);
		__END_DATA = .;

		__START_SDATA = .;
		*(.sdata)
		. = ALIGN (0x4);
		__END_SDATA = .;

		___DATA_END = .;
		__SDA_BASE = .;
		. = ALIGN (0x4);
	} >> userram

	.bss :
	{
		___BSS_START = .;
		__START_SBSS = .;
		*(.sbss)
		. = ALIGN (0x4);
		*(SCOMMON)
		__END_SBSS = .;

		__START_BSS = .;
		*(.bss)
		. = ALIGN (0x4);
		*(COMMON)
		__END_BSS = .;
		___BSS_END = .;

		. = ALIGN(0x4);
	} >> userram

	.custom :
	{
		___HEAP_START	= .;
		___heap_addr	= ___HEAP_START;
		___HEAP_END		= ___HEAP_START + ___heap_size;
		___SP_END		= ___HEAP_END;
		___SP_INIT		= ___SP_END + ___stack_size;

		. = ALIGN (0x4);
	} >> userram
  	
	___VECTOR_RAM		= ADDR(.vectorram);
	
	__SP_INIT		= ___SP_INIT;
	___mem_limit = ___HEAP_END;
	___stack_safety = 16;

	_romp_at = ___ROM_AT + SIZEOF(.data);
	.romp : AT(_romp_at)
	{
		__S_romp = _romp_at;
		WRITEW(___ROM_AT);
		WRITEW(ADDR(.data));
		WRITEW(SIZEOF(.data));
		WRITEW(0);
		WRITEW(0);
		WRITEW(0);
	}

}